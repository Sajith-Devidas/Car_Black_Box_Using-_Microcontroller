

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Fri May 05 21:06:14 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    62                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    63   000000                     
    64                           ; Generated 09/02/2023 GMT
    65                           ; 
    66                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution. Publication is not required when
    80                           ;        this file is used in an embedded application.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC18F4580 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98   000000                     
    99                           	psect	idataCOMRAM
   100   00136F                     __pidataCOMRAM:
   101                           	callstack 0
   102                           
   103                           ;initializer for _gear
   104   00136F  31                 	db	49
   105   001370  32                 	db	50
   106   001371  33                 	db	51
   107   001372  34                 	db	52
   108   001373  4E                 	db	78
   109   001374  52                 	db	82
   110                           
   111                           ;initializer for read_switches@once
   112   001375  01                 	db	1
   113                           
   114                           	psect	idataBANK0
   115   0013D5                     __pidataBANK0:
   116                           	callstack 0
   117                           
   118                           ;initializer for go_to_menu@F10378
   119   0013D5  CC                 	db	low STR_1
   120   0013D6  2F                 	db	high STR_1
   121   0013D7  92                 	db	low STR_2
   122   0013D8  2F                 	db	high STR_2
   123   0013D9  B7                 	db	low STR_3
   124   0013DA  2F                 	db	high STR_3
   125   0013DB  AC                 	db	low STR_4
   126   0013DC  2F                 	db	high STR_4
   127   0013DD  DF                 	db	low STR_5
   128   0013DE  2F                 	db	high STR_5
   129                           
   130                           ;initializer for set_time@F10422
   131   0013DF  00                 	db	0
   132   0013E0  00                 	db	0
   133   0013E1  3A                 	db	58
   134   0013E2  00                 	db	0
   135   0013E3  00                 	db	0
   136   0013E4  3A                 	db	58
   137   0013E5  00                 	db	0
   138   0013E6  00                 	db	0
   139   0013E7  00                 	db	0
   140   000000                     _RCREG	set	4014
   141   000000                     _TXREG	set	4013
   142   000000                     _SPBRG	set	4015
   143   000000                     _SSPADD	set	4040
   144   000000                     _SSPCON1	set	4038
   145   000000                     _ADRESL	set	4035
   146   000000                     _ADRESH	set	4036
   147   000000                     _ABDOVF	set	32199
   148   000000                     _ACKSTAT	set	32302
   149   000000                     _CKE	set	32318
   150   000000                     _VCFG1	set	32269
   151   000000                     _GODONE	set	32273
   152   000000                     _TRISC	set	3988
   153   000000                     _TRISD	set	3989
   154   000000                     _PORTDbits	set	3971
   155   000000                     _PORTBbits	set	3969
   156   000000                     _ADCON1	set	4033
   157   000000                     _ADCON0	set	4034
   158   000000                     _RCIF	set	31989
   159   000000                     _RCIE	set	31981
   160   000000                     _TXIF	set	31988
   161   000000                     _ABDEN	set	32192
   162   000000                     _WUE	set	32193
   163   000000                     _BRG16	set	32195
   164   000000                     _SCKP	set	32196
   165   000000                     _RCIDL	set	32198
   166   000000                     _RX9D	set	32088
   167   000000                     _OERR	set	32089
   168   000000                     _FERR	set	32090
   169   000000                     _ADDEN	set	32091
   170   000000                     _CREN	set	32092
   171   000000                     _SREN	set	32093
   172   000000                     _RX9	set	32094
   173   000000                     _TX9D	set	32096
   174   000000                     _TRMT	set	32097
   175   000000                     _BRGH	set	32098
   176   000000                     _SENDB	set	32099
   177   000000                     _SYNC	set	32100
   178   000000                     _TXEN	set	32101
   179   000000                     _TX9	set	32102
   180   000000                     _TRISC6	set	31910
   181   000000                     _TRISC7	set	31911
   182   000000                     _ACKEN	set	32300
   183   000000                     _ACKDT	set	32301
   184   000000                     _RCEN	set	32299
   185   000000                     _RSEN	set	32297
   186   000000                     _PEN	set	32298
   187   000000                     _SEN	set	32296
   188   000000                     _SMP	set	32319
   189   000000                     _TRISC4	set	31908
   190   000000                     _GO	set	32273
   191   000000                     _ADON	set	32272
   192   000000                     _VCFG0	set	32268
   193   000000                     _ADCS2	set	32258
   194   000000                     _ADCS1	set	32257
   195   000000                     _ADCS0	set	32256
   196   000000                     _ACQT0	set	32259
   197   000000                     _ACQT1	set	32260
   198   000000                     _ACQT2	set	32261
   199   000000                     _PORTB	set	3969
   200   000000                     _TRISB	set	3987
   201   000000                     _TRISC3	set	31907
   202   000000                     _ADFM	set	32263
   203   000000                     _TXIE	set	31980
   204   000000                     _TRISD7	set	31919
   205   000000                     _SSPIF	set	31987
   206   000000                     _SSPBUF	set	4041
   207   000000                     _RBPU	set	32655
   208   000000                     _BCLIF	set	32011
   209   000000                     _SPEN	set	32095
   210   000000                     _CSRC	set	32103
   211   000000                     _PORTD	set	3971
   212   000000                     _PORTCbits	set	3970
   213                           
   214                           	psect	mediumconst
   215   002EDA                     __pmediumconst:
   216                           	callstack 0
   217   002EDA  00                 	db	0
   218   002EDB                     STR_22:
   219   002EDB  50                 	db	80	;'P'
   220   002EDC  41                 	db	65	;'A'
   221   002EDD  53                 	db	83	;'S'
   222   002EDE  53                 	db	83	;'S'
   223   002EDF  57                 	db	87	;'W'
   224   002EE0  4F                 	db	79	;'O'
   225   002EE1  52                 	db	82	;'R'
   226   002EE2  44                 	db	68	;'D'
   227   002EE3  20                 	db	32
   228   002EE4  53                 	db	83	;'S'
   229   002EE5  54                 	db	84	;'T'
   230   002EE6  4F                 	db	79	;'O'
   231   002EE7  52                 	db	82	;'R'
   232   002EE8  45                 	db	69	;'E'
   233   002EE9  44                 	db	68	;'D'
   234   002EEA  21                 	db	33
   235   002EEB  00                 	db	0
   236   002EEC                     STR_24:
   237   002EEC  50                 	db	80	;'P'
   238   002EED  57                 	db	87	;'W'
   239   002EEE  44                 	db	68	;'D'
   240   002EEF  20                 	db	32
   241   002EF0  4E                 	db	78	;'N'
   242   002EF1  4F                 	db	79	;'O'
   243   002EF2  54                 	db	84	;'T'
   244   002EF3  20                 	db	32
   245   002EF4  4D                 	db	77	;'M'
   246   002EF5  41                 	db	65	;'A'
   247   002EF6  54                 	db	84	;'T'
   248   002EF7  43                 	db	67	;'C'
   249   002EF8  48                 	db	72	;'H'
   250   002EF9  49                 	db	73	;'I'
   251   002EFA  4E                 	db	78	;'N'
   252   002EFB  47                 	db	71	;'G'
   253   002EFC  00                 	db	0
   254   002EFD                     STR_11:
   255   002EFD  54                 	db	84	;'T'
   256   002EFE  49                 	db	73	;'I'
   257   002EFF  4D                 	db	77	;'M'
   258   002F00  45                 	db	69	;'E'
   259   002F01  20                 	db	32
   260   002F02  20                 	db	32
   261   002F03  20                 	db	32
   262   002F04  20                 	db	32
   263   002F05  45                 	db	69	;'E'
   264   002F06  56                 	db	86	;'V'
   265   002F07  4E                 	db	78	;'N'
   266   002F08  54                 	db	84	;'T'
   267   002F09  20                 	db	32
   268   002F0A  20                 	db	32
   269   002F0B  53                 	db	83	;'S'
   270   002F0C  50                 	db	80	;'P'
   271   002F0D  00                 	db	0
   272   002F0E                     STR_6:
   273   002F0E  4E                 	db	78	;'N'
   274   002F0F  4F                 	db	79	;'O'
   275   002F10  20                 	db	32
   276   002F11  4C                 	db	76	;'L'
   277   002F12  4F                 	db	79	;'O'
   278   002F13  47                 	db	71	;'G'
   279   002F14  53                 	db	83	;'S'
   280   002F15  20                 	db	32
   281   002F16  54                 	db	84	;'T'
   282   002F17  4F                 	db	79	;'O'
   283   002F18  20                 	db	32
   284   002F19  50                 	db	80	;'P'
   285   002F1A  52                 	db	82	;'R'
   286   002F1B  49                 	db	73	;'I'
   287   002F1C  4E                 	db	78	;'N'
   288   002F1D  54                 	db	84	;'T'
   289   002F1E  00                 	db	0
   290   002F1F                     STR_19:
   291   002F1F  41                 	db	65	;'A'
   292   002F20  54                 	db	84	;'T'
   293   002F21  54                 	db	84	;'T'
   294   002F22  45                 	db	69	;'E'
   295   002F23  4D                 	db	77	;'M'
   296   002F24  50                 	db	80	;'P'
   297   002F25  54                 	db	84	;'T'
   298   002F26  53                 	db	83	;'S'
   299   002F27  20                 	db	32
   300   002F28  4C                 	db	76	;'L'
   301   002F29  45                 	db	69	;'E'
   302   002F2A  46                 	db	70	;'F'
   303   002F2B  54                 	db	84	;'T'
   304   002F2C  3A                 	db	58	;':'
   305   002F2D  00                 	db	0
   306   002F2E                     STR_15:
   307   002F2E  45                 	db	69	;'E'
   308   002F2F  4E                 	db	78	;'N'
   309   002F30  54                 	db	84	;'T'
   310   002F31  45                 	db	69	;'E'
   311   002F32  52                 	db	82	;'R'
   312   002F33  20                 	db	32
   313   002F34  50                 	db	80	;'P'
   314   002F35  41                 	db	65	;'A'
   315   002F36  53                 	db	83	;'S'
   316   002F37  53                 	db	83	;'S'
   317   002F38  57                 	db	87	;'W'
   318   002F39  4F                 	db	79	;'O'
   319   002F3A  52                 	db	82	;'R'
   320   002F3B  44                 	db	68	;'D'
   321   002F3C  00                 	db	0
   322   002F3D                     STR_13:
   323   002F3D  45                 	db	69	;'E'
   324   002F3E  4E                 	db	78	;'N'
   325   002F3F  54                 	db	84	;'T'
   326   002F40  45                 	db	69	;'E'
   327   002F41  52                 	db	82	;'R'
   328   002F42  20                 	db	32
   329   002F43  4E                 	db	78	;'N'
   330   002F44  45                 	db	69	;'E'
   331   002F45  57                 	db	87	;'W'
   332   002F46  20                 	db	32
   333   002F47  54                 	db	84	;'T'
   334   002F48  49                 	db	73	;'I'
   335   002F49  4D                 	db	77	;'M'
   336   002F4A  45                 	db	69	;'E'
   337   002F4B  00                 	db	0
   338   002F4C                     STR_21:
   339   002F4C  52                 	db	82	;'R'
   340   002F4D  45                 	db	69	;'E'
   341   002F4E  2D                 	db	45
   342   002F4F  45                 	db	69	;'E'
   343   002F50  4E                 	db	78	;'N'
   344   002F51  54                 	db	84	;'T'
   345   002F52  45                 	db	69	;'E'
   346   002F53  52                 	db	82	;'R'
   347   002F54  20                 	db	32
   348   002F55  50                 	db	80	;'P'
   349   002F56  57                 	db	87	;'W'
   350   002F57  44                 	db	68	;'D'
   351   002F58  21                 	db	33
   352   002F59  00                 	db	0
   353   002F5A                     STR_25:
   354   002F5A  50                 	db	80	;'P'
   355   002F5B  4C                 	db	76	;'L'
   356   002F5C  53                 	db	83	;'S'
   357   002F5D  20                 	db	32
   358   002F5E  52                 	db	82	;'R'
   359   002F5F  45                 	db	69	;'E'
   360   002F60  2D                 	db	45
   361   002F61  45                 	db	69	;'E'
   362   002F62  4E                 	db	78	;'N'
   363   002F63  54                 	db	84	;'T'
   364   002F64  45                 	db	69	;'E'
   365   002F65  52                 	db	82	;'R'
   366   002F66  21                 	db	33
   367   002F67  00                 	db	0
   368   002F68                     STR_20:
   369   002F68  45                 	db	69	;'E'
   370   002F69  4E                 	db	78	;'N'
   371   002F6A  54                 	db	84	;'T'
   372   002F6B  45                 	db	69	;'E'
   373   002F6C  52                 	db	82	;'R'
   374   002F6D  20                 	db	32
   375   002F6E  4E                 	db	78	;'N'
   376   002F6F  45                 	db	69	;'E'
   377   002F70  57                 	db	87	;'W'
   378   002F71  20                 	db	32
   379   002F72  50                 	db	80	;'P'
   380   002F73  57                 	db	87	;'W'
   381   002F74  44                 	db	68	;'D'
   382   002F75  00                 	db	0
   383   002F76                     STR_14:
   384   002F76  54                 	db	84	;'T'
   385   002F77  49                 	db	73	;'I'
   386   002F78  4D                 	db	77	;'M'
   387   002F79  45                 	db	69	;'E'
   388   002F7A  20                 	db	32
   389   002F7B  55                 	db	85	;'U'
   390   002F7C  50                 	db	80	;'P'
   391   002F7D  44                 	db	68	;'D'
   392   002F7E  41                 	db	65	;'A'
   393   002F7F  54                 	db	84	;'T'
   394   002F80  45                 	db	69	;'E'
   395   002F81  44                 	db	68	;'D'
   396   002F82  21                 	db	33
   397   002F83  00                 	db	0
   398   002F84                     STR_9:
   399   002F84  4C                 	db	76	;'L'
   400   002F85  4F                 	db	79	;'O'
   401   002F86  47                 	db	71	;'G'
   402   002F87  53                 	db	83	;'S'
   403   002F88  20                 	db	32
   404   002F89  43                 	db	67	;'C'
   405   002F8A  4C                 	db	76	;'L'
   406   002F8B  45                 	db	69	;'E'
   407   002F8C  41                 	db	65	;'A'
   408   002F8D  52                 	db	82	;'R'
   409   002F8E  45                 	db	69	;'E'
   410   002F8F  44                 	db	68	;'D'
   411   002F90  21                 	db	33
   412   002F91  00                 	db	0
   413   002F92                     STR_2:
   414   002F92  44                 	db	68	;'D'
   415   002F93  4F                 	db	79	;'O'
   416   002F94  57                 	db	87	;'W'
   417   002F95  4E                 	db	78	;'N'
   418   002F96  4C                 	db	76	;'L'
   419   002F97  4F                 	db	79	;'O'
   420   002F98  41                 	db	65	;'A'
   421   002F99  44                 	db	68	;'D'
   422   002F9A  20                 	db	32
   423   002F9B  4C                 	db	76	;'L'
   424   002F9C  4F                 	db	79	;'O'
   425   002F9D  47                 	db	71	;'G'
   426   002F9E  53                 	db	83	;'S'
   427   002F9F  00                 	db	0
   428   002FA0                     STR_7:
   429   002FA0  44                 	db	68	;'D'
   430   002FA1  4F                 	db	79	;'O'
   431   002FA2  57                 	db	87	;'W'
   432   002FA3  4E                 	db	78	;'N'
   433   002FA4  4C                 	db	76	;'L'
   434   002FA5  4F                 	db	79	;'O'
   435   002FA6  41                 	db	65	;'A'
   436   002FA7  44                 	db	68	;'D'
   437   002FA8  49                 	db	73	;'I'
   438   002FA9  4E                 	db	78	;'N'
   439   002FAA  47                 	db	71	;'G'
   440   002FAB  00                 	db	0
   441   002FAC                     STR_4:
   442   002FAC  43                 	db	67	;'C'
   443   002FAD  48                 	db	72	;'H'
   444   002FAE  41                 	db	65	;'A'
   445   002FAF  4E                 	db	78	;'N'
   446   002FB0  47                 	db	71	;'G'
   447   002FB1  45                 	db	69	;'E'
   448   002FB2  20                 	db	32
   449   002FB3  50                 	db	80	;'P'
   450   002FB4  57                 	db	87	;'W'
   451   002FB5  44                 	db	68	;'D'
   452   002FB6  00                 	db	0
   453   002FB7                     STR_3:
   454   002FB7  43                 	db	67	;'C'
   455   002FB8  4C                 	db	76	;'L'
   456   002FB9  45                 	db	69	;'E'
   457   002FBA  41                 	db	65	;'A'
   458   002FBB  52                 	db	82	;'R'
   459   002FBC  20                 	db	32
   460   002FBD  4C                 	db	76	;'L'
   461   002FBE  4F                 	db	79	;'O'
   462   002FBF  47                 	db	71	;'G'
   463   002FC0  53                 	db	83	;'S'
   464   002FC1  00                 	db	0
   465   002FC2                     STR_8:
   466   002FC2  4C                 	db	76	;'L'
   467   002FC3  4F                 	db	79	;'O'
   468   002FC4  47                 	db	71	;'G'
   469   002FC5  53                 	db	83	;'S'
   470   002FC6  2E                 	db	46
   471   002FC7  2E                 	db	46
   472   002FC8  2E                 	db	46
   473   002FC9  2E                 	db	46
   474   002FCA  2E                 	db	46
   475   002FCB  00                 	db	0
   476   002FCC                     STR_1:
   477   002FCC  56                 	db	86	;'V'
   478   002FCD  49                 	db	73	;'I'
   479   002FCE  45                 	db	69	;'E'
   480   002FCF  57                 	db	87	;'W'
   481   002FD0  20                 	db	32
   482   002FD1  4C                 	db	76	;'L'
   483   002FD2  4F                 	db	79	;'O'
   484   002FD3  47                 	db	71	;'G'
   485   002FD4  53                 	db	83	;'S'
   486   002FD5  00                 	db	0
   487   002FD6                     STR_23:
   488   002FD6  53                 	db	83	;'S'
   489   002FD7  55                 	db	85	;'U'
   490   002FD8  43                 	db	67	;'C'
   491   002FD9  43                 	db	67	;'C'
   492   002FDA  45                 	db	69	;'E'
   493   002FDB  53                 	db	83	;'S'
   494   002FDC  53                 	db	83	;'S'
   495   002FDD  21                 	db	33
   496   002FDE  00                 	db	0
   497   002FDF                     STR_5:
   498   002FDF  53                 	db	83	;'S'
   499   002FE0  45                 	db	69	;'E'
   500   002FE1  54                 	db	84	;'T'
   501   002FE2  20                 	db	32
   502   002FE3  54                 	db	84	;'T'
   503   002FE4  49                 	db	73	;'I'
   504   002FE5  4D                 	db	77	;'M'
   505   002FE6  45                 	db	69	;'E'
   506   002FE7  00                 	db	0
   507   002FE8                     STR_18:
   508   002FE8  46                 	db	70	;'F'
   509   002FE9  41                 	db	65	;'A'
   510   002FEA  49                 	db	73	;'I'
   511   002FEB  4C                 	db	76	;'L'
   512   002FEC  45                 	db	69	;'E'
   513   002FED  44                 	db	68	;'D'
   514   002FEE  21                 	db	33
   515   002FEF  00                 	db	0
   516   002FF0                     STR_26:
   517   002FF0  4C                 	db	76	;'L'
   518   002FF1  4F                 	db	79	;'O'
   519   002FF2  47                 	db	71	;'G'
   520   002FF3  53                 	db	83	;'S'
   521   002FF4  3A                 	db	58	;':'
   522   002FF5  00                 	db	0
   523   002FF6                     STR_12:
   524   002FF6  43                 	db	67	;'C'
   525   002FF7  20                 	db	32
   526   002FF8  00                 	db	0
   527   002FF9                     STR_10:
   528   002FF9  4F                 	db	79	;'O'
   529   002FFA  4E                 	db	78	;'N'
   530   002FFB  00                 	db	0
   531   002FFC                     STR_16:
   532   002FFC  2A                 	db	42
   533   002FFD  00                 	db	0
   534   002FFE  00                 	db	0	; dummy byte at the end
   535   000000                     
   536                           ; #config settings
   537                           
   538                           	psect	cinit
   539   00182E                     __pcinit:
   540                           	callstack 0
   541   00182E                     start_initialization:
   542                           	callstack 0
   543   00182E                     __initialization:
   544                           	callstack 0
   545                           
   546                           ; Initialize objects allocated to BANK0 (19 bytes)
   547                           ; load TBLPTR registers with __pidataBANK0
   548   00182E  0ED5               	movlw	low __pidataBANK0
   549   001830  6EF6               	movwf	tblptrl,c
   550   001832  0E13               	movlw	high __pidataBANK0
   551   001834  6EF7               	movwf	tblptrh,c
   552   001836  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   553   001838  6EF8               	movwf	tblptru,c
   554   00183A  EE00  F078         	lfsr	0,__pdataBANK0
   555   00183E  EE10 F013          	lfsr	1,19
   556   001842                     copy_data0:
   557   001842  0009               	tblrd		*+
   558   001844  CFF5 FFEE          	movff	tablat,postinc0
   559   001848  50E5               	movf	postdec1,w,c
   560   00184A  50E1               	movf	fsr1l,w,c
   561   00184C  E1FA               	bnz	copy_data0
   562                           
   563                           ; Initialize objects allocated to COMRAM (7 bytes)
   564                           ; load TBLPTR registers with __pidataCOMRAM
   565   00184E  0E6F               	movlw	low __pidataCOMRAM
   566   001850  6EF6               	movwf	tblptrl,c
   567   001852  0E13               	movlw	high __pidataCOMRAM
   568   001854  6EF7               	movwf	tblptrh,c
   569   001856  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   570   001858  6EF8               	movwf	tblptru,c
   571   00185A  EE00  F058         	lfsr	0,__pdataCOMRAM
   572   00185E  EE10 F007          	lfsr	1,7
   573   001862                     copy_data1:
   574   001862  0009               	tblrd		*+
   575   001864  CFF5 FFEE          	movff	tablat,postinc0
   576   001868  50E5               	movf	postdec1,w,c
   577   00186A  50E1               	movf	fsr1l,w,c
   578   00186C  E1FA               	bnz	copy_data1
   579                           
   580                           ; Clear objects allocated to BANK0 (24 bytes)
   581   00186E  EE00  F060         	lfsr	0,__pbssBANK0
   582   001872  0E18               	movlw	24
   583   001874                     clear_0:
   584   001874  6AEE               	clrf	postinc0,c
   585   001876  06E8               	decf	wreg,f,c
   586   001878  E1FD               	bnz	clear_0
   587                           
   588                           ; Clear objects allocated to COMRAM (29 bytes)
   589   00187A  EE00  F03B         	lfsr	0,__pbssCOMRAM
   590   00187E  0E1D               	movlw	29
   591   001880                     clear_1:
   592   001880  6AEE               	clrf	postinc0,c
   593   001882  06E8               	decf	wreg,f,c
   594   001884  E1FD               	bnz	clear_1
   595   001886                     end_of_initialization:
   596                           	callstack 0
   597   001886                     __end_of__initialization:
   598                           	callstack 0
   599   001886  0E00               	movlw	low (__Lmediumconst shr (0+16))
   600   001888  6EF8               	movwf	tblptru,c
   601   00188A  0100               	movlb	0
   602   00188C  EF4D  F010         	goto	_main	;jump to C main() function
   603                           
   604                           	psect	bssCOMRAM
   605   00003B                     __pbssCOMRAM:
   606                           	callstack 0
   607   00003B                     	ds	4
   608   00003F                     set_time@clock_reg:
   609                           	callstack 0
   610   00003F                     	ds	3
   611   000042                     get_time@clock_reg:
   612                           	callstack 0
   613   000042                     	ds	3
   614   000045                     _gear_iter:
   615                           	callstack 0
   616   000045                     	ds	2
   617   000047                     _log_iter:
   618                           	callstack 0
   619   000047                     	ds	2
   620   000049                     _log_total_saved:
   621                           	callstack 0
   622   000049                     	ds	2
   623   00004B                     read_switches@key:
   624                           	callstack 0
   625   00004B                     	ds	1
   626   00004C                     _time:
   627                           	callstack 0
   628   00004C                     	ds	9
   629   000055                     _speed:
   630                           	callstack 0
   631   000055                     	ds	3
   632                           
   633                           	psect	dataCOMRAM
   634   000058                     __pdataCOMRAM:
   635                           	callstack 0
   636   000058                     _gear:
   637                           	callstack 0
   638   000058                     	ds	6
   639   00005E                     read_switches@once:
   640                           	callstack 0
   641   00005E                     	ds	1
   642                           
   643                           	psect	bssBANK0
   644   000060                     __pbssBANK0:
   645                           	callstack 0
   646   000060                     	ds	16
   647   000070                     	ds	4
   648   000074                     	ds	4
   649                           
   650                           	psect	dataBANK0
   651   000078                     __pdataBANK0:
   652                           	callstack 0
   653   000078                     go_to_menu@F10378:
   654                           	callstack 0
   655   000078                     	ds	10
   656   000082                     set_time@F10422:
   657                           	callstack 0
   658   000082                     	ds	9
   659                           
   660                           	psect	cstackCOMRAM
   661   000001                     __pcstackCOMRAM:
   662                           	callstack 0
   663   000001                     ?_read_adc:
   664                           	callstack 0
   665   000001                     ?___awdiv:
   666                           	callstack 0
   667   000001                     ?___awmod:
   668                           	callstack 0
   669   000001                     ?___lwdiv:
   670                           	callstack 0
   671   000001                     ?___lwmod:
   672                           	callstack 0
   673   000001                     ?___ftpack:
   674                           	callstack 0
   675   000001                     i2c_write@data:
   676                           	callstack 0
   677   000001                     read_switches@detection_type:
   678                           	callstack 0
   679   000001                     clcd_write@control_bit:
   680                           	callstack 0
   681   000001                     putch@byte:
   682                           	callstack 0
   683   000001                     delay@ms:
   684                           	callstack 0
   685   000001                     ___awdiv@dividend:
   686                           	callstack 0
   687   000001                     ___awmod@dividend:
   688                           	callstack 0
   689   000001                     ___lwdiv@dividend:
   690                           	callstack 0
   691   000001                     ___lwmod@dividend:
   692                           	callstack 0
   693   000001                     ___ftpack@arg:
   694                           	callstack 0
   695                           
   696                           ; 3 bytes @ 0x0
   697   000001                     	ds	1
   698   000002                     read_ds1307@address:
   699                           	callstack 0
   700   000002                     write_external_eeprom@data:
   701                           	callstack 0
   702   000002                     read_external_eeprom@address:
   703                           	callstack 0
   704   000002                     clcd_write@byte:
   705                           	callstack 0
   706                           
   707                           ; 1 bytes @ 0x1
   708   000002                     	ds	1
   709   000003                     ??_delay:
   710   000003                     ??_read_adc:
   711   000003                     read_ds1307@data:
   712                           	callstack 0
   713   000003                     read_external_eeprom@data:
   714                           	callstack 0
   715   000003                     write_external_eeprom@wait:
   716                           	callstack 0
   717   000003                     clcd_print@data:
   718                           	callstack 0
   719   000003                     ___awdiv@divisor:
   720                           	callstack 0
   721   000003                     ___awmod@divisor:
   722                           	callstack 0
   723   000003                     ___lwdiv@divisor:
   724                           	callstack 0
   725   000003                     ___lwmod@divisor:
   726                           	callstack 0
   727                           
   728                           ; 2 bytes @ 0x2
   729   000003                     	ds	1
   730   000004                     clcd_putch@addr:
   731                           	callstack 0
   732   000004                     ___ftpack@exp:
   733                           	callstack 0
   734   000004                     delay@wait:
   735                           	callstack 0
   736   000004                     print_to_console@iter:
   737                           	callstack 0
   738                           
   739                           ; 2 bytes @ 0x3
   740   000004                     	ds	1
   741   000005                     write_external_eeprom@address:
   742                           	callstack 0
   743   000005                     clcd_print@addr:
   744                           	callstack 0
   745   000005                     clcd_putch@data:
   746                           	callstack 0
   747   000005                     ___awdiv@counter:
   748                           	callstack 0
   749   000005                     ___awmod@counter:
   750                           	callstack 0
   751   000005                     ___ftpack@sign:
   752                           	callstack 0
   753   000005                     ___lwmod@counter:
   754                           	callstack 0
   755   000005                     read_adc@reg_val:
   756                           	callstack 0
   757   000005                     ___lwdiv@quotient:
   758                           	callstack 0
   759                           
   760                           ; 2 bytes @ 0x4
   761   000005                     	ds	1
   762   000006                     ??_get_password:
   763   000006                     ??___ftpack:
   764   000006                     print_log_to_clcd@iter:
   765                           	callstack 0
   766   000006                     ___awdiv@sign:
   767                           	callstack 0
   768   000006                     ___awmod@sign:
   769                           	callstack 0
   770   000006                     delay@i:
   771                           	callstack 0
   772                           
   773                           ; 2 bytes @ 0x5
   774   000006                     	ds	1
   775   000007                     read_adc@channel:
   776                           	callstack 0
   777   000007                     store_key_log@gear:
   778                           	callstack 0
   779   000007                     print_log_to_clcd@LINE:
   780                           	callstack 0
   781   000007                     ___lwdiv@counter:
   782                           	callstack 0
   783   000007                     ___awdiv@quotient:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0x6
   787   000007                     	ds	1
   788   000008                     ??_view_log:
   789   000008                     get_password@entered_password:
   790                           	callstack 0
   791                           
   792                           ; 4 bytes @ 0x7
   793   000008                     	ds	1
   794   000009                     ?___lwtoft:
   795                           	callstack 0
   796   000009                     write_ds1307@data:
   797                           	callstack 0
   798   000009                     ___lwtoft@c:
   799                           	callstack 0
   800   000009                     view_log@string:
   801                           	callstack 0
   802                           
   803                           ; 16 bytes @ 0x8
   804   000009                     	ds	1
   805   00000A                     write_ds1307@address:
   806                           	callstack 0
   807   00000A                     change_password@confirm:
   808                           	callstack 0
   809                           
   810                           ; 4 bytes @ 0x9
   811   00000A                     	ds	1
   812   00000B                     ??_set_time:
   813   00000B                     init_ds1307@dummy:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0xA
   817   00000B                     	ds	1
   818   00000C                     ?___ftdiv:
   819                           	callstack 0
   820   00000C                     get_password@delay:
   821                           	callstack 0
   822   00000C                     ___ftdiv@f1:
   823                           	callstack 0
   824                           
   825                           ; 3 bytes @ 0xB
   826   00000C                     	ds	1
   827   00000D                     set_time@blinker:
   828                           	callstack 0
   829                           
   830                           ; 2 bytes @ 0xC
   831   00000D                     	ds	1
   832   00000E                     get_password@wait:
   833                           	callstack 0
   834   00000E                     change_password@wait:
   835                           	callstack 0
   836                           
   837                           ; 2 bytes @ 0xD
   838   00000E                     	ds	1
   839   00000F                     ___ftdiv@f2:
   840                           	callstack 0
   841   00000F                     set_time@time_buffer:
   842                           	callstack 0
   843                           
   844                           ; 9 bytes @ 0xE
   845   00000F                     	ds	1
   846   000010                     get_password@wait_603:
   847                           	callstack 0
   848   000010                     change_password@password:
   849                           	callstack 0
   850                           
   851                           ; 4 bytes @ 0xF
   852   000010                     	ds	2
   853   000012                     ??___ftdiv:
   854   000012                     get_password@count:
   855                           	callstack 0
   856                           
   857                           ; 2 bytes @ 0x11
   858   000012                     	ds	2
   859   000014                     get_password@key_pressed:
   860                           	callstack 0
   861   000014                     change_password@exit_flag:
   862                           	callstack 0
   863                           
   864                           ; 1 bytes @ 0x13
   865   000014                     	ds	1
   866   000015                     ___ftdiv@cntr:
   867                           	callstack 0
   868   000015                     get_password@total_attempts:
   869                           	callstack 0
   870   000015                     change_password@j_620:
   871                           	callstack 0
   872                           
   873                           ; 2 bytes @ 0x14
   874   000015                     	ds	1
   875   000016                     ___ftdiv@f3:
   876                           	callstack 0
   877                           
   878                           ; 3 bytes @ 0x15
   879   000016                     	ds	1
   880   000017                     get_password@p:
   881                           	callstack 0
   882   000017                     change_password@j:
   883                           	callstack 0
   884                           
   885                           ; 2 bytes @ 0x16
   886   000017                     	ds	1
   887   000018                     set_time@exit_flag:
   888                           	callstack 0
   889                           
   890                           ; 1 bytes @ 0x17
   891   000018                     	ds	1
   892   000019                     set_time@dummy:
   893                           	callstack 0
   894   000019                     ___ftdiv@exp:
   895                           	callstack 0
   896   000019                     get_password@j:
   897                           	callstack 0
   898   000019                     change_password@j_615:
   899                           	callstack 0
   900   000019                     view_log@exit_flag:
   901                           	callstack 0
   902                           
   903                           ; 2 bytes @ 0x18
   904   000019                     	ds	1
   905   00001A                     ___ftdiv@sign:
   906                           	callstack 0
   907   00001A                     set_time@field_select:
   908                           	callstack 0
   909                           
   910                           ; 2 bytes @ 0x19
   911   00001A                     	ds	1
   912   00001B                     ?___ftmul:
   913                           	callstack 0
   914   00001B                     change_password@i:
   915                           	callstack 0
   916   00001B                     get_password@i:
   917                           	callstack 0
   918   00001B                     view_log@i:
   919                           	callstack 0
   920   00001B                     ___ftmul@f1:
   921                           	callstack 0
   922                           
   923                           ; 3 bytes @ 0x1A
   924   00001B                     	ds	1
   925   00001C                     set_time@hour:
   926                           	callstack 0
   927                           
   928                           ; 2 bytes @ 0x1B
   929   00001C                     	ds	2
   930   00001E                     set_time@min:
   931                           	callstack 0
   932   00001E                     ___ftmul@f2:
   933                           	callstack 0
   934                           
   935                           ; 3 bytes @ 0x1D
   936   00001E                     	ds	2
   937   000020                     set_time@seconds:
   938                           	callstack 0
   939                           
   940                           ; 2 bytes @ 0x1F
   941   000020                     	ds	1
   942   000021                     ??___ftmul:
   943                           
   944                           ; 1 bytes @ 0x20
   945   000021                     	ds	1
   946   000022                     ??_go_to_menu:
   947                           
   948                           ; 1 bytes @ 0x21
   949   000022                     	ds	2
   950   000024                     ___ftmul@exp:
   951                           	callstack 0
   952   000024                     go_to_menu@menu:
   953                           	callstack 0
   954                           
   955                           ; 10 bytes @ 0x23
   956   000024                     	ds	1
   957   000025                     ___ftmul@f3_as_product:
   958                           	callstack 0
   959                           
   960                           ; 3 bytes @ 0x24
   961   000025                     	ds	3
   962   000028                     ___ftmul@cntr:
   963                           	callstack 0
   964                           
   965                           ; 1 bytes @ 0x27
   966   000028                     	ds	1
   967   000029                     ___ftmul@sign:
   968                           	callstack 0
   969                           
   970                           ; 1 bytes @ 0x28
   971   000029                     	ds	1
   972   00002A                     ?___fttol:
   973                           	callstack 0
   974   00002A                     ___fttol@f1:
   975                           	callstack 0
   976                           
   977                           ; 3 bytes @ 0x29
   978   00002A                     	ds	4
   979   00002E                     ??___fttol:
   980   00002E                     go_to_menu@exit_flag:
   981                           	callstack 0
   982                           
   983                           ; 2 bytes @ 0x2D
   984   00002E                     	ds	2
   985   000030                     go_to_menu@i_178:
   986                           	callstack 0
   987                           
   988                           ; 2 bytes @ 0x2F
   989   000030                     	ds	2
   990   000032                     go_to_menu@pos:
   991                           	callstack 0
   992                           
   993                           ; 2 bytes @ 0x31
   994   000032                     	ds	1
   995   000033                     ___fttol@sign1:
   996                           	callstack 0
   997                           
   998                           ; 1 bytes @ 0x32
   999   000033                     	ds	1
  1000   000034                     go_to_menu@i:
  1001                           	callstack 0
  1002   000034                     ___fttol@lval:
  1003                           	callstack 0
  1004                           
  1005                           ; 4 bytes @ 0x33
  1006   000034                     	ds	4
  1007   000038                     ___fttol@exp1:
  1008                           	callstack 0
  1009                           
  1010                           ; 1 bytes @ 0x37
  1011   000038                     	ds	1
  1012   000039                     get_speed@adc_reg_val:
  1013                           	callstack 0
  1014                           
  1015                           ; 2 bytes @ 0x38
  1016   000039                     	ds	2
  1017   00003B                     
  1018                           ; 1 bytes @ 0x3A
  1019 ;;
  1020 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1021 ;;
  1022 ;; *************** function _main *****************
  1023 ;; Defined at:
  1024 ;;		line 37 in file "main.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;		None
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;		None
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  1    wreg      void 
  1031 ;; Registers used:
  1032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1038 ;;      Params:         0       0       0       0       0       0       0
  1039 ;;      Locals:         0       0       0       0       0       0       0
  1040 ;;      Temps:          0       0       0       0       0       0       0
  1041 ;;      Totals:         0       0       0       0       0       0       0
  1042 ;;Total ram usage:        0 bytes
  1043 ;; Hardware stack levels required when called: 7
  1044 ;; This function calls:
  1045 ;;		_clcd_print
  1046 ;;		_clcd_putch
  1047 ;;		_delay
  1048 ;;		_get_password
  1049 ;;		_get_speed
  1050 ;;		_get_time
  1051 ;;		_go_to_menu
  1052 ;;		_init_config
  1053 ;;		_read_switches
  1054 ;;		_store_key_log
  1055 ;; This function is called by:
  1056 ;;		Startup code after reset
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060                           	psect	text0
  1061   00209A                     __ptext0:
  1062                           	callstack 0
  1063   00209A                     _main:
  1064                           	callstack 24
  1065                           
  1066                           ;main.c: 40: init_config();
  1067                           
  1068                           ;incstack = 0
  1069   00209A  EC4B  F00B         	call	_init_config	;wreg free
  1070                           
  1071                           ;main.c: 42: clcd_print("ON", (0xC0 + (9)));
  1072   00209E  0EF9               	movlw	low STR_10
  1073   0020A0  6E03               	movwf	clcd_print@data^0,c
  1074   0020A2  0E2F               	movlw	high STR_10
  1075   0020A4  6E04               	movwf	(clcd_print@data+1)^0,c
  1076   0020A6  0EC9               	movlw	201
  1077   0020A8  6E05               	movwf	clcd_print@addr^0,c
  1078   0020AA  ECE7  F00B         	call	_clcd_print	;wreg free
  1079                           
  1080                           ;main.c: 43: get_time();
  1081   0020AE  ECB9  F00B         	call	_get_time	;wreg free
  1082                           
  1083                           ;main.c: 44: get_speed();
  1084   0020B2  ECFE  F00C         	call	_get_speed	;wreg free
  1085                           
  1086                           ;main.c: 45: store_key_log('O');
  1087   0020B6  0E4F               	movlw	79
  1088   0020B8  ECE8  F010         	call	_store_key_log
  1089   0020BC                     l3783:
  1090                           
  1091                           ;main.c: 48: {;main.c: 49: clcd_print("TIME    EVNT  SP", (0x80 + (0)));
  1092   0020BC  0EFD               	movlw	low STR_11
  1093   0020BE  6E03               	movwf	clcd_print@data^0,c
  1094   0020C0  0E2E               	movlw	high STR_11
  1095   0020C2  6E04               	movwf	(clcd_print@data+1)^0,c
  1096   0020C4  0E80               	movlw	128
  1097   0020C6  6E05               	movwf	clcd_print@addr^0,c
  1098   0020C8  ECE7  F00B         	call	_clcd_print	;wreg free
  1099                           
  1100                           ;main.c: 51: get_time();
  1101   0020CC  ECB9  F00B         	call	_get_time	;wreg free
  1102                           
  1103                           ;main.c: 52: get_speed();
  1104   0020D0  ECFE  F00C         	call	_get_speed	;wreg free
  1105                           
  1106                           ;main.c: 54: clcd_print(time, (0xC0 + (0)));
  1107   0020D4  0E4C               	movlw	low _time
  1108   0020D6  6E03               	movwf	clcd_print@data^0,c
  1109   0020D8  6A04               	clrf	(clcd_print@data+1)^0,c
  1110   0020DA  0EC0               	movlw	192
  1111   0020DC  6E05               	movwf	clcd_print@addr^0,c
  1112   0020DE  ECE7  F00B         	call	_clcd_print	;wreg free
  1113                           
  1114                           ;main.c: 55: clcd_print(speed, (0xC0 + (14)));
  1115   0020E2  0E55               	movlw	low _speed
  1116   0020E4  6E03               	movwf	clcd_print@data^0,c
  1117   0020E6  6A04               	clrf	(clcd_print@data+1)^0,c
  1118   0020E8  0ECE               	movlw	206
  1119   0020EA  6E05               	movwf	clcd_print@addr^0,c
  1120   0020EC  ECE7  F00B         	call	_clcd_print	;wreg free
  1121                           
  1122                           ;main.c: 57: switch (read_switches(1))
  1123   0020F0  D05F               	goto	l3827
  1124   0020F2                     l3793:
  1125                           
  1126                           ;main.c: 60: {;main.c: 61: store_key_log(gear[gear_iter]);
  1127   0020F2  5045               	movf	_gear_iter^0,w,c
  1128   0020F4  0F58               	addlw	low _gear
  1129   0020F6  6ED9               	movwf	fsr2l,c
  1130   0020F8  6ADA               	clrf	fsr2h,c
  1131   0020FA  50DF               	movf	indf2,w,c
  1132   0020FC  ECE8  F010         	call	_store_key_log
  1133                           
  1134                           ;main.c: 63: clcd_putch('G', (0xC0 + (9)));
  1135   002100  0EC9               	movlw	201
  1136   002102  6E04               	movwf	clcd_putch@addr^0,c
  1137   002104  0E47               	movlw	71
  1138   002106  ECFF  F009         	call	_clcd_putch
  1139                           
  1140                           ;main.c: 64: clcd_putch(gear[gear_iter], (0xC0 + (10)));
  1141   00210A  0ECA               	movlw	202
  1142   00210C  6E04               	movwf	clcd_putch@addr^0,c
  1143   00210E  5045               	movf	_gear_iter^0,w,c
  1144   002110  0F58               	addlw	low _gear
  1145   002112  6ED9               	movwf	fsr2l,c
  1146   002114  6ADA               	clrf	fsr2h,c
  1147   002116  50DF               	movf	indf2,w,c
  1148   002118  ECFF  F009         	call	_clcd_putch
  1149                           
  1150                           ;main.c: 65: if (++gear_iter > 5)
  1151   00211C  4A45               	infsnz	_gear_iter^0,f,c
  1152   00211E  2A46               	incf	(_gear_iter+1)^0,f,c
  1153   002120  BE46               	btfsc	(_gear_iter+1)^0,7,c
  1154   002122  D7CC               	goto	l3783
  1155   002124  5046               	movf	(_gear_iter+1)^0,w,c
  1156   002126  E104               	bnz	u2500
  1157   002128  0E06               	movlw	6
  1158   00212A  5C45               	subwf	_gear_iter^0,w,c
  1159   00212C  A0D8               	btfss	status,0,c
  1160   00212E  D7C6               	goto	l3783
  1161   002130                     u2500:
  1162                           
  1163                           ;main.c: 66: gear_iter = 5;
  1164   002130  0E00               	movlw	0
  1165   002132  6E46               	movwf	(_gear_iter+1)^0,c
  1166   002134  0E05               	movlw	5
  1167   002136  D01D               	goto	L1
  1168   002138                     l3803:
  1169                           
  1170                           ;main.c: 70: {;main.c: 71: store_key_log(gear[gear_iter]);
  1171   002138  5045               	movf	_gear_iter^0,w,c
  1172   00213A  0F58               	addlw	low _gear
  1173   00213C  6ED9               	movwf	fsr2l,c
  1174   00213E  6ADA               	clrf	fsr2h,c
  1175   002140  50DF               	movf	indf2,w,c
  1176   002142  ECE8  F010         	call	_store_key_log
  1177                           
  1178                           ;main.c: 73: clcd_putch('G', (0xC0 + (9)));
  1179   002146  0EC9               	movlw	201
  1180   002148  6E04               	movwf	clcd_putch@addr^0,c
  1181   00214A  0E47               	movlw	71
  1182   00214C  ECFF  F009         	call	_clcd_putch
  1183                           
  1184                           ;main.c: 74: clcd_putch(gear[gear_iter], (0xC0 + (10)));
  1185   002150  0ECA               	movlw	202
  1186   002152  6E04               	movwf	clcd_putch@addr^0,c
  1187   002154  5045               	movf	_gear_iter^0,w,c
  1188   002156  0F58               	addlw	low _gear
  1189   002158  6ED9               	movwf	fsr2l,c
  1190   00215A  6ADA               	clrf	fsr2h,c
  1191   00215C  50DF               	movf	indf2,w,c
  1192   00215E  ECFF  F009         	call	_clcd_putch
  1193                           
  1194                           ;main.c: 75: if (--gear_iter < 0)
  1195   002162  0645               	decf	_gear_iter^0,f,c
  1196   002164  A0D8               	btfss	status,0,c
  1197   002166  0646               	decf	(_gear_iter+1)^0,f,c
  1198   002168  AE46               	btfss	(_gear_iter+1)^0,7,c
  1199   00216A  D7A8               	goto	l3783
  1200                           
  1201                           ;main.c: 76: gear_iter = 0;
  1202   00216C  0E00               	movlw	0
  1203   00216E  6E46               	movwf	(_gear_iter+1)^0,c
  1204   002170  0E00               	movlw	0
  1205   002172                     L1:
  1206   002172  6E45               	movwf	_gear_iter^0,c
  1207   002174  D7A3               	goto	l3783
  1208   002176                     l3813:
  1209                           
  1210                           ;main.c: 80: {;main.c: 81: store_key_log('C');
  1211   002176  0E43               	movlw	67
  1212   002178  ECE8  F010         	call	_store_key_log
  1213                           
  1214                           ;main.c: 82: clcd_print("C ", (0xC0 + (9)));
  1215   00217C  0EF6               	movlw	low STR_12
  1216   00217E  6E03               	movwf	clcd_print@data^0,c
  1217   002180  0E2F               	movlw	high STR_12
  1218   002182  6E04               	movwf	(clcd_print@data+1)^0,c
  1219   002184  0EC9               	movlw	201
  1220   002186  6E05               	movwf	clcd_print@addr^0,c
  1221   002188  ECE7  F00B         	call	_clcd_print	;wreg free
  1222                           
  1223                           ;main.c: 83: };main.c: 84: break;
  1224   00218C  D797               	goto	l3783
  1225   00218E                     l3817:
  1226                           
  1227                           ;main.c: 86: {;main.c: 87: delay(2);
  1228   00218E  0E00               	movlw	0
  1229   002190  6E02               	movwf	(delay@ms+1)^0,c
  1230   002192  0E02               	movlw	2
  1231   002194  6E01               	movwf	delay@ms^0,c
  1232   002196  ECCE  F00A         	call	_delay	;wreg free
  1233                           
  1234                           ;main.c: 89: store_key_log('P');
  1235   00219A  0E50               	movlw	80
  1236   00219C  ECE8  F010         	call	_store_key_log
  1237                           
  1238                           ;main.c: 90: if (get_password() == 0)
  1239   0021A0  ECDD  F011         	call	_get_password	;wreg free
  1240   0021A4  0900               	iorlw	0
  1241   0021A6  A4D8               	btfss	status,2,c
  1242   0021A8  D789               	goto	l3783
  1243                           
  1244                           ;main.c: 91: {;main.c: 92: go_to_menu();
  1245   0021AA  ECE4  F013         	call	_go_to_menu	;wreg free
  1246   0021AE  D786               	goto	l3783
  1247   0021B0                     l3827:
  1248   0021B0  0E01               	movlw	1
  1249   0021B2  ECEC  F00A         	call	_read_switches
  1250                           
  1251                           ; Switch size 1, requested type "simple"
  1252                           ; Number of cases is 4, Range of values is 1 to 11
  1253                           ; switch strategies available:
  1254                           ; Name         Instructions Cycles
  1255                           ; simple_byte           13     7 (average)
  1256                           ;	Chosen strategy is simple_byte
  1257   0021B6  0A01               	xorlw	1	; case 1
  1258   0021B8  B4D8               	btfsc	status,2,c
  1259   0021BA  D79B               	goto	l3793
  1260   0021BC  0A03               	xorlw	3	; case 2
  1261   0021BE  B4D8               	btfsc	status,2,c
  1262   0021C0  D7BB               	goto	l3803
  1263   0021C2  0A01               	xorlw	1	; case 3
  1264   0021C4  B4D8               	btfsc	status,2,c
  1265   0021C6  D7D7               	goto	l3813
  1266   0021C8  0A08               	xorlw	8	; case 11
  1267   0021CA  B4D8               	btfsc	status,2,c
  1268   0021CC  D7E0               	goto	l3817
  1269   0021CE  D776               	goto	l3783
  1270   0021D0                     __end_of_main:
  1271                           	callstack 0
  1272                           
  1273 ;; *************** function _init_config *****************
  1274 ;; Defined at:
  1275 ;;		line 16 in file "main.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;		None
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;		None
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  1    wreg      void 
  1282 ;; Registers used:
  1283 ;;		wreg, status,2, status,0, cstack
  1284 ;; Tracked objects:
  1285 ;;		On entry : 0/0
  1286 ;;		On exit  : 0/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1289 ;;      Params:         0       0       0       0       0       0       0
  1290 ;;      Locals:         0       0       0       0       0       0       0
  1291 ;;      Temps:          0       0       0       0       0       0       0
  1292 ;;      Totals:         0       0       0       0       0       0       0
  1293 ;;Total ram usage:        0 bytes
  1294 ;; Hardware stack levels used: 1
  1295 ;; Hardware stack levels required when called: 5
  1296 ;; This function calls:
  1297 ;;		_init_adc
  1298 ;;		_init_clcd
  1299 ;;		_init_ds1307
  1300 ;;		_init_i2c
  1301 ;;		_init_matrix_keypad
  1302 ;;		_init_uart
  1303 ;;		_write_external_eeprom
  1304 ;; This function is called by:
  1305 ;;		_main
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           	psect	text1
  1310   001696                     __ptext1:
  1311                           	callstack 0
  1312   001696                     _init_config:
  1313                           	callstack 25
  1314                           
  1315                           ;main.c: 18: init_clcd();
  1316                           
  1317                           ;incstack = 0
  1318   001696  EC95  F00A         	call	_init_clcd	;wreg free
  1319                           
  1320                           ;main.c: 19: init_matrix_keypad();
  1321   00169A  ECE1  F009         	call	_init_matrix_keypad	;wreg free
  1322                           
  1323                           ;main.c: 20: init_adc();
  1324   00169E  EC1A  F00A         	call	_init_adc	;wreg free
  1325                           
  1326                           ;main.c: 21: init_i2c();
  1327   0016A2  ECF4  F009         	call	_init_i2c	;wreg free
  1328                           
  1329                           ;main.c: 22: init_ds1307();
  1330   0016A6  EC6C  F00B         	call	_init_ds1307	;wreg free
  1331                           
  1332                           ;main.c: 23: init_uart();
  1333   0016AA  EC0B  F00B         	call	_init_uart	;wreg free
  1334                           
  1335                           ;main.c: 25: write_external_eeprom(100, 1);
  1336   0016AE  0E01               	movlw	1
  1337   0016B0  6E02               	movwf	write_external_eeprom@data^0,c
  1338   0016B2  0E64               	movlw	100
  1339   0016B4  EC7A  F00A         	call	_write_external_eeprom
  1340                           
  1341                           ;main.c: 26: write_external_eeprom(101, 0);
  1342   0016B8  0E00               	movlw	0
  1343   0016BA  6E02               	movwf	write_external_eeprom@data^0,c
  1344   0016BC  0E65               	movlw	101
  1345   0016BE  EC7A  F00A         	call	_write_external_eeprom
  1346                           
  1347                           ;main.c: 27: write_external_eeprom(102, 1);
  1348   0016C2  0E01               	movlw	1
  1349   0016C4  6E02               	movwf	write_external_eeprom@data^0,c
  1350   0016C6  0E66               	movlw	102
  1351   0016C8  EC7A  F00A         	call	_write_external_eeprom
  1352                           
  1353                           ;main.c: 28: write_external_eeprom(103, 0);
  1354   0016CC  0E00               	movlw	0
  1355   0016CE  6E02               	movwf	write_external_eeprom@data^0,c
  1356   0016D0  0E67               	movlw	103
  1357   0016D2  EC7A  F00A         	call	_write_external_eeprom
  1358   0016D6  0012               	return		;funcret
  1359   0016D8                     __end_of_init_config:
  1360                           	callstack 0
  1361                           
  1362 ;; *************** function _init_uart *****************
  1363 ;; Defined at:
  1364 ;;		line 4 in file "uart.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;		None
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;		None
  1369 ;; Return value:  Size  Location     Type
  1370 ;;                  1    wreg      void 
  1371 ;; Registers used:
  1372 ;;		wreg, status,2
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1378 ;;      Params:         0       0       0       0       0       0       0
  1379 ;;      Locals:         0       0       0       0       0       0       0
  1380 ;;      Temps:          0       0       0       0       0       0       0
  1381 ;;      Totals:         0       0       0       0       0       0       0
  1382 ;;Total ram usage:        0 bytes
  1383 ;; Hardware stack levels used: 1
  1384 ;; This function calls:
  1385 ;;		Nothing
  1386 ;; This function is called by:
  1387 ;;		_init_config
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           	psect	text2
  1392   001616                     __ptext2:
  1393                           	callstack 0
  1394   001616                     _init_uart:
  1395                           	callstack 29
  1396                           
  1397                           ;uart.c: 7: TRISC7 = 1;
  1398                           
  1399                           ;incstack = 0
  1400   001616  8E94               	bsf	3988,7,c	;volatile
  1401                           
  1402                           ;uart.c: 8: TRISC6 = 0;
  1403   001618  9C94               	bcf	3988,6,c	;volatile
  1404                           
  1405                           ;uart.c: 13: CSRC = 0;
  1406   00161A  9EAC               	bcf	4012,7,c	;volatile
  1407                           
  1408                           ;uart.c: 15: TX9 = 0;
  1409   00161C  9CAC               	bcf	4012,6,c	;volatile
  1410                           
  1411                           ;uart.c: 17: TXEN = 1;
  1412   00161E  8AAC               	bsf	4012,5,c	;volatile
  1413                           
  1414                           ;uart.c: 20: SYNC = 0;
  1415   001620  98AC               	bcf	4012,4,c	;volatile
  1416                           
  1417                           ;uart.c: 22: SENDB = 0;
  1418   001622  96AC               	bcf	4012,3,c	;volatile
  1419                           
  1420                           ;uart.c: 25: BRGH = 1;
  1421   001624  84AC               	bsf	4012,2,c	;volatile
  1422                           
  1423                           ;uart.c: 27: TRMT = 0;
  1424   001626  92AC               	bcf	4012,1,c	;volatile
  1425                           
  1426                           ;uart.c: 29: TX9D = 0;
  1427   001628  90AC               	bcf	4012,0,c	;volatile
  1428                           
  1429                           ;uart.c: 34: SPEN = 1;
  1430   00162A  8EAB               	bsf	4011,7,c	;volatile
  1431                           
  1432                           ;uart.c: 36: RX9 = 0;
  1433   00162C  9CAB               	bcf	4011,6,c	;volatile
  1434                           
  1435                           ;uart.c: 38: SREN = 0;
  1436   00162E  9AAB               	bcf	4011,5,c	;volatile
  1437                           
  1438                           ;uart.c: 40: CREN = 1;
  1439   001630  88AB               	bsf	4011,4,c	;volatile
  1440                           
  1441                           ;uart.c: 42: ADDEN = 0;
  1442   001632  96AB               	bcf	4011,3,c	;volatile
  1443                           
  1444                           ;uart.c: 44: FERR = 0;
  1445   001634  94AB               	bcf	4011,2,c	;volatile
  1446                           
  1447                           ;uart.c: 46: OERR = 0;
  1448   001636  92AB               	bcf	4011,1,c	;volatile
  1449                           
  1450                           ;uart.c: 48: RX9D = 0;
  1451   001638  90AB               	bcf	4011,0,c	;volatile
  1452                           
  1453                           ;uart.c: 53: ABDOVF = 0;
  1454   00163A  9EB8               	bcf	4024,7,c	;volatile
  1455                           
  1456                           ;uart.c: 55: RCIDL = 1;
  1457   00163C  8CB8               	bsf	4024,6,c	;volatile
  1458                           
  1459                           ;uart.c: 57: SCKP = 0;
  1460   00163E  98B8               	bcf	4024,4,c	;volatile
  1461                           
  1462                           ;uart.c: 59: BRG16 = 0;
  1463   001640  96B8               	bcf	4024,3,c	;volatile
  1464                           
  1465                           ;uart.c: 61: WUE = 0;
  1466   001642  92B8               	bcf	4024,1,c	;volatile
  1467                           
  1468                           ;uart.c: 63: ABDEN = 0;
  1469   001644  90B8               	bcf	4024,0,c	;volatile
  1470                           
  1471                           ;uart.c: 67: SPBRG = 129;
  1472   001646  0E81               	movlw	129
  1473   001648  6EAF               	movwf	175,c	;volatile
  1474                           
  1475                           ;uart.c: 70: TXIE = 1;
  1476   00164A  889D               	bsf	3997,4,c	;volatile
  1477                           
  1478                           ;uart.c: 72: TXIF = 0;
  1479   00164C  989E               	bcf	3998,4,c	;volatile
  1480                           
  1481                           ;uart.c: 74: RCIE = 1;
  1482   00164E  8A9D               	bsf	3997,5,c	;volatile
  1483                           
  1484                           ;uart.c: 76: RCIF = 0;
  1485   001650  9A9E               	bcf	3998,5,c	;volatile
  1486   001652  0012               	return		;funcret
  1487   001654                     __end_of_init_uart:
  1488                           	callstack 0
  1489                           
  1490 ;; *************** function _init_matrix_keypad *****************
  1491 ;; Defined at:
  1492 ;;		line 4 in file "matrix_keypad.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;		None
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;		None
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  1    wreg      void 
  1499 ;; Registers used:
  1500 ;;		wreg, status,2, status,0
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1506 ;;      Params:         0       0       0       0       0       0       0
  1507 ;;      Locals:         0       0       0       0       0       0       0
  1508 ;;      Temps:          0       0       0       0       0       0       0
  1509 ;;      Totals:         0       0       0       0       0       0       0
  1510 ;;Total ram usage:        0 bytes
  1511 ;; Hardware stack levels used: 1
  1512 ;; This function calls:
  1513 ;;		Nothing
  1514 ;; This function is called by:
  1515 ;;		_init_config
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text3
  1520   0013C2                     __ptext3:
  1521                           	callstack 0
  1522   0013C2                     _init_matrix_keypad:
  1523                           	callstack 29
  1524                           
  1525                           ;matrix_keypad.c: 7: ADCON1 = 0x0F;
  1526                           
  1527                           ;incstack = 0
  1528   0013C2  0E0F               	movlw	15
  1529   0013C4  6EC1               	movwf	193,c	;volatile
  1530                           
  1531                           ;matrix_keypad.c: 10: TRISB = 0x1E;
  1532   0013C6  0E1E               	movlw	30
  1533   0013C8  6E93               	movwf	147,c	;volatile
  1534                           
  1535                           ;matrix_keypad.c: 13: RBPU = 0;
  1536   0013CA  9EF1               	bcf	4081,7,c	;volatile
  1537                           
  1538                           ;matrix_keypad.c: 15: PORTB = PORTB | 0xE0;
  1539   0013CC  5081               	movf	129,w,c	;volatile
  1540   0013CE  09E0               	iorlw	224
  1541   0013D0  6E81               	movwf	129,c	;volatile
  1542   0013D2  0012               	return		;funcret
  1543   0013D4                     __end_of_init_matrix_keypad:
  1544                           	callstack 0
  1545                           
  1546 ;; *************** function _init_i2c *****************
  1547 ;; Defined at:
  1548 ;;		line 3 in file "i2c.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;		None
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;		None
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  1    wreg      void 
  1555 ;; Registers used:
  1556 ;;		wreg, status,2
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1562 ;;      Params:         0       0       0       0       0       0       0
  1563 ;;      Locals:         0       0       0       0       0       0       0
  1564 ;;      Temps:          0       0       0       0       0       0       0
  1565 ;;      Totals:         0       0       0       0       0       0       0
  1566 ;;Total ram usage:        0 bytes
  1567 ;; Hardware stack levels used: 1
  1568 ;; This function calls:
  1569 ;;		Nothing
  1570 ;; This function is called by:
  1571 ;;		_init_config
  1572 ;; This function uses a non-reentrant model
  1573 ;;
  1574                           
  1575                           	psect	text4
  1576   0013E8                     __ptext4:
  1577                           	callstack 0
  1578   0013E8                     _init_i2c:
  1579                           	callstack 29
  1580                           
  1581                           ;i2c.c: 6: TRISC3 = 1;
  1582                           
  1583                           ;incstack = 0
  1584   0013E8  8694               	bsf	3988,3,c	;volatile
  1585                           
  1586                           ;i2c.c: 7: TRISC4 = 1;
  1587   0013EA  8894               	bsf	3988,4,c	;volatile
  1588                           
  1589                           ;i2c.c: 9: SSPCON1 = 0x28;
  1590   0013EC  0E28               	movlw	40
  1591   0013EE  6EC6               	movwf	198,c	;volatile
  1592                           
  1593                           ;i2c.c: 11: SSPADD = 0x31;
  1594   0013F0  0E31               	movlw	49
  1595   0013F2  6EC8               	movwf	200,c	;volatile
  1596                           
  1597                           ;i2c.c: 13: CKE = 0;
  1598   0013F4  9CC7               	bcf	4039,6,c	;volatile
  1599                           
  1600                           ;i2c.c: 15: SMP = 1;
  1601   0013F6  8EC7               	bsf	4039,7,c	;volatile
  1602                           
  1603                           ;i2c.c: 17: SSPIF = 0;
  1604   0013F8  969E               	bcf	3998,3,c	;volatile
  1605                           
  1606                           ;i2c.c: 19: BCLIF = 0;
  1607   0013FA  96A1               	bcf	4001,3,c	;volatile
  1608   0013FC  0012               	return		;funcret
  1609   0013FE                     __end_of_init_i2c:
  1610                           	callstack 0
  1611                           
  1612 ;; *************** function _init_ds1307 *****************
  1613 ;; Defined at:
  1614 ;;		line 12 in file "ds1307.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;		None
  1617 ;; Auto vars:     Size  Location     Type
  1618 ;;  dummy           1   10[COMRAM] unsigned char 
  1619 ;; Return value:  Size  Location     Type
  1620 ;;                  1    wreg      void 
  1621 ;; Registers used:
  1622 ;;		wreg, status,2, status,0, cstack
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1628 ;;      Params:         0       0       0       0       0       0       0
  1629 ;;      Locals:         1       0       0       0       0       0       0
  1630 ;;      Temps:          0       0       0       0       0       0       0
  1631 ;;      Totals:         1       0       0       0       0       0       0
  1632 ;;Total ram usage:        1 bytes
  1633 ;; Hardware stack levels used: 1
  1634 ;; Hardware stack levels required when called: 4
  1635 ;; This function calls:
  1636 ;;		_read_ds1307
  1637 ;;		_write_ds1307
  1638 ;; This function is called by:
  1639 ;;		_init_config
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           	psect	text5
  1644   0016D8                     __ptext5:
  1645                           	callstack 0
  1646   0016D8                     _init_ds1307:
  1647                           	callstack 25
  1648                           
  1649                           ;ds1307.c: 14: unsigned char dummy;;ds1307.c: 17: dummy = read_ds1307(0x00);
  1650                           
  1651                           ;incstack = 0
  1652   0016D8  0E00               	movlw	0
  1653   0016DA  EC65  F00A         	call	_read_ds1307
  1654   0016DE  6E0B               	movwf	init_ds1307@dummy^0,c
  1655                           
  1656                           ;ds1307.c: 18: write_ds1307(0x00, dummy | 0x80);
  1657   0016E0  500B               	movf	init_ds1307@dummy^0,w,c
  1658   0016E2  0980               	iorlw	128
  1659   0016E4  6E09               	movwf	write_ds1307@data^0,c
  1660   0016E6  0E00               	movlw	0
  1661   0016E8  EC0B  F00A         	call	_write_ds1307
  1662                           
  1663                           ;ds1307.c: 26: dummy = read_ds1307(0x02);
  1664   0016EC  0E02               	movlw	2
  1665   0016EE  EC65  F00A         	call	_read_ds1307
  1666   0016F2  6E0B               	movwf	init_ds1307@dummy^0,c
  1667                           
  1668                           ;ds1307.c: 27: write_ds1307(0x02, dummy & 0xBF);
  1669   0016F4  500B               	movf	init_ds1307@dummy^0,w,c
  1670   0016F6  0BBF               	andlw	191
  1671   0016F8  6E09               	movwf	write_ds1307@data^0,c
  1672   0016FA  0E02               	movlw	2
  1673   0016FC  EC0B  F00A         	call	_write_ds1307
  1674                           
  1675                           ;ds1307.c: 42: write_ds1307(0x07, 0x93);
  1676   001700  0E93               	movlw	147
  1677   001702  6E09               	movwf	write_ds1307@data^0,c
  1678   001704  0E07               	movlw	7
  1679   001706  EC0B  F00A         	call	_write_ds1307
  1680                           
  1681                           ;ds1307.c: 45: dummy = read_ds1307(0x00);
  1682   00170A  0E00               	movlw	0
  1683   00170C  EC65  F00A         	call	_read_ds1307
  1684   001710  6E0B               	movwf	init_ds1307@dummy^0,c
  1685                           
  1686                           ;ds1307.c: 46: write_ds1307(0x00, dummy & 0x7F);
  1687   001712  500B               	movf	init_ds1307@dummy^0,w,c
  1688   001714  0B7F               	andlw	127
  1689   001716  6E09               	movwf	write_ds1307@data^0,c
  1690   001718  0E00               	movlw	0
  1691   00171A  EC0B  F00A         	call	_write_ds1307
  1692   00171E  0012               	return		;funcret
  1693   001720                     __end_of_init_ds1307:
  1694                           	callstack 0
  1695                           
  1696 ;; *************** function _init_clcd *****************
  1697 ;; Defined at:
  1698 ;;		line 27 in file "clcd.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;		None
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;		None
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  1    wreg      void 
  1705 ;; Registers used:
  1706 ;;		wreg, status,2, status,0, cstack
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1712 ;;      Params:         0       0       0       0       0       0       0
  1713 ;;      Locals:         0       0       0       0       0       0       0
  1714 ;;      Temps:          0       0       0       0       0       0       0
  1715 ;;      Totals:         0       0       0       0       0       0       0
  1716 ;;Total ram usage:        0 bytes
  1717 ;; Hardware stack levels used: 1
  1718 ;; Hardware stack levels required when called: 1
  1719 ;; This function calls:
  1720 ;;		_clcd_write
  1721 ;; This function is called by:
  1722 ;;		_init_config
  1723 ;; This function uses a non-reentrant model
  1724 ;;
  1725                           
  1726                           	psect	text6
  1727   00152A                     __ptext6:
  1728                           	callstack 0
  1729   00152A                     _init_clcd:
  1730                           	callstack 28
  1731                           
  1732                           ;clcd.c: 30: TRISD = 0x00;
  1733                           
  1734                           ;incstack = 0
  1735   00152A  0E00               	movlw	0
  1736   00152C  6E95               	movwf	149,c	;volatile
  1737                           
  1738                           ;clcd.c: 32: TRISC = TRISC & 0xF8;
  1739   00152E  5094               	movf	148,w,c	;volatile
  1740   001530  0BF8               	andlw	248
  1741   001532  6E94               	movwf	148,c	;volatile
  1742                           
  1743                           ;clcd.c: 34: PORTCbits.RC0 = 0;
  1744   001534  9082               	bcf	130,0,c	;volatile
  1745                           
  1746                           ;clcd.c: 36: clcd_write(0x02, 0);
  1747   001536  0E00               	movlw	0
  1748   001538  6E01               	movwf	clcd_write@control_bit^0,c
  1749   00153A  0E02               	movlw	2
  1750   00153C  EC3C  F00A         	call	_clcd_write
  1751                           
  1752                           ;clcd.c: 37: clcd_write(0x38, 0);
  1753   001540  0E00               	movlw	0
  1754   001542  6E01               	movwf	clcd_write@control_bit^0,c
  1755   001544  0E38               	movlw	56
  1756   001546  EC3C  F00A         	call	_clcd_write
  1757                           
  1758                           ;clcd.c: 38: clcd_write(0x0C, 0);
  1759   00154A  0E00               	movlw	0
  1760   00154C  6E01               	movwf	clcd_write@control_bit^0,c
  1761   00154E  0E0C               	movlw	12
  1762   001550  EC3C  F00A         	call	_clcd_write
  1763                           
  1764                           ;clcd.c: 39: clcd_write(0x01, 0);
  1765   001554  0E00               	movlw	0
  1766   001556  6E01               	movwf	clcd_write@control_bit^0,c
  1767   001558  0E01               	movlw	1
  1768   00155A  EC3C  F00A         	call	_clcd_write
  1769   00155E  0012               	return		;funcret
  1770   001560                     __end_of_init_clcd:
  1771                           	callstack 0
  1772                           
  1773 ;; *************** function _init_adc *****************
  1774 ;; Defined at:
  1775 ;;		line 4 in file "adc.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;		None
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;		None
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  1    wreg      void 
  1782 ;; Registers used:
  1783 ;;		wreg, status,2
  1784 ;; Tracked objects:
  1785 ;;		On entry : 0/0
  1786 ;;		On exit  : 0/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1789 ;;      Params:         0       0       0       0       0       0       0
  1790 ;;      Locals:         0       0       0       0       0       0       0
  1791 ;;      Temps:          0       0       0       0       0       0       0
  1792 ;;      Totals:         0       0       0       0       0       0       0
  1793 ;;Total ram usage:        0 bytes
  1794 ;; Hardware stack levels used: 1
  1795 ;; This function calls:
  1796 ;;		Nothing
  1797 ;; This function is called by:
  1798 ;;		_init_config
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           	psect	text7
  1803   001434                     __ptext7:
  1804                           	callstack 0
  1805   001434                     _init_adc:
  1806                           	callstack 29
  1807                           
  1808                           ;adc.c: 7: ADFM = 1;
  1809                           
  1810                           ;incstack = 0
  1811   001434  8EC0               	bsf	4032,7,c	;volatile
  1812                           
  1813                           ;adc.c: 13: ACQT2 = 1;
  1814   001436  8AC0               	bsf	4032,5,c	;volatile
  1815                           
  1816                           ;adc.c: 14: ACQT1 = 0;
  1817   001438  98C0               	bcf	4032,4,c	;volatile
  1818                           
  1819                           ;adc.c: 15: ACQT0 = 0;
  1820   00143A  96C0               	bcf	4032,3,c	;volatile
  1821                           
  1822                           ;adc.c: 21: ADCS0 = 0;
  1823   00143C  90C0               	bcf	4032,0,c	;volatile
  1824                           
  1825                           ;adc.c: 22: ADCS1 = 1;
  1826   00143E  82C0               	bsf	4032,1,c	;volatile
  1827                           
  1828                           ;adc.c: 23: ADCS2 = 0;
  1829   001440  94C0               	bcf	4032,2,c	;volatile
  1830                           
  1831                           ;adc.c: 26: GODONE = 0;
  1832   001442  92C2               	bcf	4034,1,c	;volatile
  1833                           
  1834                           ;adc.c: 32: VCFG1 = 0;
  1835   001444  9AC1               	bcf	4033,5,c	;volatile
  1836                           
  1837                           ;adc.c: 34: VCFG0 = 0;
  1838   001446  98C1               	bcf	4033,4,c	;volatile
  1839                           
  1840                           ;adc.c: 37: ADRESH = 0;
  1841   001448  0E00               	movlw	0
  1842   00144A  6EC4               	movwf	196,c	;volatile
  1843                           
  1844                           ;adc.c: 38: ADRESL = 0;
  1845   00144C  0E00               	movlw	0
  1846   00144E  6EC3               	movwf	195,c	;volatile
  1847                           
  1848                           ;adc.c: 41: ADON = 1;
  1849   001450  80C2               	bsf	4034,0,c	;volatile
  1850   001452  0012               	return		;funcret
  1851   001454                     __end_of_init_adc:
  1852                           	callstack 0
  1853                           
  1854 ;; *************** function _go_to_menu *****************
  1855 ;; Defined at:
  1856 ;;		line 11 in file "menu.c"
  1857 ;; Parameters:    Size  Location     Type
  1858 ;;		None
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;  i               2   47[COMRAM] int 
  1861 ;;  menu           10   35[COMRAM] PTR const unsigned char 
  1862 ;;		 -> STR_5(9), STR_4(11), STR_3(11), STR_2(14), 
  1863 ;;		 -> STR_1(10), 
  1864 ;;  i               2   51[COMRAM] int 
  1865 ;;  pos             2   49[COMRAM] int 
  1866 ;;  exit_flag       2   45[COMRAM] int 
  1867 ;;  seconds         2    0        int 
  1868 ;;  once            2    0        int 
  1869 ;;  ret_value       2    0        int 
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1879 ;;      Params:         0       0       0       0       0       0       0
  1880 ;;      Locals:        18       0       0       0       0       0       0
  1881 ;;      Temps:          2       0       0       0       0       0       0
  1882 ;;      Totals:        20       0       0       0       0       0       0
  1883 ;;Total ram usage:       20 bytes
  1884 ;; Hardware stack levels used: 1
  1885 ;; Hardware stack levels required when called: 6
  1886 ;; This function calls:
  1887 ;;		_change_password
  1888 ;;		_clcd_print
  1889 ;;		_clcd_putch
  1890 ;;		_clcd_write
  1891 ;;		_delay
  1892 ;;		_print_to_console
  1893 ;;		_putch
  1894 ;;		_read_switches
  1895 ;;		_set_time
  1896 ;;		_store_key_log
  1897 ;;		_view_log
  1898 ;; This function is called by:
  1899 ;;		_main
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text8
  1904   0027C8                     __ptext8:
  1905                           	callstack 0
  1906   0027C8                     _go_to_menu:
  1907                           	callstack 24
  1908                           
  1909                           ;menu.c: 13: const char *menu[] = {"VIEW LOGS", "DOWNLOAD LOGS", "CLEAR LOGS", "CHANGE P
      +                          WD", "SET TIME"};
  1910                           
  1911                           ;incstack = 0
  1912   0027C8  EE20  F078         	lfsr	2,go_to_menu@F10378
  1913   0027CC  EE10  F024         	lfsr	1,go_to_menu@menu
  1914   0027D0  0E09               	movlw	9
  1915   0027D2                     u2271:
  1916   0027D2  CFDB FFE3          	movff	plusw2,plusw1
  1917   0027D6  06E8               	decf	wreg,f,c
  1918   0027D8  E2FC               	bc	u2271
  1919                           
  1920                           ;menu.c: 14: int i = 0, pos = 0, once = 0, ret_value, seconds = 0, exit_flag = 0;
  1921   0027DA  0E00               	movlw	0
  1922   0027DC  6E35               	movwf	(go_to_menu@i+1)^0,c
  1923   0027DE  0E00               	movlw	0
  1924   0027E0  6E34               	movwf	go_to_menu@i^0,c
  1925   0027E2  0E00               	movlw	0
  1926   0027E4  6E33               	movwf	(go_to_menu@pos+1)^0,c
  1927   0027E6  0E00               	movlw	0
  1928   0027E8  6E32               	movwf	go_to_menu@pos^0,c
  1929   0027EA  0E00               	movlw	0
  1930   0027EC  6E2F               	movwf	(go_to_menu@exit_flag+1)^0,c
  1931   0027EE  0E00               	movlw	0
  1932   0027F0  6E2E               	movwf	go_to_menu@exit_flag^0,c
  1933                           
  1934                           ;menu.c: 16: while (!exit_flag)
  1935   0027F2  D171               	goto	l187
  1936   0027F4                     l3511:
  1937                           
  1938                           ;menu.c: 17: {;menu.c: 18: if (pos == 0)
  1939   0027F4  5032               	movf	go_to_menu@pos^0,w,c
  1940   0027F6  1033               	iorwf	(go_to_menu@pos+1)^0,w,c
  1941   0027F8  A4D8               	btfss	status,2,c
  1942   0027FA  D006               	goto	l3515
  1943                           
  1944                           ;menu.c: 19: clcd_putch('*', (0x80 + (0)));
  1945   0027FC  0E80               	movlw	128
  1946   0027FE  6E04               	movwf	clcd_putch@addr^0,c
  1947   002800  0E2A               	movlw	42
  1948   002802  ECFF  F009         	call	_clcd_putch
  1949   002806  D005               	goto	l3517
  1950   002808                     l3515:
  1951                           
  1952                           ;menu.c: 20: else;menu.c: 21: clcd_putch('*', (0xC0 + (0)));
  1953   002808  0EC0               	movlw	192
  1954   00280A  6E04               	movwf	clcd_putch@addr^0,c
  1955   00280C  0E2A               	movlw	42
  1956   00280E  ECFF  F009         	call	_clcd_putch
  1957   002812                     l3517:
  1958                           
  1959                           ;menu.c: 23: clcd_print(menu[i], (0x80 + (2)));
  1960   002812  5034               	movf	go_to_menu@i^0,w,c
  1961   002814  0D02               	mullw	2
  1962   002816  50F3               	movf	243,w,c
  1963   002818  0F24               	addlw	low go_to_menu@menu
  1964   00281A  6ED9               	movwf	fsr2l,c
  1965   00281C  6ADA               	clrf	fsr2h,c
  1966   00281E  CFDE F003          	movff	postinc2,clcd_print@data
  1967   002822  CFDD F004          	movff	postdec2,clcd_print@data+1
  1968   002826  0E82               	movlw	130
  1969   002828  6E05               	movwf	clcd_print@addr^0,c
  1970   00282A  ECE7  F00B         	call	_clcd_print	;wreg free
  1971                           
  1972                           ;menu.c: 24: clcd_print(menu[i + 1], (0xC0 + (2)));
  1973   00282E  5034               	movf	go_to_menu@i^0,w,c
  1974   002830  0D02               	mullw	2
  1975   002832  CFF3 F022          	movff	prodl,??_go_to_menu
  1976   002836  0E02               	movlw	2
  1977   002838  2622               	addwf	??_go_to_menu^0,f,c
  1978   00283A  5022               	movf	??_go_to_menu^0,w,c
  1979   00283C  0F24               	addlw	low go_to_menu@menu
  1980   00283E  6ED9               	movwf	fsr2l,c
  1981   002840  6ADA               	clrf	fsr2h,c
  1982   002842  CFDE F003          	movff	postinc2,clcd_print@data
  1983   002846  CFDD F004          	movff	postdec2,clcd_print@data+1
  1984   00284A  0EC2               	movlw	194
  1985   00284C  6E05               	movwf	clcd_print@addr^0,c
  1986   00284E  ECE7  F00B         	call	_clcd_print	;wreg free
  1987                           
  1988                           ;menu.c: 26: switch (read_switches(1))
  1989   002852  D138               	goto	l3629
  1990   002854                     l3521:
  1991                           
  1992                           ;menu.c: 29: {;menu.c: 30: delay(5);
  1993   002854  0E00               	movlw	0
  1994   002856  6E02               	movwf	(delay@ms+1)^0,c
  1995   002858  0E05               	movlw	5
  1996   00285A  6E01               	movwf	delay@ms^0,c
  1997   00285C  ECCE  F00A         	call	_delay	;wreg free
  1998                           
  1999                           ;menu.c: 31: if (read_switches(0) == 11)
  2000   002860  0E00               	movlw	0
  2001   002862  ECEC  F00A         	call	_read_switches
  2002   002866  0A0B               	xorlw	11
  2003   002868  B4D8               	btfsc	status,2,c
  2004   00286A  D0A4               	goto	l3589
  2005   00286C  D0BE               	goto	l3591
  2006   00286E                     l3525:
  2007                           
  2008                           ;menu.c: 36: {;menu.c: 37: store_key_log('V');
  2009   00286E  0E56               	movlw	86
  2010   002870  ECE8  F010         	call	_store_key_log
  2011                           
  2012                           ;menu.c: 38: clcd_write(0x01, 0);
  2013   002874  0E00               	movlw	0
  2014   002876  6E01               	movwf	clcd_write@control_bit^0,c
  2015   002878  0E01               	movlw	1
  2016   00287A  EC3C  F00A         	call	_clcd_write
  2017                           
  2018                           ;menu.c: 39: if (log_total_saved > 0)
  2019   00287E  BE4A               	btfsc	(_log_total_saved+1)^0,7,c
  2020   002880  D008               	goto	l3533
  2021   002882  504A               	movf	(_log_total_saved+1)^0,w,c
  2022   002884  E103               	bnz	u2300
  2023   002886  0449               	decf	_log_total_saved^0,w,c
  2024   002888  A0D8               	btfss	status,0,c
  2025   00288A  D003               	goto	l3533
  2026   00288C                     u2300:
  2027                           
  2028                           ;menu.c: 40: {;menu.c: 41: view_log();
  2029   00288C  EC6A  F00E         	call	_view_log	;wreg free
  2030                           
  2031                           ;menu.c: 42: }
  2032   002890  D008               	goto	l3535
  2033   002892                     l3533:
  2034                           
  2035                           ;menu.c: 43: else;menu.c: 44: clcd_print("NO LOGS TO PRINT", (0x80 + (0)));
  2036   002892  0E0E               	movlw	low STR_6
  2037   002894  6E03               	movwf	clcd_print@data^0,c
  2038   002896  0E2F               	movlw	high STR_6
  2039   002898  6E04               	movwf	(clcd_print@data+1)^0,c
  2040   00289A  0E80               	movlw	128
  2041   00289C  6E05               	movwf	clcd_print@addr^0,c
  2042   00289E  ECE7  F00B         	call	_clcd_print	;wreg free
  2043   0028A2                     l3535:
  2044                           
  2045                           ;menu.c: 46: delay(10);
  2046   0028A2  0E00               	movlw	0
  2047   0028A4  6E02               	movwf	(delay@ms+1)^0,c
  2048   0028A6  0E0A               	movlw	10
  2049   0028A8  6E01               	movwf	delay@ms^0,c
  2050   0028AA  ECCE  F00A         	call	_delay	;wreg free
  2051                           
  2052                           ;menu.c: 48: clcd_write(0x01, 0);
  2053   0028AE  0E00               	movlw	0
  2054   0028B0  6E01               	movwf	clcd_write@control_bit^0,c
  2055   0028B2  0E01               	movlw	1
  2056   0028B4  EC3C  F00A         	call	_clcd_write
  2057                           
  2058                           ;menu.c: 49: };menu.c: 50: break;
  2059   0028B8  D10E               	goto	l187
  2060   0028BA                     l3539:
  2061                           
  2062                           ;menu.c: 52: {;menu.c: 53: store_key_log('D');
  2063   0028BA  0E44               	movlw	68
  2064   0028BC  ECE8  F010         	call	_store_key_log
  2065                           
  2066                           ;menu.c: 54: clcd_write(0x01, 0);
  2067   0028C0  0E00               	movlw	0
  2068   0028C2  6E01               	movwf	clcd_write@control_bit^0,c
  2069   0028C4  0E01               	movlw	1
  2070   0028C6  EC3C  F00A         	call	_clcd_write
  2071                           
  2072                           ;menu.c: 55: clcd_print("DOWNLOADING", (0x80 + (2)));
  2073   0028CA  0EA0               	movlw	low STR_7
  2074   0028CC  6E03               	movwf	clcd_print@data^0,c
  2075   0028CE  0E2F               	movlw	high STR_7
  2076   0028D0  6E04               	movwf	(clcd_print@data+1)^0,c
  2077   0028D2  0E82               	movlw	130
  2078   0028D4  6E05               	movwf	clcd_print@addr^0,c
  2079   0028D6  ECE7  F00B         	call	_clcd_print	;wreg free
  2080                           
  2081                           ;menu.c: 56: clcd_print("LOGS.....", (0xC0 + (3)));
  2082   0028DA  0EC2               	movlw	low STR_8
  2083   0028DC  6E03               	movwf	clcd_print@data^0,c
  2084   0028DE  0E2F               	movlw	high STR_8
  2085   0028E0  6E04               	movwf	(clcd_print@data+1)^0,c
  2086   0028E2  0EC3               	movlw	195
  2087   0028E4  6E05               	movwf	clcd_print@addr^0,c
  2088   0028E6  ECE7  F00B         	call	_clcd_print	;wreg free
  2089                           
  2090                           ;menu.c: 57: delay(5);
  2091   0028EA  0E00               	movlw	0
  2092   0028EC  6E02               	movwf	(delay@ms+1)^0,c
  2093   0028EE  0E05               	movlw	5
  2094   0028F0  6E01               	movwf	delay@ms^0,c
  2095   0028F2  ECCE  F00A         	call	_delay	;wreg free
  2096                           
  2097                           ;menu.c: 59: for (int i = 0; i < log_total_saved && i < 10; i++)
  2098   0028F6  0E00               	movlw	0
  2099   0028F8  6E31               	movwf	(go_to_menu@i_178+1)^0,c
  2100   0028FA  0E00               	movlw	0
  2101   0028FC  6E30               	movwf	go_to_menu@i_178^0,c
  2102   0028FE  D00B               	goto	l3557
  2103   002900                     l3551:
  2104                           
  2105                           ;menu.c: 60: {;menu.c: 61: putch('\r');
  2106   002900  0E0D               	movlw	13
  2107   002902  ECDB  F009         	call	_putch
  2108                           
  2109                           ;menu.c: 62: print_to_console(i);
  2110   002906  C030  F004         	movff	go_to_menu@i_178,print_to_console@iter
  2111   00290A  C031  F005         	movff	go_to_menu@i_178+1,print_to_console@iter+1
  2112   00290E  ECA3  F00D         	call	_print_to_console	;wreg free
  2113   002912  4A30               	infsnz	go_to_menu@i_178^0,f,c
  2114   002914  2A31               	incf	(go_to_menu@i_178+1)^0,f,c
  2115   002916                     l3557:
  2116   002916  5049               	movf	_log_total_saved^0,w,c
  2117   002918  5C30               	subwf	go_to_menu@i_178^0,w,c
  2118   00291A  5031               	movf	(go_to_menu@i_178+1)^0,w,c
  2119   00291C  0A80               	xorlw	128
  2120   00291E  6E22               	movwf	??_go_to_menu^0,c
  2121   002920  504A               	movf	(_log_total_saved+1)^0,w,c
  2122   002922  0A80               	xorlw	128
  2123   002924  5822               	subwfb	??_go_to_menu^0,w,c
  2124   002926  B0D8               	btfsc	status,0,c
  2125   002928  D008               	goto	u2320
  2126   00292A  BE31               	btfsc	(go_to_menu@i_178+1)^0,7,c
  2127   00292C  D7E9               	goto	l3551
  2128   00292E  5031               	movf	(go_to_menu@i_178+1)^0,w,c
  2129   002930  E104               	bnz	u2320
  2130   002932  0E0A               	movlw	10
  2131   002934  5C30               	subwf	go_to_menu@i_178^0,w,c
  2132   002936  A0D8               	btfss	status,0,c
  2133   002938  D7E3               	goto	l3551
  2134   00293A                     u2320:
  2135                           
  2136                           ;menu.c: 63: };menu.c: 65: clcd_write(0x01, 0);
  2137   00293A  0E00               	movlw	0
  2138   00293C  6E01               	movwf	clcd_write@control_bit^0,c
  2139   00293E  0E01               	movlw	1
  2140   002940  EC3C  F00A         	call	_clcd_write
  2141                           
  2142                           ;menu.c: 66: };menu.c: 67: break;
  2143   002944  D0C8               	goto	l187
  2144   002946                     l3563:
  2145                           
  2146                           ;menu.c: 70: {;menu.c: 71: store_key_log('X');
  2147   002946  0E58               	movlw	88
  2148   002948  ECE8  F010         	call	_store_key_log
  2149                           
  2150                           ;menu.c: 72: log_iter = 0;
  2151   00294C  0E00               	movlw	0
  2152   00294E  6E48               	movwf	(_log_iter+1)^0,c
  2153   002950  0E00               	movlw	0
  2154   002952  6E47               	movwf	_log_iter^0,c
  2155                           
  2156                           ;menu.c: 73: log_total_saved = 0;
  2157   002954  0E00               	movlw	0
  2158   002956  6E4A               	movwf	(_log_total_saved+1)^0,c
  2159   002958  0E00               	movlw	0
  2160   00295A  6E49               	movwf	_log_total_saved^0,c
  2161                           
  2162                           ;menu.c: 74: clcd_write(0x01, 0);
  2163   00295C  0E00               	movlw	0
  2164   00295E  6E01               	movwf	clcd_write@control_bit^0,c
  2165   002960  0E01               	movlw	1
  2166   002962  EC3C  F00A         	call	_clcd_write
  2167                           
  2168                           ;menu.c: 75: clcd_print("LOGS CLEARED!", (0x80 + (0)));
  2169   002966  0E84               	movlw	low STR_9
  2170   002968  6E03               	movwf	clcd_print@data^0,c
  2171   00296A  0E2F               	movlw	high STR_9
  2172   00296C  6E04               	movwf	(clcd_print@data+1)^0,c
  2173   00296E  0E80               	movlw	128
  2174   002970  6E05               	movwf	clcd_print@addr^0,c
  2175   002972  ECE7  F00B         	call	_clcd_print	;wreg free
  2176                           
  2177                           ;menu.c: 76: delay(10);
  2178   002976  0E00               	movlw	0
  2179   002978  6E02               	movwf	(delay@ms+1)^0,c
  2180   00297A  0E0A               	movlw	10
  2181   00297C  6E01               	movwf	delay@ms^0,c
  2182   00297E  ECCE  F00A         	call	_delay	;wreg free
  2183                           
  2184                           ;menu.c: 77: clcd_write(0x01, 0);
  2185   002982  0E00               	movlw	0
  2186   002984  6E01               	movwf	clcd_write@control_bit^0,c
  2187   002986  0E01               	movlw	1
  2188   002988  EC3C  F00A         	call	_clcd_write
  2189                           
  2190                           ;menu.c: 78: };menu.c: 79: break;
  2191   00298C  D0A4               	goto	l187
  2192   00298E                     l3577:
  2193                           
  2194                           ;menu.c: 81: {;menu.c: 82: store_key_log('W');
  2195   00298E  0E57               	movlw	87
  2196   002990  ECE8  F010         	call	_store_key_log
  2197                           
  2198                           ;menu.c: 83: change_password();
  2199   002994  ECD5  F012         	call	_change_password	;wreg free
  2200                           
  2201                           ;menu.c: 84: };menu.c: 85: break;
  2202   002998  D09E               	goto	l187
  2203   00299A                     l3581:
  2204                           
  2205                           ;menu.c: 87: {;menu.c: 88: clcd_write(0x01, 0);
  2206   00299A  0E00               	movlw	0
  2207   00299C  6E01               	movwf	clcd_write@control_bit^0,c
  2208   00299E  0E01               	movlw	1
  2209   0029A0  EC3C  F00A         	call	_clcd_write
  2210                           
  2211                           ;menu.c: 89: set_time();
  2212   0029A4  EC70  F015         	call	_set_time	;wreg free
  2213                           
  2214                           ;menu.c: 90: clcd_write(0x01, 0);
  2215   0029A8  0E00               	movlw	0
  2216   0029AA  6E01               	movwf	clcd_write@control_bit^0,c
  2217   0029AC  0E01               	movlw	1
  2218   0029AE  EC3C  F00A         	call	_clcd_write
  2219                           
  2220                           ;menu.c: 91: };menu.c: 92: break;
  2221   0029B2  D091               	goto	l187
  2222   0029B4                     l3589:
  2223   0029B4  5034               	movf	go_to_menu@i^0,w,c
  2224   0029B6  2432               	addwf	go_to_menu@pos^0,w,c
  2225   0029B8  6E22               	movwf	??_go_to_menu^0,c
  2226   0029BA  5035               	movf	(go_to_menu@i+1)^0,w,c
  2227   0029BC  2033               	addwfc	(go_to_menu@pos+1)^0,w,c
  2228   0029BE  6E23               	movwf	(??_go_to_menu+1)^0,c
  2229                           
  2230                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2231                           ; Switch size 1, requested type "simple"
  2232                           ; Number of cases is 1, Range of values is 0 to 0
  2233                           ; switch strategies available:
  2234                           ; Name         Instructions Cycles
  2235                           ; simple_byte            4     3 (average)
  2236                           ;	Chosen strategy is simple_byte
  2237   0029C0  5023               	movf	(??_go_to_menu+1)^0,w,c
  2238   0029C2  0A00               	xorlw	0	; case 0
  2239   0029C4  A4D8               	btfss	status,2,c
  2240   0029C6  D087               	goto	l187
  2241                           
  2242                           ; Switch size 1, requested type "simple"
  2243                           ; Number of cases is 5, Range of values is 0 to 4
  2244                           ; switch strategies available:
  2245                           ; Name         Instructions Cycles
  2246                           ; simple_byte           16     9 (average)
  2247                           ;	Chosen strategy is simple_byte
  2248   0029C8  5022               	movf	??_go_to_menu^0,w,c
  2249   0029CA  0A00               	xorlw	0	; case 0
  2250   0029CC  B4D8               	btfsc	status,2,c
  2251   0029CE  D74F               	goto	l3525
  2252   0029D0  0A01               	xorlw	1	; case 1
  2253   0029D2  B4D8               	btfsc	status,2,c
  2254   0029D4  D772               	goto	l3539
  2255   0029D6  0A03               	xorlw	3	; case 2
  2256   0029D8  B4D8               	btfsc	status,2,c
  2257   0029DA  D7B5               	goto	l3563
  2258   0029DC  0A01               	xorlw	1	; case 3
  2259   0029DE  B4D8               	btfsc	status,2,c
  2260   0029E0  D7D6               	goto	l3577
  2261   0029E2  0A07               	xorlw	7	; case 4
  2262   0029E4  B4D8               	btfsc	status,2,c
  2263   0029E6  D7D9               	goto	l3581
  2264   0029E8  D076               	goto	l187
  2265   0029EA                     l3591:
  2266                           
  2267                           ;menu.c: 95: else;menu.c: 96: {;menu.c: 97: if (i > 0)
  2268   0029EA  BE35               	btfsc	(go_to_menu@i+1)^0,7,c
  2269   0029EC  D074               	goto	l187
  2270   0029EE  5035               	movf	(go_to_menu@i+1)^0,w,c
  2271   0029F0  E103               	bnz	u2330
  2272   0029F2  0434               	decf	go_to_menu@i^0,w,c
  2273   0029F4  A0D8               	btfss	status,0,c
  2274   0029F6  D06F               	goto	l187
  2275   0029F8                     u2330:
  2276                           
  2277                           ;menu.c: 98: {;menu.c: 99: clcd_write(0x01, 0);
  2278   0029F8  0E00               	movlw	0
  2279   0029FA  6E01               	movwf	clcd_write@control_bit^0,c
  2280   0029FC  0E01               	movlw	1
  2281   0029FE  EC3C  F00A         	call	_clcd_write
  2282                           
  2283                           ;menu.c: 100: if (--pos < 0)
  2284   002A02  0632               	decf	go_to_menu@pos^0,f,c
  2285   002A04  A0D8               	btfss	status,0,c
  2286   002A06  0633               	decf	(go_to_menu@pos+1)^0,f,c
  2287   002A08  AE33               	btfss	(go_to_menu@pos+1)^0,7,c
  2288   002A0A  D065               	goto	l187
  2289                           
  2290                           ;menu.c: 101: {;menu.c: 102: i--;
  2291   002A0C  0634               	decf	go_to_menu@i^0,f,c
  2292   002A0E  A0D8               	btfss	status,0,c
  2293   002A10  0635               	decf	(go_to_menu@i+1)^0,f,c
  2294                           
  2295                           ;menu.c: 103: pos = 0;
  2296   002A12  0E00               	movlw	0
  2297   002A14  6E33               	movwf	(go_to_menu@pos+1)^0,c
  2298   002A16  0E00               	movlw	0
  2299   002A18  D053               	goto	L2
  2300   002A1A                     l3601:
  2301                           
  2302                           ;menu.c: 110: {;menu.c: 111: delay(5);
  2303   002A1A  0E00               	movlw	0
  2304   002A1C  6E02               	movwf	(delay@ms+1)^0,c
  2305   002A1E  0E05               	movlw	5
  2306   002A20  6E01               	movwf	delay@ms^0,c
  2307   002A22  ECCE  F00A         	call	_delay	;wreg free
  2308                           
  2309                           ;menu.c: 113: if (read_switches(0) == 12)
  2310   002A26  0E00               	movlw	0
  2311   002A28  ECEC  F00A         	call	_read_switches
  2312   002A2C  0A0C               	xorlw	12
  2313   002A2E  A4D8               	btfss	status,2,c
  2314   002A30  D02B               	goto	l3617
  2315                           
  2316                           ;menu.c: 114: {;menu.c: 115: exit_flag = 1;
  2317   002A32  0E00               	movlw	0
  2318   002A34  6E2F               	movwf	(go_to_menu@exit_flag+1)^0,c
  2319   002A36  0E01               	movlw	1
  2320   002A38  6E2E               	movwf	go_to_menu@exit_flag^0,c
  2321                           
  2322                           ;menu.c: 116: clcd_write(0x01, 0);
  2323   002A3A  0E00               	movlw	0
  2324   002A3C  6E01               	movwf	clcd_write@control_bit^0,c
  2325   002A3E  0E01               	movlw	1
  2326   002A40  EC3C  F00A         	call	_clcd_write
  2327                           
  2328                           ;menu.c: 117: clcd_putch('G', (0xC0 + (9)));
  2329   002A44  0EC9               	movlw	201
  2330   002A46  6E04               	movwf	clcd_putch@addr^0,c
  2331   002A48  0E47               	movlw	71
  2332   002A4A  ECFF  F009         	call	_clcd_putch
  2333                           
  2334                           ;menu.c: 118: if(gear_iter==5 || gear_iter==0)
  2335   002A4E  0E05               	movlw	5
  2336   002A50  1845               	xorwf	_gear_iter^0,w,c
  2337   002A52  1046               	iorwf	(_gear_iter+1)^0,w,c
  2338   002A54  B4D8               	btfsc	status,2,c
  2339   002A56  D004               	goto	u2370
  2340   002A58  5045               	movf	_gear_iter^0,w,c
  2341   002A5A  1046               	iorwf	(_gear_iter+1)^0,w,c
  2342   002A5C  A4D8               	btfss	status,2,c
  2343   002A5E  D00A               	goto	l3615
  2344   002A60                     u2370:
  2345                           
  2346                           ;menu.c: 119: clcd_putch(gear[gear_iter], (0xC0 + (10)));
  2347   002A60  0ECA               	movlw	202
  2348   002A62  6E04               	movwf	clcd_putch@addr^0,c
  2349   002A64  5045               	movf	_gear_iter^0,w,c
  2350   002A66  0F58               	addlw	low _gear
  2351   002A68  6ED9               	movwf	fsr2l,c
  2352   002A6A  6ADA               	clrf	fsr2h,c
  2353   002A6C  50DF               	movf	indf2,w,c
  2354   002A6E  ECFF  F009         	call	_clcd_putch
  2355   002A72  D031               	goto	l187
  2356   002A74                     l3615:
  2357                           
  2358                           ;menu.c: 120: else;menu.c: 121: clcd_putch(gear[gear_iter-1], (0xC0 + (10)));
  2359   002A74  0ECA               	movlw	202
  2360   002A76  6E04               	movwf	clcd_putch@addr^0,c
  2361   002A78  5045               	movf	_gear_iter^0,w,c
  2362   002A7A  0F57               	addlw	low (_gear+255)
  2363   002A7C  6ED9               	movwf	fsr2l,c
  2364   002A7E  6ADA               	clrf	fsr2h,c
  2365   002A80  50DF               	movf	indf2,w,c
  2366   002A82  ECFF  F009         	call	_clcd_putch
  2367   002A86  D027               	goto	l187
  2368   002A88                     l3617:
  2369                           
  2370                           ;menu.c: 124: else;menu.c: 125: {;menu.c: 126: if (i < 3)
  2371   002A88  BE35               	btfsc	(go_to_menu@i+1)^0,7,c
  2372   002A8A  D006               	goto	u2380
  2373   002A8C  5035               	movf	(go_to_menu@i+1)^0,w,c
  2374   002A8E  E123               	bnz	l187
  2375   002A90  0E03               	movlw	3
  2376   002A92  5C34               	subwf	go_to_menu@i^0,w,c
  2377   002A94  B0D8               	btfsc	status,0,c
  2378   002A96  D01F               	goto	l187
  2379   002A98                     u2380:
  2380                           
  2381                           ;menu.c: 127: {;menu.c: 128: clcd_write(0x01, 0);
  2382   002A98  0E00               	movlw	0
  2383   002A9A  6E01               	movwf	clcd_write@control_bit^0,c
  2384   002A9C  0E01               	movlw	1
  2385   002A9E  EC3C  F00A         	call	_clcd_write
  2386                           
  2387                           ;menu.c: 129: if (++pos >= 2)
  2388   002AA2  4A32               	infsnz	go_to_menu@pos^0,f,c
  2389   002AA4  2A33               	incf	(go_to_menu@pos+1)^0,f,c
  2390   002AA6  BE33               	btfsc	(go_to_menu@pos+1)^0,7,c
  2391   002AA8  D016               	goto	l187
  2392   002AAA  5033               	movf	(go_to_menu@pos+1)^0,w,c
  2393   002AAC  E104               	bnz	u2390
  2394   002AAE  0E02               	movlw	2
  2395   002AB0  5C32               	subwf	go_to_menu@pos^0,w,c
  2396   002AB2  A0D8               	btfss	status,0,c
  2397   002AB4  D010               	goto	l187
  2398   002AB6                     u2390:
  2399                           
  2400                           ;menu.c: 130: {;menu.c: 131: i++;
  2401   002AB6  4A34               	infsnz	go_to_menu@i^0,f,c
  2402   002AB8  2A35               	incf	(go_to_menu@i+1)^0,f,c
  2403                           
  2404                           ;menu.c: 132: pos = 1;
  2405   002ABA  0E00               	movlw	0
  2406   002ABC  6E33               	movwf	(go_to_menu@pos+1)^0,c
  2407   002ABE  0E01               	movlw	1
  2408   002AC0                     L2:
  2409   002AC0  6E32               	movwf	go_to_menu@pos^0,c
  2410   002AC2  D009               	goto	l187
  2411   002AC4                     l3629:
  2412   002AC4  0E01               	movlw	1
  2413   002AC6  ECEC  F00A         	call	_read_switches
  2414                           
  2415                           ; Switch size 1, requested type "simple"
  2416                           ; Number of cases is 2, Range of values is 11 to 12
  2417                           ; switch strategies available:
  2418                           ; Name         Instructions Cycles
  2419                           ; simple_byte            7     4 (average)
  2420                           ;	Chosen strategy is simple_byte
  2421   002ACA  0A0B               	xorlw	11	; case 11
  2422   002ACC  B4D8               	btfsc	status,2,c
  2423   002ACE  D6C2               	goto	l3521
  2424   002AD0  0A07               	xorlw	7	; case 12
  2425   002AD2  B4D8               	btfsc	status,2,c
  2426   002AD4  D7A2               	goto	l3601
  2427   002AD6                     l187:
  2428   002AD6  502E               	movf	go_to_menu@exit_flag^0,w,c
  2429   002AD8  102F               	iorwf	(go_to_menu@exit_flag+1)^0,w,c
  2430   002ADA  A4D8               	btfss	status,2,c
  2431   002ADC  0012               	return	
  2432   002ADE  D68A               	goto	l3511
  2433   002AE0                     __end_of_go_to_menu:
  2434                           	callstack 0
  2435                           
  2436 ;; *************** function _view_log *****************
  2437 ;; Defined at:
  2438 ;;		line 275 in file "functions.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;		None
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;  string         16    8[COMRAM] unsigned char [16]
  2443 ;;  i               2   26[COMRAM] int 
  2444 ;;  exit_flag       2   24[COMRAM] int 
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  1    wreg      void 
  2447 ;; Registers used:
  2448 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2454 ;;      Params:         0       0       0       0       0       0       0
  2455 ;;      Locals:        20       0       0       0       0       0       0
  2456 ;;      Temps:          1       0       0       0       0       0       0
  2457 ;;      Totals:        21       0       0       0       0       0       0
  2458 ;;Total ram usage:       21 bytes
  2459 ;; Hardware stack levels used: 1
  2460 ;; Hardware stack levels required when called: 5
  2461 ;; This function calls:
  2462 ;;		_clcd_print
  2463 ;;		_clcd_putch
  2464 ;;		_delay
  2465 ;;		_print_log_to_clcd
  2466 ;;		_read_switches
  2467 ;; This function is called by:
  2468 ;;		_go_to_menu
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           	psect	text9
  2473   001CD4                     __ptext9:
  2474                           	callstack 0
  2475   001CD4                     _view_log:
  2476                           	callstack 24
  2477                           
  2478                           ;functions.c: 277: int i = 0, exit_flag = 0;
  2479                           
  2480                           ;incstack = 0
  2481   001CD4  0E00               	movlw	0
  2482   001CD6  6E1C               	movwf	(view_log@i+1)^0,c
  2483   001CD8  0E00               	movlw	0
  2484   001CDA  6E1B               	movwf	view_log@i^0,c
  2485   001CDC  0E00               	movlw	0
  2486   001CDE  6E1A               	movwf	(view_log@exit_flag+1)^0,c
  2487   001CE0  0E00               	movlw	0
  2488   001CE2  6E19               	movwf	view_log@exit_flag^0,c
  2489                           
  2490                           ;functions.c: 278: char string[16] = {0};
  2491   001CE4  EE20  F009         	lfsr	2,view_log@string
  2492   001CE8  0E0F               	movlw	15
  2493   001CEA                     u1821:
  2494   001CEA  6ADE               	clrf	postinc2,c
  2495   001CEC  06E8               	decf	wreg,f,c
  2496   001CEE  E2FD               	bc	u1821
  2497                           
  2498                           ;functions.c: 280: while (!exit_flag)
  2499   001CF0  D05C               	goto	l3073
  2500   001CF2                     l3045:
  2501                           
  2502                           ;functions.c: 281: {;functions.c: 282: clcd_print("LOGS:", (0x80 + (0)));
  2503   001CF2  0EF0               	movlw	low STR_26
  2504   001CF4  6E03               	movwf	clcd_print@data^0,c
  2505   001CF6  0E2F               	movlw	high STR_26
  2506   001CF8  6E04               	movwf	(clcd_print@data+1)^0,c
  2507   001CFA  0E80               	movlw	128
  2508   001CFC  6E05               	movwf	clcd_print@addr^0,c
  2509   001CFE  ECE7  F00B         	call	_clcd_print	;wreg free
  2510                           
  2511                           ;functions.c: 283: clcd_putch('0' + i, (0xC0 + (0)));
  2512   001D02  0EC0               	movlw	192
  2513   001D04  6E04               	movwf	clcd_putch@addr^0,c
  2514   001D06  501B               	movf	view_log@i^0,w,c
  2515   001D08  0F30               	addlw	48
  2516   001D0A  ECFF  F009         	call	_clcd_putch
  2517                           
  2518                           ;functions.c: 284: clcd_putch('.', (0xC0 + (1)));
  2519   001D0E  0EC1               	movlw	193
  2520   001D10  6E04               	movwf	clcd_putch@addr^0,c
  2521   001D12  0E2E               	movlw	46
  2522   001D14  ECFF  F009         	call	_clcd_putch
  2523                           
  2524                           ;functions.c: 285: print_log_to_clcd(0xC0, i);
  2525   001D18  C01B  F006         	movff	view_log@i,print_log_to_clcd@iter
  2526   001D1C  0EC0               	movlw	192
  2527   001D1E  ECC7  F00F         	call	_print_log_to_clcd
  2528                           
  2529                           ;functions.c: 287: switch (read_switches(1))
  2530   001D22  D03A               	goto	l3071
  2531   001D24                     l3053:
  2532                           
  2533                           ;functions.c: 290: {;functions.c: 291: if (i > 0)
  2534   001D24  BE1C               	btfsc	(view_log@i+1)^0,7,c
  2535   001D26  D041               	goto	l3073
  2536   001D28  501C               	movf	(view_log@i+1)^0,w,c
  2537   001D2A  E103               	bnz	u1830
  2538   001D2C  041B               	decf	view_log@i^0,w,c
  2539   001D2E  A0D8               	btfss	status,0,c
  2540   001D30  D03C               	goto	l3073
  2541   001D32                     u1830:
  2542                           
  2543                           ;functions.c: 292: i--;
  2544   001D32  061B               	decf	view_log@i^0,f,c
  2545   001D34  A0D8               	btfss	status,0,c
  2546   001D36  061C               	decf	(view_log@i+1)^0,f,c
  2547   001D38  D038               	goto	l3073
  2548   001D3A                     l3057:
  2549                           
  2550                           ;functions.c: 296: {;functions.c: 297: delay(5);
  2551   001D3A  0E00               	movlw	0
  2552   001D3C  6E02               	movwf	(delay@ms+1)^0,c
  2553   001D3E  0E05               	movlw	5
  2554   001D40  6E01               	movwf	delay@ms^0,c
  2555   001D42  ECCE  F00A         	call	_delay	;wreg free
  2556                           
  2557                           ;functions.c: 299: if (read_switches(0) == 12)
  2558   001D46  0E00               	movlw	0
  2559   001D48  ECEC  F00A         	call	_read_switches
  2560   001D4C  0A0C               	xorlw	12
  2561   001D4E  A4D8               	btfss	status,2,c
  2562   001D50  D005               	goto	l3061
  2563                           
  2564                           ;functions.c: 300: exit_flag = 1;
  2565   001D52  0E00               	movlw	0
  2566   001D54  6E1A               	movwf	(view_log@exit_flag+1)^0,c
  2567   001D56  0E01               	movlw	1
  2568   001D58  6E19               	movwf	view_log@exit_flag^0,c
  2569   001D5A  D027               	goto	l3073
  2570   001D5C                     l3061:
  2571                           
  2572                           ;functions.c: 301: else if (log_total_saved > 9)
  2573   001D5C  BE4A               	btfsc	(_log_total_saved+1)^0,7,c
  2574   001D5E  D011               	goto	l3067
  2575   001D60  504A               	movf	(_log_total_saved+1)^0,w,c
  2576   001D62  E104               	bnz	u1850
  2577   001D64  0E0A               	movlw	10
  2578   001D66  5C49               	subwf	_log_total_saved^0,w,c
  2579   001D68  A0D8               	btfss	status,0,c
  2580   001D6A  D00B               	goto	l3067
  2581   001D6C                     u1850:
  2582                           
  2583                           ;functions.c: 302: {;functions.c: 303: if (i < 9)
  2584   001D6C  BE1C               	btfsc	(view_log@i+1)^0,7,c
  2585   001D6E  D006               	goto	u1860
  2586   001D70  501C               	movf	(view_log@i+1)^0,w,c
  2587   001D72  E11B               	bnz	l3073
  2588   001D74  0E09               	movlw	9
  2589   001D76  5C1B               	subwf	view_log@i^0,w,c
  2590   001D78  B0D8               	btfsc	status,0,c
  2591   001D7A  D017               	goto	l3073
  2592   001D7C                     u1860:
  2593                           
  2594                           ;functions.c: 304: i++;
  2595   001D7C  4A1B               	infsnz	view_log@i^0,f,c
  2596   001D7E  2A1C               	incf	(view_log@i+1)^0,f,c
  2597   001D80  D014               	goto	l3073
  2598   001D82                     l3067:
  2599                           
  2600                           ;functions.c: 307: else if (i < log_iter)
  2601   001D82  5047               	movf	_log_iter^0,w,c
  2602   001D84  5C1B               	subwf	view_log@i^0,w,c
  2603   001D86  501C               	movf	(view_log@i+1)^0,w,c
  2604   001D88  0A80               	xorlw	128
  2605   001D8A  6E08               	movwf	??_view_log^0,c
  2606   001D8C  5048               	movf	(_log_iter+1)^0,w,c
  2607   001D8E  0A80               	xorlw	128
  2608   001D90  5808               	subwfb	??_view_log^0,w,c
  2609   001D92  A0D8               	btfss	status,0,c
  2610   001D94  D7F3               	goto	u1860
  2611   001D96  D009               	goto	l3073
  2612   001D98                     l3071:
  2613   001D98  0E01               	movlw	1
  2614   001D9A  ECEC  F00A         	call	_read_switches
  2615                           
  2616                           ; Switch size 1, requested type "simple"
  2617                           ; Number of cases is 2, Range of values is 11 to 12
  2618                           ; switch strategies available:
  2619                           ; Name         Instructions Cycles
  2620                           ; simple_byte            7     4 (average)
  2621                           ;	Chosen strategy is simple_byte
  2622   001D9E  0A0B               	xorlw	11	; case 11
  2623   001DA0  B4D8               	btfsc	status,2,c
  2624   001DA2  D7C0               	goto	l3053
  2625   001DA4  0A07               	xorlw	7	; case 12
  2626   001DA6  B4D8               	btfsc	status,2,c
  2627   001DA8  D7C8               	goto	l3057
  2628   001DAA                     l3073:
  2629   001DAA  5019               	movf	view_log@exit_flag^0,w,c
  2630   001DAC  101A               	iorwf	(view_log@exit_flag+1)^0,w,c
  2631   001DAE  A4D8               	btfss	status,2,c
  2632   001DB0  0012               	return	
  2633   001DB2  D79F               	goto	l3045
  2634   001DB4                     __end_of_view_log:
  2635                           	callstack 0
  2636                           
  2637 ;; *************** function _print_log_to_clcd *****************
  2638 ;; Defined at:
  2639 ;;		line 257 in file "functions.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;  LINE            1    wreg     unsigned char 
  2642 ;;  iter            1    5[COMRAM] unsigned char 
  2643 ;; Auto vars:     Size  Location     Type
  2644 ;;  LINE            1    6[COMRAM] unsigned char 
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  1    wreg      void 
  2647 ;; Registers used:
  2648 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2649 ;; Tracked objects:
  2650 ;;		On entry : 0/0
  2651 ;;		On exit  : 0/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2654 ;;      Params:         1       0       0       0       0       0       0
  2655 ;;      Locals:         1       0       0       0       0       0       0
  2656 ;;      Temps:          0       0       0       0       0       0       0
  2657 ;;      Totals:         2       0       0       0       0       0       0
  2658 ;;Total ram usage:        2 bytes
  2659 ;; Hardware stack levels used: 1
  2660 ;; Hardware stack levels required when called: 4
  2661 ;; This function calls:
  2662 ;;		_clcd_putch
  2663 ;;		_read_external_eeprom
  2664 ;; This function is called by:
  2665 ;;		_view_log
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           	psect	text10
  2670   001F8E                     __ptext10:
  2671                           	callstack 0
  2672   001F8E                     _print_log_to_clcd:
  2673                           	callstack 24
  2674                           
  2675                           ;incstack = 0
  2676                           ;print_log_to_clcd@LINE stored from wreg
  2677   001F8E  6E07               	movwf	print_log_to_clcd@LINE^0,c
  2678                           
  2679                           ;functions.c: 259: clcd_putch(read_external_eeprom(iter * 10 + 0), LINE + 2);
  2680   001F90  5007               	movf	print_log_to_clcd@LINE^0,w,c
  2681   001F92  0F02               	addlw	2
  2682   001F94  6E04               	movwf	clcd_putch@addr^0,c
  2683   001F96  5006               	movf	print_log_to_clcd@iter^0,w,c
  2684   001F98  0D0A               	mullw	10
  2685   001F9A  50F3               	movf	243,w,c
  2686   001F9C  EC50  F00A         	call	_read_external_eeprom
  2687   001FA0  ECFF  F009         	call	_clcd_putch
  2688                           
  2689                           ;functions.c: 260: clcd_putch(read_external_eeprom(iter * 10 + 1), LINE + 3);
  2690   001FA4  5007               	movf	print_log_to_clcd@LINE^0,w,c
  2691   001FA6  0F03               	addlw	3
  2692   001FA8  6E04               	movwf	clcd_putch@addr^0,c
  2693   001FAA  5006               	movf	print_log_to_clcd@iter^0,w,c
  2694   001FAC  0D0A               	mullw	10
  2695   001FAE  28F3               	incf	243,w,c
  2696   001FB0  EC50  F00A         	call	_read_external_eeprom
  2697   001FB4  ECFF  F009         	call	_clcd_putch
  2698                           
  2699                           ;functions.c: 261: clcd_putch(':', LINE + 4);
  2700   001FB8  5007               	movf	print_log_to_clcd@LINE^0,w,c
  2701   001FBA  0F04               	addlw	4
  2702   001FBC  6E04               	movwf	clcd_putch@addr^0,c
  2703   001FBE  0E3A               	movlw	58
  2704   001FC0  ECFF  F009         	call	_clcd_putch
  2705                           
  2706                           ;functions.c: 262: clcd_putch(read_external_eeprom(iter * 10 + 2), LINE + 5);
  2707   001FC4  5007               	movf	print_log_to_clcd@LINE^0,w,c
  2708   001FC6  0F05               	addlw	5
  2709   001FC8  6E04               	movwf	clcd_putch@addr^0,c
  2710   001FCA  5006               	movf	print_log_to_clcd@iter^0,w,c
  2711   001FCC  0D0A               	mullw	10
  2712   001FCE  50F3               	movf	243,w,c
  2713   001FD0  0F02               	addlw	2
  2714   001FD2  EC50  F00A         	call	_read_external_eeprom
  2715   001FD6  ECFF  F009         	call	_clcd_putch
  2716                           
  2717                           ;functions.c: 263: clcd_putch(read_external_eeprom(iter * 10 + 3), LINE + 6);
  2718   001FDA  5007               	movf	print_log_to_clcd@LINE^0,w,c
  2719   001FDC  0F06               	addlw	6
  2720   001FDE  6E04               	movwf	clcd_putch@addr^0,c
  2721   001FE0  5006               	movf	print_log_to_clcd@iter^0,w,c
  2722   001FE2  0D0A               	mullw	10
  2723   001FE4  50F3               	movf	243,w,c
  2724   001FE6  0F03               	addlw	3
  2725   001FE8  EC50  F00A         	call	_read_external_eeprom
  2726   001FEC  ECFF  F009         	call	_clcd_putch
  2727                           
  2728                           ;functions.c: 264: clcd_putch(':', LINE + 7);
  2729   001FF0  5007               	movf	print_log_to_clcd@LINE^0,w,c
  2730   001FF2  0F07               	addlw	7
  2731   001FF4  6E04               	movwf	clcd_putch@addr^0,c
  2732   001FF6  0E3A               	movlw	58
  2733   001FF8  ECFF  F009         	call	_clcd_putch
  2734                           
  2735                           ;functions.c: 265: clcd_putch(read_external_eeprom(iter * 10 + 4), LINE + 8);
  2736   001FFC  5007               	movf	print_log_to_clcd@LINE^0,w,c
  2737   001FFE  0F08               	addlw	8
  2738   002000  6E04               	movwf	clcd_putch@addr^0,c
  2739   002002  5006               	movf	print_log_to_clcd@iter^0,w,c
  2740   002004  0D0A               	mullw	10
  2741   002006  50F3               	movf	243,w,c
  2742   002008  0F04               	addlw	4
  2743   00200A  EC50  F00A         	call	_read_external_eeprom
  2744   00200E  ECFF  F009         	call	_clcd_putch
  2745                           
  2746                           ;functions.c: 266: clcd_putch(read_external_eeprom(iter * 10 + 5), LINE + 9);
  2747   002012  5007               	movf	print_log_to_clcd@LINE^0,w,c
  2748   002014  0F09               	addlw	9
  2749   002016  6E04               	movwf	clcd_putch@addr^0,c
  2750   002018  5006               	movf	print_log_to_clcd@iter^0,w,c
  2751   00201A  0D0A               	mullw	10
  2752   00201C  50F3               	movf	243,w,c
  2753   00201E  0F05               	addlw	5
  2754   002020  EC50  F00A         	call	_read_external_eeprom
  2755   002024  ECFF  F009         	call	_clcd_putch
  2756                           
  2757                           ;functions.c: 267: clcd_putch(' ', LINE + 10);
  2758   002028  5007               	movf	print_log_to_clcd@LINE^0,w,c
  2759   00202A  0F0A               	addlw	10
  2760   00202C  6E04               	movwf	clcd_putch@addr^0,c
  2761   00202E  0E20               	movlw	32
  2762   002030  ECFF  F009         	call	_clcd_putch
  2763                           
  2764                           ;functions.c: 268: clcd_putch(read_external_eeprom(iter * 10 + 6), LINE + 11);
  2765   002034  5007               	movf	print_log_to_clcd@LINE^0,w,c
  2766   002036  0F0B               	addlw	11
  2767   002038  6E04               	movwf	clcd_putch@addr^0,c
  2768   00203A  5006               	movf	print_log_to_clcd@iter^0,w,c
  2769   00203C  0D0A               	mullw	10
  2770   00203E  50F3               	movf	243,w,c
  2771   002040  0F06               	addlw	6
  2772   002042  EC50  F00A         	call	_read_external_eeprom
  2773   002046  ECFF  F009         	call	_clcd_putch
  2774                           
  2775                           ;functions.c: 269: clcd_putch(read_external_eeprom(iter * 10 + 7), LINE + 12);
  2776   00204A  5007               	movf	print_log_to_clcd@LINE^0,w,c
  2777   00204C  0F0C               	addlw	12
  2778   00204E  6E04               	movwf	clcd_putch@addr^0,c
  2779   002050  5006               	movf	print_log_to_clcd@iter^0,w,c
  2780   002052  0D0A               	mullw	10
  2781   002054  50F3               	movf	243,w,c
  2782   002056  0F07               	addlw	7
  2783   002058  EC50  F00A         	call	_read_external_eeprom
  2784   00205C  ECFF  F009         	call	_clcd_putch
  2785                           
  2786                           ;functions.c: 270: clcd_putch(' ', LINE + 13);
  2787   002060  5007               	movf	print_log_to_clcd@LINE^0,w,c
  2788   002062  0F0D               	addlw	13
  2789   002064  6E04               	movwf	clcd_putch@addr^0,c
  2790   002066  0E20               	movlw	32
  2791   002068  ECFF  F009         	call	_clcd_putch
  2792                           
  2793                           ;functions.c: 271: clcd_putch(read_external_eeprom(iter * 10 + 8), LINE + 14);
  2794   00206C  5007               	movf	print_log_to_clcd@LINE^0,w,c
  2795   00206E  0F0E               	addlw	14
  2796   002070  6E04               	movwf	clcd_putch@addr^0,c
  2797   002072  5006               	movf	print_log_to_clcd@iter^0,w,c
  2798   002074  0D0A               	mullw	10
  2799   002076  50F3               	movf	243,w,c
  2800   002078  0F08               	addlw	8
  2801   00207A  EC50  F00A         	call	_read_external_eeprom
  2802   00207E  ECFF  F009         	call	_clcd_putch
  2803                           
  2804                           ;functions.c: 272: clcd_putch(read_external_eeprom(iter * 10 + 9), LINE + 15);
  2805   002082  5007               	movf	print_log_to_clcd@LINE^0,w,c
  2806   002084  0F0F               	addlw	15
  2807   002086  6E04               	movwf	clcd_putch@addr^0,c
  2808   002088  5006               	movf	print_log_to_clcd@iter^0,w,c
  2809   00208A  0D0A               	mullw	10
  2810   00208C  50F3               	movf	243,w,c
  2811   00208E  0F09               	addlw	9
  2812   002090  EC50  F00A         	call	_read_external_eeprom
  2813   002094  ECFF  F009         	call	_clcd_putch
  2814   002098  0012               	return		;funcret
  2815   00209A                     __end_of_print_log_to_clcd:
  2816                           	callstack 0
  2817                           
  2818 ;; *************** function _store_key_log *****************
  2819 ;; Defined at:
  2820 ;;		line 181 in file "functions.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;  gear            1    wreg     unsigned char 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  gear            1    6[COMRAM] unsigned char 
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2834 ;;      Params:         0       0       0       0       0       0       0
  2835 ;;      Locals:         1       0       0       0       0       0       0
  2836 ;;      Temps:          0       0       0       0       0       0       0
  2837 ;;      Totals:         1       0       0       0       0       0       0
  2838 ;;Total ram usage:        1 bytes
  2839 ;; Hardware stack levels used: 1
  2840 ;; Hardware stack levels required when called: 3
  2841 ;; This function calls:
  2842 ;;		___awmod
  2843 ;;		_write_external_eeprom
  2844 ;; This function is called by:
  2845 ;;		_go_to_menu
  2846 ;;		_main
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849                           
  2850                           	psect	text11
  2851   0021D0                     __ptext11:
  2852                           	callstack 0
  2853   0021D0                     _store_key_log:
  2854                           	callstack 27
  2855                           
  2856                           ;incstack = 0
  2857                           ;store_key_log@gear stored from wreg
  2858   0021D0  6E07               	movwf	store_key_log@gear^0,c
  2859                           
  2860                           ;functions.c: 183: write_external_eeprom(log_iter * 10 + 0, time[0]);
  2861   0021D2  C04C  F002         	movff	_time,write_external_eeprom@data
  2862   0021D6  5047               	movf	_log_iter^0,w,c
  2863   0021D8  0D0A               	mullw	10
  2864   0021DA  50F3               	movf	243,w,c
  2865   0021DC  EC7A  F00A         	call	_write_external_eeprom
  2866                           
  2867                           ;functions.c: 184: write_external_eeprom(log_iter * 10 + 1, time[1]);
  2868   0021E0  C04D  F002         	movff	_time+1,write_external_eeprom@data
  2869   0021E4  5047               	movf	_log_iter^0,w,c
  2870   0021E6  0D0A               	mullw	10
  2871   0021E8  28F3               	incf	243,w,c
  2872   0021EA  EC7A  F00A         	call	_write_external_eeprom
  2873                           
  2874                           ;functions.c: 185: write_external_eeprom(log_iter * 10 + 2, time[3]);
  2875   0021EE  C04F  F002         	movff	_time+3,write_external_eeprom@data
  2876   0021F2  5047               	movf	_log_iter^0,w,c
  2877   0021F4  0D0A               	mullw	10
  2878   0021F6  50F3               	movf	243,w,c
  2879   0021F8  0F02               	addlw	2
  2880   0021FA  EC7A  F00A         	call	_write_external_eeprom
  2881                           
  2882                           ;functions.c: 186: write_external_eeprom(log_iter * 10 + 3, time[4]);
  2883   0021FE  C050  F002         	movff	_time+4,write_external_eeprom@data
  2884   002202  5047               	movf	_log_iter^0,w,c
  2885   002204  0D0A               	mullw	10
  2886   002206  50F3               	movf	243,w,c
  2887   002208  0F03               	addlw	3
  2888   00220A  EC7A  F00A         	call	_write_external_eeprom
  2889                           
  2890                           ;functions.c: 187: write_external_eeprom(log_iter * 10 + 4, time[6]);
  2891   00220E  C052  F002         	movff	_time+6,write_external_eeprom@data
  2892   002212  5047               	movf	_log_iter^0,w,c
  2893   002214  0D0A               	mullw	10
  2894   002216  50F3               	movf	243,w,c
  2895   002218  0F04               	addlw	4
  2896   00221A  EC7A  F00A         	call	_write_external_eeprom
  2897                           
  2898                           ;functions.c: 188: write_external_eeprom(log_iter * 10 + 5, time[7]);
  2899   00221E  C053  F002         	movff	_time+7,write_external_eeprom@data
  2900   002222  5047               	movf	_log_iter^0,w,c
  2901   002224  0D0A               	mullw	10
  2902   002226  50F3               	movf	243,w,c
  2903   002228  0F05               	addlw	5
  2904   00222A  EC7A  F00A         	call	_write_external_eeprom
  2905                           
  2906                           ;functions.c: 190: if (gear == 'C')
  2907   00222E  0E43               	movlw	67
  2908   002230  1807               	xorwf	store_key_log@gear^0,w,c
  2909   002232  A4D8               	btfss	status,2,c
  2910   002234  D011               	goto	l3011
  2911                           
  2912                           ;functions.c: 191: {;functions.c: 192: write_external_eeprom(log_iter * 10 + 6, ' ');
  2913   002236  0E20               	movlw	32
  2914   002238  6E02               	movwf	write_external_eeprom@data^0,c
  2915   00223A  5047               	movf	_log_iter^0,w,c
  2916   00223C  0D0A               	mullw	10
  2917   00223E  50F3               	movf	243,w,c
  2918   002240  0F06               	addlw	6
  2919   002242  EC7A  F00A         	call	_write_external_eeprom
  2920                           
  2921                           ;functions.c: 193: write_external_eeprom(log_iter * 10 + 7, 'C');
  2922   002246  0E43               	movlw	67
  2923   002248  6E02               	movwf	write_external_eeprom@data^0,c
  2924   00224A  5047               	movf	_log_iter^0,w,c
  2925   00224C  0D0A               	mullw	10
  2926   00224E  50F3               	movf	243,w,c
  2927   002250  0F07               	addlw	7
  2928   002252  EC7A  F00A         	call	_write_external_eeprom
  2929                           
  2930                           ;functions.c: 194: }
  2931   002256  D08E               	goto	l587
  2932   002258                     l3011:
  2933                           
  2934                           ;functions.c: 195: else if (gear == 'O')
  2935   002258  0E4F               	movlw	79
  2936   00225A  1807               	xorwf	store_key_log@gear^0,w,c
  2937   00225C  A4D8               	btfss	status,2,c
  2938   00225E  D011               	goto	l3015
  2939                           
  2940                           ;functions.c: 196: {;functions.c: 197: write_external_eeprom(log_iter * 10 + 6, 'O');
  2941   002260  0E4F               	movlw	79
  2942   002262  6E02               	movwf	write_external_eeprom@data^0,c
  2943   002264  5047               	movf	_log_iter^0,w,c
  2944   002266  0D0A               	mullw	10
  2945   002268  50F3               	movf	243,w,c
  2946   00226A  0F06               	addlw	6
  2947   00226C  EC7A  F00A         	call	_write_external_eeprom
  2948                           
  2949                           ;functions.c: 198: write_external_eeprom(log_iter * 10 + 7, 'N');
  2950   002270  0E4E               	movlw	78
  2951   002272  6E02               	movwf	write_external_eeprom@data^0,c
  2952   002274  5047               	movf	_log_iter^0,w,c
  2953   002276  0D0A               	mullw	10
  2954   002278  50F3               	movf	243,w,c
  2955   00227A  0F07               	addlw	7
  2956   00227C  EC7A  F00A         	call	_write_external_eeprom
  2957                           
  2958                           ;functions.c: 199: }
  2959   002280  D079               	goto	l587
  2960   002282                     l3015:
  2961                           
  2962                           ;functions.c: 200: else if(gear == 'P')
  2963   002282  0E50               	movlw	80
  2964   002284  1807               	xorwf	store_key_log@gear^0,w,c
  2965   002286  A4D8               	btfss	status,2,c
  2966   002288  D011               	goto	l3019
  2967                           
  2968                           ;functions.c: 201: {;functions.c: 202: write_external_eeprom(log_iter * 10 + 6, 'P');
  2969   00228A  0E50               	movlw	80
  2970   00228C  6E02               	movwf	write_external_eeprom@data^0,c
  2971   00228E  5047               	movf	_log_iter^0,w,c
  2972   002290  0D0A               	mullw	10
  2973   002292  50F3               	movf	243,w,c
  2974   002294  0F06               	addlw	6
  2975   002296  EC7A  F00A         	call	_write_external_eeprom
  2976                           
  2977                           ;functions.c: 203: write_external_eeprom(log_iter * 10 + 7, 'A');
  2978   00229A  0E41               	movlw	65
  2979   00229C  6E02               	movwf	write_external_eeprom@data^0,c
  2980   00229E  5047               	movf	_log_iter^0,w,c
  2981   0022A0  0D0A               	mullw	10
  2982   0022A2  50F3               	movf	243,w,c
  2983   0022A4  0F07               	addlw	7
  2984   0022A6  EC7A  F00A         	call	_write_external_eeprom
  2985                           
  2986                           ;functions.c: 204: }
  2987   0022AA  D064               	goto	l587
  2988   0022AC                     l3019:
  2989                           
  2990                           ;functions.c: 205: else if(gear == 'V')
  2991   0022AC  0E56               	movlw	86
  2992   0022AE  1807               	xorwf	store_key_log@gear^0,w,c
  2993   0022B0  A4D8               	btfss	status,2,c
  2994   0022B2  D011               	goto	l3023
  2995                           
  2996                           ;functions.c: 206: {;functions.c: 207: write_external_eeprom(log_iter * 10 + 6, 'V');
  2997   0022B4  0E56               	movlw	86
  2998   0022B6  6E02               	movwf	write_external_eeprom@data^0,c
  2999   0022B8  5047               	movf	_log_iter^0,w,c
  3000   0022BA  0D0A               	mullw	10
  3001   0022BC  50F3               	movf	243,w,c
  3002   0022BE  0F06               	addlw	6
  3003   0022C0  EC7A  F00A         	call	_write_external_eeprom
  3004                           
  3005                           ;functions.c: 208: write_external_eeprom(log_iter * 10 + 7, 'L');
  3006   0022C4  0E4C               	movlw	76
  3007   0022C6  6E02               	movwf	write_external_eeprom@data^0,c
  3008   0022C8  5047               	movf	_log_iter^0,w,c
  3009   0022CA  0D0A               	mullw	10
  3010   0022CC  50F3               	movf	243,w,c
  3011   0022CE  0F07               	addlw	7
  3012   0022D0  EC7A  F00A         	call	_write_external_eeprom
  3013                           
  3014                           ;functions.c: 209: }
  3015   0022D4  D04F               	goto	l587
  3016   0022D6                     l3023:
  3017                           
  3018                           ;functions.c: 210: else if(gear == 'D')
  3019   0022D6  0E44               	movlw	68
  3020   0022D8  1807               	xorwf	store_key_log@gear^0,w,c
  3021   0022DA  A4D8               	btfss	status,2,c
  3022   0022DC  D011               	goto	l3027
  3023                           
  3024                           ;functions.c: 211: {;functions.c: 212: write_external_eeprom(log_iter * 10 + 6, 'D');
  3025   0022DE  0E44               	movlw	68
  3026   0022E0  6E02               	movwf	write_external_eeprom@data^0,c
  3027   0022E2  5047               	movf	_log_iter^0,w,c
  3028   0022E4  0D0A               	mullw	10
  3029   0022E6  50F3               	movf	243,w,c
  3030   0022E8  0F06               	addlw	6
  3031   0022EA  EC7A  F00A         	call	_write_external_eeprom
  3032                           
  3033                           ;functions.c: 213: write_external_eeprom(log_iter * 10 + 7, 'L');
  3034   0022EE  0E4C               	movlw	76
  3035   0022F0  6E02               	movwf	write_external_eeprom@data^0,c
  3036   0022F2  5047               	movf	_log_iter^0,w,c
  3037   0022F4  0D0A               	mullw	10
  3038   0022F6  50F3               	movf	243,w,c
  3039   0022F8  0F07               	addlw	7
  3040   0022FA  EC7A  F00A         	call	_write_external_eeprom
  3041                           
  3042                           ;functions.c: 214: }
  3043   0022FE  D03A               	goto	l587
  3044   002300                     l3027:
  3045                           
  3046                           ;functions.c: 215: else if(gear == 'X')
  3047   002300  0E58               	movlw	88
  3048   002302  1807               	xorwf	store_key_log@gear^0,w,c
  3049   002304  A4D8               	btfss	status,2,c
  3050   002306  D011               	goto	l3031
  3051                           
  3052                           ;functions.c: 216: {;functions.c: 217: write_external_eeprom(log_iter * 10 + 6, 'C');
  3053   002308  0E43               	movlw	67
  3054   00230A  6E02               	movwf	write_external_eeprom@data^0,c
  3055   00230C  5047               	movf	_log_iter^0,w,c
  3056   00230E  0D0A               	mullw	10
  3057   002310  50F3               	movf	243,w,c
  3058   002312  0F06               	addlw	6
  3059   002314  EC7A  F00A         	call	_write_external_eeprom
  3060                           
  3061                           ;functions.c: 218: write_external_eeprom(log_iter * 10 + 7, 'L');
  3062   002318  0E4C               	movlw	76
  3063   00231A  6E02               	movwf	write_external_eeprom@data^0,c
  3064   00231C  5047               	movf	_log_iter^0,w,c
  3065   00231E  0D0A               	mullw	10
  3066   002320  50F3               	movf	243,w,c
  3067   002322  0F07               	addlw	7
  3068   002324  EC7A  F00A         	call	_write_external_eeprom
  3069                           
  3070                           ;functions.c: 219: }
  3071   002328  D025               	goto	l587
  3072   00232A                     l3031:
  3073                           
  3074                           ;functions.c: 220: else if(gear == 'W')
  3075   00232A  0E57               	movlw	87
  3076   00232C  1807               	xorwf	store_key_log@gear^0,w,c
  3077   00232E  A4D8               	btfss	status,2,c
  3078   002330  D011               	goto	l3035
  3079                           
  3080                           ;functions.c: 221: {;functions.c: 222: write_external_eeprom(log_iter * 10 + 6, 'C');
  3081   002332  0E43               	movlw	67
  3082   002334  6E02               	movwf	write_external_eeprom@data^0,c
  3083   002336  5047               	movf	_log_iter^0,w,c
  3084   002338  0D0A               	mullw	10
  3085   00233A  50F3               	movf	243,w,c
  3086   00233C  0F06               	addlw	6
  3087   00233E  EC7A  F00A         	call	_write_external_eeprom
  3088                           
  3089                           ;functions.c: 223: write_external_eeprom(log_iter * 10 + 7, 'P');
  3090   002342  0E50               	movlw	80
  3091   002344  6E02               	movwf	write_external_eeprom@data^0,c
  3092   002346  5047               	movf	_log_iter^0,w,c
  3093   002348  0D0A               	mullw	10
  3094   00234A  50F3               	movf	243,w,c
  3095   00234C  0F07               	addlw	7
  3096   00234E  EC7A  F00A         	call	_write_external_eeprom
  3097                           
  3098                           ;functions.c: 224: }
  3099   002352  D010               	goto	l587
  3100   002354                     l3035:
  3101                           
  3102                           ;functions.c: 225: else;functions.c: 226: {;functions.c: 227: write_external_eeprom(log_
      +                          iter * 10 + 6, 'G');
  3103   002354  0E47               	movlw	71
  3104   002356  6E02               	movwf	write_external_eeprom@data^0,c
  3105   002358  5047               	movf	_log_iter^0,w,c
  3106   00235A  0D0A               	mullw	10
  3107   00235C  50F3               	movf	243,w,c
  3108   00235E  0F06               	addlw	6
  3109   002360  EC7A  F00A         	call	_write_external_eeprom
  3110                           
  3111                           ;functions.c: 228: write_external_eeprom(log_iter * 10 + 7, gear);
  3112   002364  C007  F002         	movff	store_key_log@gear,write_external_eeprom@data
  3113   002368  5047               	movf	_log_iter^0,w,c
  3114   00236A  0D0A               	mullw	10
  3115   00236C  50F3               	movf	243,w,c
  3116   00236E  0F07               	addlw	7
  3117   002370  EC7A  F00A         	call	_write_external_eeprom
  3118   002374                     l587:
  3119                           
  3120                           ;functions.c: 229: };functions.c: 231: write_external_eeprom(log_iter * 10 + 8, speed[0]
      +                          );
  3121   002374  C055  F002         	movff	_speed,write_external_eeprom@data
  3122   002378  5047               	movf	_log_iter^0,w,c
  3123   00237A  0D0A               	mullw	10
  3124   00237C  50F3               	movf	243,w,c
  3125   00237E  0F08               	addlw	8
  3126   002380  EC7A  F00A         	call	_write_external_eeprom
  3127                           
  3128                           ;functions.c: 232: write_external_eeprom(log_iter * 10 + 9, speed[1]);
  3129   002384  C056  F002         	movff	_speed+1,write_external_eeprom@data
  3130   002388  5047               	movf	_log_iter^0,w,c
  3131   00238A  0D0A               	mullw	10
  3132   00238C  50F3               	movf	243,w,c
  3133   00238E  0F09               	addlw	9
  3134   002390  EC7A  F00A         	call	_write_external_eeprom
  3135                           
  3136                           ;functions.c: 234: log_iter = (log_iter + 1) % 10;
  3137   002394  0E01               	movlw	1
  3138   002396  2447               	addwf	_log_iter^0,w,c
  3139   002398  6E01               	movwf	___awmod@dividend^0,c
  3140   00239A  0E00               	movlw	0
  3141   00239C  2048               	addwfc	(_log_iter+1)^0,w,c
  3142   00239E  6E02               	movwf	(___awmod@dividend+1)^0,c
  3143   0023A0  0E00               	movlw	0
  3144   0023A2  6E04               	movwf	(___awmod@divisor+1)^0,c
  3145   0023A4  0E0A               	movlw	10
  3146   0023A6  6E03               	movwf	___awmod@divisor^0,c
  3147   0023A8  EC48  F00C         	call	___awmod	;wreg free
  3148   0023AC  C001  F047         	movff	?___awmod,_log_iter
  3149   0023B0  C002  F048         	movff	?___awmod+1,_log_iter+1
  3150                           
  3151                           ;functions.c: 235: log_total_saved++;
  3152   0023B4  4A49               	infsnz	_log_total_saved^0,f,c
  3153   0023B6  2A4A               	incf	(_log_total_saved+1)^0,f,c
  3154   0023B8  0012               	return		;funcret
  3155   0023BA                     __end_of_store_key_log:
  3156                           	callstack 0
  3157                           
  3158 ;; *************** function _set_time *****************
  3159 ;; Defined at:
  3160 ;;		line 130 in file "main.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;		None
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;  time_buffer     9   14[COMRAM] unsigned char [9]
  3165 ;;  seconds         2   31[COMRAM] int 
  3166 ;;  min             2   29[COMRAM] int 
  3167 ;;  hour            2   27[COMRAM] int 
  3168 ;;  field_select    2   25[COMRAM] int 
  3169 ;;  blinker         2   12[COMRAM] unsigned int 
  3170 ;;  dummy           1   24[COMRAM] unsigned char 
  3171 ;;  exit_flag       1   23[COMRAM] unsigned char 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      void 
  3174 ;; Registers used:
  3175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3181 ;;      Params:         0       0       0       0       0       0       0
  3182 ;;      Locals:        21       0       0       0       0       0       0
  3183 ;;      Temps:          2       0       0       0       0       0       0
  3184 ;;      Totals:        23       0       0       0       0       0       0
  3185 ;;Total ram usage:       23 bytes
  3186 ;; Hardware stack levels used: 1
  3187 ;; Hardware stack levels required when called: 4
  3188 ;; This function calls:
  3189 ;;		___awdiv
  3190 ;;		___awmod
  3191 ;;		_clcd_print
  3192 ;;		_clcd_putch
  3193 ;;		_clcd_write
  3194 ;;		_delay
  3195 ;;		_read_ds1307
  3196 ;;		_read_switches
  3197 ;;		_write_ds1307
  3198 ;; This function is called by:
  3199 ;;		_go_to_menu
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203                           	psect	text12
  3204   002AE0                     __ptext12:
  3205                           	callstack 0
  3206   002AE0                     _set_time:
  3207                           	callstack 25
  3208                           
  3209                           ;main.c: 132: clcd_write(0x01, 0);
  3210                           
  3211                           ;incstack = 0
  3212   002AE0  0E00               	movlw	0
  3213   002AE2  6E01               	movwf	clcd_write@control_bit^0,c
  3214   002AE4  0E01               	movlw	1
  3215   002AE6  EC3C  F00A         	call	_clcd_write
  3216                           
  3217                           ;main.c: 133: clcd_print("ENTER NEW TIME", (0x80 + (1)));
  3218   002AEA  0E3D               	movlw	low STR_13
  3219   002AEC  6E03               	movwf	clcd_print@data^0,c
  3220   002AEE  0E2F               	movlw	high STR_13
  3221   002AF0  6E04               	movwf	(clcd_print@data+1)^0,c
  3222   002AF2  0E81               	movlw	129
  3223   002AF4  6E05               	movwf	clcd_print@addr^0,c
  3224   002AF6  ECE7  F00B         	call	_clcd_print	;wreg free
  3225                           
  3226                           ;main.c: 135: unsigned char dummy;;main.c: 138: dummy = read_ds1307(0x00);
  3227   002AFA  0E00               	movlw	0
  3228   002AFC  EC65  F00A         	call	_read_ds1307
  3229   002B00  6E19               	movwf	set_time@dummy^0,c
  3230                           
  3231                           ;main.c: 139: write_ds1307(0x00, dummy | 0x80);
  3232   002B02  5019               	movf	set_time@dummy^0,w,c
  3233   002B04  0980               	iorlw	128
  3234   002B06  6E09               	movwf	write_ds1307@data^0,c
  3235   002B08  0E00               	movlw	0
  3236   002B0A  EC0B  F00A         	call	_write_ds1307
  3237                           
  3238                           ;main.c: 141: int hour = 0, min = 0, seconds = 0, field_select = 0;
  3239   002B0E  0E00               	movlw	0
  3240   002B10  6E1D               	movwf	(set_time@hour+1)^0,c
  3241   002B12  0E00               	movlw	0
  3242   002B14  6E1C               	movwf	set_time@hour^0,c
  3243   002B16  0E00               	movlw	0
  3244   002B18  6E1F               	movwf	(set_time@min+1)^0,c
  3245   002B1A  0E00               	movlw	0
  3246   002B1C  6E1E               	movwf	set_time@min^0,c
  3247   002B1E  0E00               	movlw	0
  3248   002B20  6E21               	movwf	(set_time@seconds+1)^0,c
  3249   002B22  0E00               	movlw	0
  3250   002B24  6E20               	movwf	set_time@seconds^0,c
  3251   002B26  0E00               	movlw	0
  3252   002B28  6E1B               	movwf	(set_time@field_select+1)^0,c
  3253   002B2A  0E00               	movlw	0
  3254   002B2C  6E1A               	movwf	set_time@field_select^0,c
  3255                           
  3256                           ;main.c: 142: unsigned int blinker = 0;
  3257   002B2E  0E00               	movlw	0
  3258   002B30  6E0E               	movwf	(set_time@blinker+1)^0,c
  3259   002B32  0E00               	movlw	0
  3260   002B34  6E0D               	movwf	set_time@blinker^0,c
  3261                           
  3262                           ;main.c: 143: char time_buffer[9] = {0, 0, ':', 0, 0, ':', 0, 0, 0};
  3263   002B36  EE20  F082         	lfsr	2,set_time@F10422
  3264   002B3A  EE10  F00F         	lfsr	1,set_time@time_buffer
  3265   002B3E  0E08               	movlw	8
  3266   002B40                     u1981:
  3267   002B40  CFDB FFE3          	movff	plusw2,plusw1
  3268   002B44  06E8               	decf	wreg,f,c
  3269   002B46  E2FC               	bc	u1981
  3270                           
  3271                           ;main.c: 144: char exit_flag = 0;
  3272   002B48  0E00               	movlw	0
  3273   002B4A  D0D5               	goto	L3
  3274   002B4C                     l3225:
  3275                           
  3276                           ;main.c: 147: {;main.c: 150: time_buffer[0] = hour / 10;
  3277   002B4C  C01C  F001         	movff	set_time@hour,___awdiv@dividend
  3278   002B50  C01D  F002         	movff	set_time@hour+1,___awdiv@dividend+1
  3279   002B54  0E00               	movlw	0
  3280   002B56  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3281   002B58  0E0A               	movlw	10
  3282   002B5A  6E03               	movwf	___awdiv@divisor^0,c
  3283   002B5C  ECBC  F00C         	call	___awdiv	;wreg free
  3284   002B60  5001               	movf	?___awdiv^0,w,c
  3285   002B62  6E0F               	movwf	set_time@time_buffer^0,c
  3286                           
  3287                           ;main.c: 151: time_buffer[1] = hour % 10;
  3288   002B64  C01C  F001         	movff	set_time@hour,___awmod@dividend
  3289   002B68  C01D  F002         	movff	set_time@hour+1,___awmod@dividend+1
  3290   002B6C  0E00               	movlw	0
  3291   002B6E  6E04               	movwf	(___awmod@divisor+1)^0,c
  3292   002B70  0E0A               	movlw	10
  3293   002B72  6E03               	movwf	___awmod@divisor^0,c
  3294   002B74  EC48  F00C         	call	___awmod	;wreg free
  3295   002B78  5001               	movf	?___awmod^0,w,c
  3296   002B7A  6E10               	movwf	(set_time@time_buffer+1)^0,c
  3297                           
  3298                           ;main.c: 152: time_buffer[3] = min / 10;
  3299   002B7C  C01E  F001         	movff	set_time@min,___awdiv@dividend
  3300   002B80  C01F  F002         	movff	set_time@min+1,___awdiv@dividend+1
  3301   002B84  0E00               	movlw	0
  3302   002B86  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3303   002B88  0E0A               	movlw	10
  3304   002B8A  6E03               	movwf	___awdiv@divisor^0,c
  3305   002B8C  ECBC  F00C         	call	___awdiv	;wreg free
  3306   002B90  5001               	movf	?___awdiv^0,w,c
  3307   002B92  6E12               	movwf	(set_time@time_buffer+3)^0,c
  3308                           
  3309                           ;main.c: 153: time_buffer[4] = min % 10;
  3310   002B94  C01E  F001         	movff	set_time@min,___awmod@dividend
  3311   002B98  C01F  F002         	movff	set_time@min+1,___awmod@dividend+1
  3312   002B9C  0E00               	movlw	0
  3313   002B9E  6E04               	movwf	(___awmod@divisor+1)^0,c
  3314   002BA0  0E0A               	movlw	10
  3315   002BA2  6E03               	movwf	___awmod@divisor^0,c
  3316   002BA4  EC48  F00C         	call	___awmod	;wreg free
  3317   002BA8  5001               	movf	?___awmod^0,w,c
  3318   002BAA  6E13               	movwf	(set_time@time_buffer+4)^0,c
  3319                           
  3320                           ;main.c: 154: time_buffer[6] = seconds / 10;
  3321   002BAC  C020  F001         	movff	set_time@seconds,___awdiv@dividend
  3322   002BB0  C021  F002         	movff	set_time@seconds+1,___awdiv@dividend+1
  3323   002BB4  0E00               	movlw	0
  3324   002BB6  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3325   002BB8  0E0A               	movlw	10
  3326   002BBA  6E03               	movwf	___awdiv@divisor^0,c
  3327   002BBC  ECBC  F00C         	call	___awdiv	;wreg free
  3328   002BC0  5001               	movf	?___awdiv^0,w,c
  3329   002BC2  6E15               	movwf	(set_time@time_buffer+6)^0,c
  3330                           
  3331                           ;main.c: 155: time_buffer[7] = seconds % 10;
  3332   002BC4  C020  F001         	movff	set_time@seconds,___awmod@dividend
  3333   002BC8  C021  F002         	movff	set_time@seconds+1,___awmod@dividend+1
  3334   002BCC  0E00               	movlw	0
  3335   002BCE  6E04               	movwf	(___awmod@divisor+1)^0,c
  3336   002BD0  0E0A               	movlw	10
  3337   002BD2  6E03               	movwf	___awmod@divisor^0,c
  3338   002BD4  EC48  F00C         	call	___awmod	;wreg free
  3339   002BD8  5001               	movf	?___awmod^0,w,c
  3340   002BDA  6E16               	movwf	(set_time@time_buffer+7)^0,c
  3341                           
  3342                           ;main.c: 157: clcd_putch(time_buffer[0] + '0', (0xC0 + (0)));
  3343   002BDC  0EC0               	movlw	192
  3344   002BDE  6E04               	movwf	clcd_putch@addr^0,c
  3345   002BE0  500F               	movf	set_time@time_buffer^0,w,c
  3346   002BE2  0F30               	addlw	48
  3347   002BE4  ECFF  F009         	call	_clcd_putch
  3348                           
  3349                           ;main.c: 158: clcd_putch(time_buffer[1] + '0', (0xC0 + (1)));
  3350   002BE8  0EC1               	movlw	193
  3351   002BEA  6E04               	movwf	clcd_putch@addr^0,c
  3352   002BEC  5010               	movf	(set_time@time_buffer+1)^0,w,c
  3353   002BEE  0F30               	addlw	48
  3354   002BF0  ECFF  F009         	call	_clcd_putch
  3355                           
  3356                           ;main.c: 159: clcd_putch(time_buffer[2], (0xC0 + (2)));
  3357   002BF4  0EC2               	movlw	194
  3358   002BF6  6E04               	movwf	clcd_putch@addr^0,c
  3359   002BF8  5011               	movf	(set_time@time_buffer+2)^0,w,c
  3360   002BFA  ECFF  F009         	call	_clcd_putch
  3361                           
  3362                           ;main.c: 160: clcd_putch(time_buffer[3] + '0', (0xC0 + (3)));
  3363   002BFE  0EC3               	movlw	195
  3364   002C00  6E04               	movwf	clcd_putch@addr^0,c
  3365   002C02  5012               	movf	(set_time@time_buffer+3)^0,w,c
  3366   002C04  0F30               	addlw	48
  3367   002C06  ECFF  F009         	call	_clcd_putch
  3368                           
  3369                           ;main.c: 161: clcd_putch(time_buffer[4] + '0', (0xC0 + (4)));
  3370   002C0A  0EC4               	movlw	196
  3371   002C0C  6E04               	movwf	clcd_putch@addr^0,c
  3372   002C0E  5013               	movf	(set_time@time_buffer+4)^0,w,c
  3373   002C10  0F30               	addlw	48
  3374   002C12  ECFF  F009         	call	_clcd_putch
  3375                           
  3376                           ;main.c: 162: clcd_putch(time_buffer[5], (0xC0 + (5)));
  3377   002C16  0EC5               	movlw	197
  3378   002C18  6E04               	movwf	clcd_putch@addr^0,c
  3379   002C1A  5014               	movf	(set_time@time_buffer+5)^0,w,c
  3380   002C1C  ECFF  F009         	call	_clcd_putch
  3381                           
  3382                           ;main.c: 163: clcd_putch(time_buffer[6] + '0', (0xC0 + (6)));
  3383   002C20  0EC6               	movlw	198
  3384   002C22  6E04               	movwf	clcd_putch@addr^0,c
  3385   002C24  5015               	movf	(set_time@time_buffer+6)^0,w,c
  3386   002C26  0F30               	addlw	48
  3387   002C28  ECFF  F009         	call	_clcd_putch
  3388                           
  3389                           ;main.c: 164: clcd_putch(time_buffer[7] + '0', (0xC0 + (7)));
  3390   002C2C  0EC7               	movlw	199
  3391   002C2E  6E04               	movwf	clcd_putch@addr^0,c
  3392   002C30  5016               	movf	(set_time@time_buffer+7)^0,w,c
  3393   002C32  0F30               	addlw	48
  3394   002C34  ECFF  F009         	call	_clcd_putch
  3395                           
  3396                           ;main.c: 166: if (blinker++ <= 20000)
  3397   002C38  500D               	movf	set_time@blinker^0,w,c
  3398   002C3A  6E0B               	movwf	??_set_time^0,c
  3399   002C3C  500E               	movf	(set_time@blinker+1)^0,w,c
  3400   002C3E  6E0C               	movwf	(??_set_time+1)^0,c
  3401   002C40  4A0D               	infsnz	set_time@blinker^0,f,c
  3402   002C42  2A0E               	incf	(set_time@blinker+1)^0,f,c
  3403   002C44  0E21               	movlw	33
  3404   002C46  5C0B               	subwf	??_set_time^0,w,c
  3405   002C48  0E4E               	movlw	78
  3406   002C4A  580C               	subwfb	(??_set_time+1)^0,w,c
  3407   002C4C  A0D8               	btfss	status,0,c
  3408   002C4E  D022               	goto	l3247
  3409   002C50  D09A               	goto	l3267
  3410   002C52                     l3239:
  3411                           
  3412                           ;main.c: 171: clcd_putch(' ', (0xC0 + (0)));
  3413   002C52  0EC0               	movlw	192
  3414   002C54  6E04               	movwf	clcd_putch@addr^0,c
  3415   002C56  0E20               	movlw	32
  3416   002C58  ECFF  F009         	call	_clcd_putch
  3417                           
  3418                           ;main.c: 172: clcd_putch(' ', (0xC0 + (1)));
  3419   002C5C  0EC1               	movlw	193
  3420   002C5E  6E04               	movwf	clcd_putch@addr^0,c
  3421   002C60  0E20               	movlw	32
  3422   002C62  ECFF  F009         	call	_clcd_putch
  3423                           
  3424                           ;main.c: 173: break;
  3425   002C66  D08F               	goto	l3267
  3426   002C68                     l3241:
  3427                           
  3428                           ;main.c: 175: clcd_putch(' ', (0xC0 + (3)));
  3429   002C68  0EC3               	movlw	195
  3430   002C6A  6E04               	movwf	clcd_putch@addr^0,c
  3431   002C6C  0E20               	movlw	32
  3432   002C6E  ECFF  F009         	call	_clcd_putch
  3433                           
  3434                           ;main.c: 176: clcd_putch(' ', (0xC0 + (4)));
  3435   002C72  0EC4               	movlw	196
  3436   002C74  6E04               	movwf	clcd_putch@addr^0,c
  3437   002C76  0E20               	movlw	32
  3438   002C78  ECFF  F009         	call	_clcd_putch
  3439                           
  3440                           ;main.c: 177: break;
  3441   002C7C  D084               	goto	l3267
  3442   002C7E                     l3243:
  3443                           
  3444                           ;main.c: 179: clcd_putch(' ', (0xC0 + (6)));
  3445   002C7E  0EC6               	movlw	198
  3446   002C80  6E04               	movwf	clcd_putch@addr^0,c
  3447   002C82  0E20               	movlw	32
  3448   002C84  ECFF  F009         	call	_clcd_putch
  3449                           
  3450                           ;main.c: 180: clcd_putch(' ', (0xC0 + (7)));
  3451   002C88  0EC7               	movlw	199
  3452   002C8A  6E04               	movwf	clcd_putch@addr^0,c
  3453   002C8C  0E20               	movlw	32
  3454   002C8E  ECFF  F009         	call	_clcd_putch
  3455                           
  3456                           ;main.c: 181: break;
  3457   002C92  D079               	goto	l3267
  3458   002C94                     l3247:
  3459   002C94  C01A  F00B         	movff	set_time@field_select,??_set_time
  3460   002C98  C01B  F00C         	movff	set_time@field_select+1,??_set_time+1
  3461                           
  3462                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3463                           ; Switch size 1, requested type "simple"
  3464                           ; Number of cases is 1, Range of values is 0 to 0
  3465                           ; switch strategies available:
  3466                           ; Name         Instructions Cycles
  3467                           ; simple_byte            4     3 (average)
  3468                           ;	Chosen strategy is simple_byte
  3469   002C9C  500C               	movf	(??_set_time+1)^0,w,c
  3470   002C9E  0A00               	xorlw	0	; case 0
  3471   002CA0  A4D8               	btfss	status,2,c
  3472   002CA2  D071               	goto	l3267
  3473                           
  3474                           ; Switch size 1, requested type "simple"
  3475                           ; Number of cases is 3, Range of values is 0 to 2
  3476                           ; switch strategies available:
  3477                           ; Name         Instructions Cycles
  3478                           ; simple_byte           10     6 (average)
  3479                           ;	Chosen strategy is simple_byte
  3480   002CA4  500B               	movf	??_set_time^0,w,c
  3481   002CA6  0A00               	xorlw	0	; case 0
  3482   002CA8  B4D8               	btfsc	status,2,c
  3483   002CAA  D7D3               	goto	l3239
  3484   002CAC  0A01               	xorlw	1	; case 1
  3485   002CAE  B4D8               	btfsc	status,2,c
  3486   002CB0  D7DB               	goto	l3241
  3487   002CB2  0A03               	xorlw	3	; case 2
  3488   002CB4  B4D8               	btfsc	status,2,c
  3489   002CB6  D7E3               	goto	l3243
  3490   002CB8  D066               	goto	l3267
  3491   002CBA                     l3249:
  3492                           
  3493                           ;main.c: 188: field_select = (field_select + 1) % 3;
  3494   002CBA  0E01               	movlw	1
  3495   002CBC  241A               	addwf	set_time@field_select^0,w,c
  3496   002CBE  6E01               	movwf	___awmod@dividend^0,c
  3497   002CC0  0E00               	movlw	0
  3498   002CC2  201B               	addwfc	(set_time@field_select+1)^0,w,c
  3499   002CC4  6E02               	movwf	(___awmod@dividend+1)^0,c
  3500   002CC6  0E00               	movlw	0
  3501   002CC8  6E04               	movwf	(___awmod@divisor+1)^0,c
  3502   002CCA  0E03               	movlw	3
  3503   002CCC  6E03               	movwf	___awmod@divisor^0,c
  3504   002CCE  EC48  F00C         	call	___awmod	;wreg free
  3505   002CD2  C001  F01A         	movff	?___awmod,set_time@field_select
  3506   002CD6  C002  F01B         	movff	?___awmod+1,set_time@field_select+1
  3507                           
  3508                           ;main.c: 189: break;
  3509   002CDA  D05E               	goto	l358
  3510   002CDC                     l3251:
  3511                           
  3512                           ;main.c: 191: {;main.c: 192: delay(5);
  3513   002CDC  0E00               	movlw	0
  3514   002CDE  6E02               	movwf	(delay@ms+1)^0,c
  3515   002CE0  0E05               	movlw	5
  3516   002CE2  6E01               	movwf	delay@ms^0,c
  3517   002CE4  ECCE  F00A         	call	_delay	;wreg free
  3518                           
  3519                           ;main.c: 194: if (read_switches(0) == 12)
  3520   002CE8  0E00               	movlw	0
  3521   002CEA  ECEC  F00A         	call	_read_switches
  3522   002CEE  0A0C               	xorlw	12
  3523   002CF0  A4D8               	btfss	status,2,c
  3524   002CF2  D036               	goto	l3263
  3525                           
  3526                           ;main.c: 195: exit_flag = 1;
  3527   002CF4  0E01               	movlw	1
  3528   002CF6                     L3:
  3529   002CF6  6E18               	movwf	set_time@exit_flag^0,c
  3530   002CF8  D04F               	goto	l358
  3531   002CFA                     l3255:
  3532                           
  3533                           ;main.c: 201: hour = (hour + 1) % 24;
  3534   002CFA  0E01               	movlw	1
  3535   002CFC  241C               	addwf	set_time@hour^0,w,c
  3536   002CFE  6E01               	movwf	___awmod@dividend^0,c
  3537   002D00  0E00               	movlw	0
  3538   002D02  201D               	addwfc	(set_time@hour+1)^0,w,c
  3539   002D04  6E02               	movwf	(___awmod@dividend+1)^0,c
  3540   002D06  0E00               	movlw	0
  3541   002D08  6E04               	movwf	(___awmod@divisor+1)^0,c
  3542   002D0A  0E18               	movlw	24
  3543   002D0C  6E03               	movwf	___awmod@divisor^0,c
  3544   002D0E  EC48  F00C         	call	___awmod	;wreg free
  3545   002D12  C001  F01C         	movff	?___awmod,set_time@hour
  3546   002D16  C002  F01D         	movff	?___awmod+1,set_time@hour+1
  3547                           
  3548                           ;main.c: 202: break;
  3549   002D1A  D03E               	goto	l358
  3550   002D1C                     l3257:
  3551                           
  3552                           ;main.c: 204: min = (min + 1) % 60;
  3553   002D1C  0E01               	movlw	1
  3554   002D1E  241E               	addwf	set_time@min^0,w,c
  3555   002D20  6E01               	movwf	___awmod@dividend^0,c
  3556   002D22  0E00               	movlw	0
  3557   002D24  201F               	addwfc	(set_time@min+1)^0,w,c
  3558   002D26  6E02               	movwf	(___awmod@dividend+1)^0,c
  3559   002D28  0E00               	movlw	0
  3560   002D2A  6E04               	movwf	(___awmod@divisor+1)^0,c
  3561   002D2C  0E3C               	movlw	60
  3562   002D2E  6E03               	movwf	___awmod@divisor^0,c
  3563   002D30  EC48  F00C         	call	___awmod	;wreg free
  3564   002D34  C001  F01E         	movff	?___awmod,set_time@min
  3565   002D38  C002  F01F         	movff	?___awmod+1,set_time@min+1
  3566                           
  3567                           ;main.c: 205: break;
  3568   002D3C  D02D               	goto	l358
  3569   002D3E                     l3259:
  3570                           
  3571                           ;main.c: 207: seconds = (seconds + 1) % 60;
  3572   002D3E  0E01               	movlw	1
  3573   002D40  2420               	addwf	set_time@seconds^0,w,c
  3574   002D42  6E01               	movwf	___awmod@dividend^0,c
  3575   002D44  0E00               	movlw	0
  3576   002D46  2021               	addwfc	(set_time@seconds+1)^0,w,c
  3577   002D48  6E02               	movwf	(___awmod@dividend+1)^0,c
  3578   002D4A  0E00               	movlw	0
  3579   002D4C  6E04               	movwf	(___awmod@divisor+1)^0,c
  3580   002D4E  0E3C               	movlw	60
  3581   002D50  6E03               	movwf	___awmod@divisor^0,c
  3582   002D52  EC48  F00C         	call	___awmod	;wreg free
  3583   002D56  C001  F020         	movff	?___awmod,set_time@seconds
  3584   002D5A  C002  F021         	movff	?___awmod+1,set_time@seconds+1
  3585                           
  3586                           ;main.c: 208: break;
  3587   002D5E  D01C               	goto	l358
  3588   002D60                     l3263:
  3589   002D60  C01A  F00B         	movff	set_time@field_select,??_set_time
  3590   002D64  C01B  F00C         	movff	set_time@field_select+1,??_set_time+1
  3591                           
  3592                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3593                           ; Switch size 1, requested type "simple"
  3594                           ; Number of cases is 1, Range of values is 0 to 0
  3595                           ; switch strategies available:
  3596                           ; Name         Instructions Cycles
  3597                           ; simple_byte            4     3 (average)
  3598                           ;	Chosen strategy is simple_byte
  3599   002D68  500C               	movf	(??_set_time+1)^0,w,c
  3600   002D6A  0A00               	xorlw	0	; case 0
  3601   002D6C  A4D8               	btfss	status,2,c
  3602   002D6E  D014               	goto	l358
  3603                           
  3604                           ; Switch size 1, requested type "simple"
  3605                           ; Number of cases is 3, Range of values is 0 to 2
  3606                           ; switch strategies available:
  3607                           ; Name         Instructions Cycles
  3608                           ; simple_byte           10     6 (average)
  3609                           ;	Chosen strategy is simple_byte
  3610   002D70  500B               	movf	??_set_time^0,w,c
  3611   002D72  0A00               	xorlw	0	; case 0
  3612   002D74  B4D8               	btfsc	status,2,c
  3613   002D76  D7C1               	goto	l3255
  3614   002D78  0A01               	xorlw	1	; case 1
  3615   002D7A  B4D8               	btfsc	status,2,c
  3616   002D7C  D7CF               	goto	l3257
  3617   002D7E  0A03               	xorlw	3	; case 2
  3618   002D80  B4D8               	btfsc	status,2,c
  3619   002D82  D7DD               	goto	l3259
  3620   002D84  D009               	goto	l358
  3621   002D86                     l3267:
  3622   002D86  0E01               	movlw	1
  3623   002D88  ECEC  F00A         	call	_read_switches
  3624                           
  3625                           ; Switch size 1, requested type "simple"
  3626                           ; Number of cases is 2, Range of values is 11 to 12
  3627                           ; switch strategies available:
  3628                           ; Name         Instructions Cycles
  3629                           ; simple_byte            7     4 (average)
  3630                           ;	Chosen strategy is simple_byte
  3631   002D8C  0A0B               	xorlw	11	; case 11
  3632   002D8E  B4D8               	btfsc	status,2,c
  3633   002D90  D794               	goto	l3249
  3634   002D92  0A07               	xorlw	7	; case 12
  3635   002D94  B4D8               	btfsc	status,2,c
  3636   002D96  D7A2               	goto	l3251
  3637   002D98                     l358:
  3638   002D98  5018               	movf	set_time@exit_flag^0,w,c
  3639   002D9A  B4D8               	btfsc	status,2,c
  3640   002D9C  D6D7               	goto	l3225
  3641                           
  3642                           ;main.c: 214: };main.c: 217: static unsigned char clock_reg[3];;main.c: 219: clock_reg[0
      +                          ] = read_ds1307(0x02);
  3643   002D9E  0E02               	movlw	2
  3644   002DA0  EC65  F00A         	call	_read_ds1307
  3645   002DA4  6E3F               	movwf	set_time@clock_reg^0,c
  3646                           
  3647                           ;main.c: 220: clock_reg[1] = read_ds1307(0x01);
  3648   002DA6  0E01               	movlw	1
  3649   002DA8  EC65  F00A         	call	_read_ds1307
  3650   002DAC  6E40               	movwf	(set_time@clock_reg+1)^0,c
  3651                           
  3652                           ;main.c: 221: clock_reg[2] = read_ds1307(0x00);
  3653   002DAE  0E00               	movlw	0
  3654   002DB0  EC65  F00A         	call	_read_ds1307
  3655   002DB4  6E41               	movwf	(set_time@clock_reg+2)^0,c
  3656                           
  3657                           ;main.c: 225: write_ds1307(0x02, (clock_reg[0] & 0xCF) | (hour / 10 << 4));
  3658   002DB6  C01C  F001         	movff	set_time@hour,___awdiv@dividend
  3659   002DBA  C01D  F002         	movff	set_time@hour+1,___awdiv@dividend+1
  3660   002DBE  0E00               	movlw	0
  3661   002DC0  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3662   002DC2  0E0A               	movlw	10
  3663   002DC4  6E03               	movwf	___awdiv@divisor^0,c
  3664   002DC6  ECBC  F00C         	call	___awdiv	;wreg free
  3665   002DCA  3A01               	swapf	?___awdiv^0,f,c
  3666   002DCC  0EF0               	movlw	240
  3667   002DCE  1601               	andwf	?___awdiv^0,f,c
  3668   002DD0  503F               	movf	set_time@clock_reg^0,w,c
  3669   002DD2  0BCF               	andlw	207
  3670   002DD4  1001               	iorwf	?___awdiv^0,w,c
  3671   002DD6  6E09               	movwf	write_ds1307@data^0,c
  3672   002DD8  0E02               	movlw	2
  3673   002DDA  EC0B  F00A         	call	_write_ds1307
  3674                           
  3675                           ;main.c: 226: write_ds1307(0x02, (clock_reg[0] & 0xF0) | (hour % 10));
  3676   002DDE  C01C  F001         	movff	set_time@hour,___awmod@dividend
  3677   002DE2  C01D  F002         	movff	set_time@hour+1,___awmod@dividend+1
  3678   002DE6  0E00               	movlw	0
  3679   002DE8  6E04               	movwf	(___awmod@divisor+1)^0,c
  3680   002DEA  0E0A               	movlw	10
  3681   002DEC  6E03               	movwf	___awmod@divisor^0,c
  3682   002DEE  EC48  F00C         	call	___awmod	;wreg free
  3683   002DF2  503F               	movf	set_time@clock_reg^0,w,c
  3684   002DF4  0BF0               	andlw	240
  3685   002DF6  1001               	iorwf	?___awmod^0,w,c
  3686   002DF8  6E09               	movwf	write_ds1307@data^0,c
  3687   002DFA  0E02               	movlw	2
  3688   002DFC  EC0B  F00A         	call	_write_ds1307
  3689                           
  3690                           ;main.c: 229: write_ds1307(0x01, (clock_reg[1] & 0x0F) | (min / 10 << 4));
  3691   002E00  C01E  F001         	movff	set_time@min,___awdiv@dividend
  3692   002E04  C01F  F002         	movff	set_time@min+1,___awdiv@dividend+1
  3693   002E08  0E00               	movlw	0
  3694   002E0A  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3695   002E0C  0E0A               	movlw	10
  3696   002E0E  6E03               	movwf	___awdiv@divisor^0,c
  3697   002E10  ECBC  F00C         	call	___awdiv	;wreg free
  3698   002E14  3A01               	swapf	?___awdiv^0,f,c
  3699   002E16  0EF0               	movlw	240
  3700   002E18  1601               	andwf	?___awdiv^0,f,c
  3701   002E1A  5040               	movf	(set_time@clock_reg+1)^0,w,c
  3702   002E1C  0B0F               	andlw	15
  3703   002E1E  1001               	iorwf	?___awdiv^0,w,c
  3704   002E20  6E09               	movwf	write_ds1307@data^0,c
  3705   002E22  0E01               	movlw	1
  3706   002E24  EC0B  F00A         	call	_write_ds1307
  3707                           
  3708                           ;main.c: 230: write_ds1307(0x01, (clock_reg[1] & 0xF0) | min % 10);
  3709   002E28  C01E  F001         	movff	set_time@min,___awmod@dividend
  3710   002E2C  C01F  F002         	movff	set_time@min+1,___awmod@dividend+1
  3711   002E30  0E00               	movlw	0
  3712   002E32  6E04               	movwf	(___awmod@divisor+1)^0,c
  3713   002E34  0E0A               	movlw	10
  3714   002E36  6E03               	movwf	___awmod@divisor^0,c
  3715   002E38  EC48  F00C         	call	___awmod	;wreg free
  3716   002E3C  5040               	movf	(set_time@clock_reg+1)^0,w,c
  3717   002E3E  0BF0               	andlw	240
  3718   002E40  1001               	iorwf	?___awmod^0,w,c
  3719   002E42  6E09               	movwf	write_ds1307@data^0,c
  3720   002E44  0E01               	movlw	1
  3721   002E46  EC0B  F00A         	call	_write_ds1307
  3722                           
  3723                           ;main.c: 233: write_ds1307(0x00, (clock_reg[2] & 0x0F) | (seconds / 10 << 4));
  3724   002E4A  C020  F001         	movff	set_time@seconds,___awdiv@dividend
  3725   002E4E  C021  F002         	movff	set_time@seconds+1,___awdiv@dividend+1
  3726   002E52  0E00               	movlw	0
  3727   002E54  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3728   002E56  0E0A               	movlw	10
  3729   002E58  6E03               	movwf	___awdiv@divisor^0,c
  3730   002E5A  ECBC  F00C         	call	___awdiv	;wreg free
  3731   002E5E  3A01               	swapf	?___awdiv^0,f,c
  3732   002E60  0EF0               	movlw	240
  3733   002E62  1601               	andwf	?___awdiv^0,f,c
  3734   002E64  5041               	movf	(set_time@clock_reg+2)^0,w,c
  3735   002E66  0B0F               	andlw	15
  3736   002E68  1001               	iorwf	?___awdiv^0,w,c
  3737   002E6A  6E09               	movwf	write_ds1307@data^0,c
  3738   002E6C  0E00               	movlw	0
  3739   002E6E  EC0B  F00A         	call	_write_ds1307
  3740                           
  3741                           ;main.c: 234: write_ds1307(0x00, (clock_reg[2] & 0xF0) | seconds % 10);
  3742   002E72  C020  F001         	movff	set_time@seconds,___awmod@dividend
  3743   002E76  C021  F002         	movff	set_time@seconds+1,___awmod@dividend+1
  3744   002E7A  0E00               	movlw	0
  3745   002E7C  6E04               	movwf	(___awmod@divisor+1)^0,c
  3746   002E7E  0E0A               	movlw	10
  3747   002E80  6E03               	movwf	___awmod@divisor^0,c
  3748   002E82  EC48  F00C         	call	___awmod	;wreg free
  3749   002E86  5041               	movf	(set_time@clock_reg+2)^0,w,c
  3750   002E88  0BF0               	andlw	240
  3751   002E8A  1001               	iorwf	?___awmod^0,w,c
  3752   002E8C  6E09               	movwf	write_ds1307@data^0,c
  3753   002E8E  0E00               	movlw	0
  3754   002E90  EC0B  F00A         	call	_write_ds1307
  3755                           
  3756                           ;main.c: 237: dummy = read_ds1307(0x00);
  3757   002E94  0E00               	movlw	0
  3758   002E96  EC65  F00A         	call	_read_ds1307
  3759   002E9A  6E19               	movwf	set_time@dummy^0,c
  3760                           
  3761                           ;main.c: 238: write_ds1307(0x00, dummy & 0x7F);
  3762   002E9C  5019               	movf	set_time@dummy^0,w,c
  3763   002E9E  0B7F               	andlw	127
  3764   002EA0  6E09               	movwf	write_ds1307@data^0,c
  3765   002EA2  0E00               	movlw	0
  3766   002EA4  EC0B  F00A         	call	_write_ds1307
  3767                           
  3768                           ;main.c: 240: clcd_write(0x01, 0);
  3769   002EA8  0E00               	movlw	0
  3770   002EAA  6E01               	movwf	clcd_write@control_bit^0,c
  3771   002EAC  0E01               	movlw	1
  3772   002EAE  EC3C  F00A         	call	_clcd_write
  3773                           
  3774                           ;main.c: 241: clcd_print("TIME UPDATED!", (0x80 + (1)));
  3775   002EB2  0E76               	movlw	low STR_14
  3776   002EB4  6E03               	movwf	clcd_print@data^0,c
  3777   002EB6  0E2F               	movlw	high STR_14
  3778   002EB8  6E04               	movwf	(clcd_print@data+1)^0,c
  3779   002EBA  0E81               	movlw	129
  3780   002EBC  6E05               	movwf	clcd_print@addr^0,c
  3781   002EBE  ECE7  F00B         	call	_clcd_print	;wreg free
  3782                           
  3783                           ;main.c: 242: delay(5);
  3784   002EC2  0E00               	movlw	0
  3785   002EC4  6E02               	movwf	(delay@ms+1)^0,c
  3786   002EC6  0E05               	movlw	5
  3787   002EC8  6E01               	movwf	delay@ms^0,c
  3788   002ECA  ECCE  F00A         	call	_delay	;wreg free
  3789                           
  3790                           ;main.c: 243: clcd_write(0x01, 0);
  3791   002ECE  0E00               	movlw	0
  3792   002ED0  6E01               	movwf	clcd_write@control_bit^0,c
  3793   002ED2  0E01               	movlw	1
  3794   002ED4  EC3C  F00A         	call	_clcd_write
  3795   002ED8  0012               	return		;funcret
  3796   002EDA                     __end_of_set_time:
  3797                           	callstack 0
  3798                           
  3799 ;; *************** function _write_ds1307 *****************
  3800 ;; Defined at:
  3801 ;;		line 50 in file "ds1307.c"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;  address         1    wreg     unsigned char 
  3804 ;;  data            1    8[COMRAM] unsigned char 
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;  address         1    9[COMRAM] unsigned char 
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  1    wreg      void 
  3809 ;; Registers used:
  3810 ;;		wreg, status,2, cstack
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3816 ;;      Params:         1       0       0       0       0       0       0
  3817 ;;      Locals:         1       0       0       0       0       0       0
  3818 ;;      Temps:          0       0       0       0       0       0       0
  3819 ;;      Totals:         2       0       0       0       0       0       0
  3820 ;;Total ram usage:        2 bytes
  3821 ;; Hardware stack levels used: 1
  3822 ;; Hardware stack levels required when called: 2
  3823 ;; This function calls:
  3824 ;;		_i2c_start
  3825 ;;		_i2c_stop
  3826 ;;		_i2c_write
  3827 ;; This function is called by:
  3828 ;;		_init_ds1307
  3829 ;;		_set_time
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           	psect	text13
  3834   001416                     __ptext13:
  3835                           	callstack 0
  3836   001416                     _write_ds1307:
  3837                           	callstack 26
  3838                           
  3839                           ;incstack = 0
  3840                           ;write_ds1307@address stored from wreg
  3841   001416  6E0A               	movwf	write_ds1307@address^0,c
  3842                           
  3843                           ;ds1307.c: 52: i2c_start();
  3844   001418  ECC7  F009         	call	_i2c_start	;wreg free
  3845                           
  3846                           ;ds1307.c: 53: i2c_write(0xD0);
  3847   00141C  0ED0               	movlw	208
  3848   00141E  ECD5  F009         	call	_i2c_write
  3849                           
  3850                           ;ds1307.c: 54: i2c_write(address);
  3851   001422  500A               	movf	write_ds1307@address^0,w,c
  3852   001424  ECD5  F009         	call	_i2c_write
  3853                           
  3854                           ;ds1307.c: 55: i2c_write(data);
  3855   001428  5009               	movf	write_ds1307@data^0,w,c
  3856   00142A  ECD5  F009         	call	_i2c_write
  3857                           
  3858                           ;ds1307.c: 56: i2c_stop();
  3859   00142E  ECCB  F009         	call	_i2c_stop	;wreg free
  3860   001432  0012               	return		;funcret
  3861   001434                     __end_of_write_ds1307:
  3862                           	callstack 0
  3863                           
  3864 ;; *************** function ___awmod *****************
  3865 ;; Defined at:
  3866 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awmod.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;  dividend        2    0[COMRAM] int 
  3869 ;;  divisor         2    2[COMRAM] int 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;  sign            1    5[COMRAM] unsigned char 
  3872 ;;  counter         1    4[COMRAM] unsigned char 
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  2    0[COMRAM] int 
  3875 ;; Registers used:
  3876 ;;		wreg, status,2, status,0
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3882 ;;      Params:         4       0       0       0       0       0       0
  3883 ;;      Locals:         2       0       0       0       0       0       0
  3884 ;;      Temps:          0       0       0       0       0       0       0
  3885 ;;      Totals:         6       0       0       0       0       0       0
  3886 ;;Total ram usage:        6 bytes
  3887 ;; Hardware stack levels used: 1
  3888 ;; This function calls:
  3889 ;;		Nothing
  3890 ;; This function is called by:
  3891 ;;		_set_time
  3892 ;;		_store_key_log
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           	psect	text14
  3897   001890                     __ptext14:
  3898                           	callstack 0
  3899   001890                     ___awmod:
  3900                           	callstack 29
  3901                           
  3902                           ;incstack = 0
  3903   001890  0E00               	movlw	0
  3904   001892  6E06               	movwf	___awmod@sign^0,c
  3905   001894  AE02               	btfss	(___awmod@dividend+1)^0,7,c
  3906   001896  D006               	goto	l2957
  3907   001898  6C01               	negf	___awmod@dividend^0,c
  3908   00189A  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3909   00189C  B0D8               	btfsc	status,0,c
  3910   00189E  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3911   0018A0  0E01               	movlw	1
  3912   0018A2  6E06               	movwf	___awmod@sign^0,c
  3913   0018A4                     l2957:
  3914   0018A4  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  3915   0018A6  D004               	goto	l2961
  3916   0018A8  6C03               	negf	___awmod@divisor^0,c
  3917   0018AA  1E04               	comf	(___awmod@divisor+1)^0,f,c
  3918   0018AC  B0D8               	btfsc	status,0,c
  3919   0018AE  2A04               	incf	(___awmod@divisor+1)^0,f,c
  3920   0018B0                     l2961:
  3921   0018B0  5003               	movf	___awmod@divisor^0,w,c
  3922   0018B2  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  3923   0018B4  B4D8               	btfsc	status,2,c
  3924   0018B6  D018               	goto	l2977
  3925   0018B8  0E01               	movlw	1
  3926   0018BA  6E05               	movwf	___awmod@counter^0,c
  3927   0018BC  D004               	goto	l2967
  3928   0018BE                     l2965:
  3929   0018BE  90D8               	bcf	status,0,c
  3930   0018C0  3603               	rlcf	___awmod@divisor^0,f,c
  3931   0018C2  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  3932   0018C4  2A05               	incf	___awmod@counter^0,f,c
  3933   0018C6                     l2967:
  3934   0018C6  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  3935   0018C8  D7FA               	goto	l2965
  3936   0018CA                     u1710:
  3937   0018CA  5003               	movf	___awmod@divisor^0,w,c
  3938   0018CC  5C01               	subwf	___awmod@dividend^0,w,c
  3939   0018CE  5004               	movf	(___awmod@divisor+1)^0,w,c
  3940   0018D0  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  3941   0018D2  A0D8               	btfss	status,0,c
  3942   0018D4  D004               	goto	l2973
  3943   0018D6  5003               	movf	___awmod@divisor^0,w,c
  3944   0018D8  5E01               	subwf	___awmod@dividend^0,f,c
  3945   0018DA  5004               	movf	(___awmod@divisor+1)^0,w,c
  3946   0018DC  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  3947   0018DE                     l2973:
  3948   0018DE  90D8               	bcf	status,0,c
  3949   0018E0  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  3950   0018E2  3203               	rrcf	___awmod@divisor^0,f,c
  3951   0018E4  2E05               	decfsz	___awmod@counter^0,f,c
  3952   0018E6  D7F1               	goto	u1710
  3953   0018E8                     l2977:
  3954   0018E8  5006               	movf	___awmod@sign^0,w,c
  3955   0018EA  B4D8               	btfsc	status,2,c
  3956   0018EC  D004               	goto	l2981
  3957   0018EE  6C01               	negf	___awmod@dividend^0,c
  3958   0018F0  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3959   0018F2  B0D8               	btfsc	status,0,c
  3960   0018F4  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3961   0018F6                     l2981:
  3962   0018F6  C001  F001         	movff	___awmod@dividend,?___awmod
  3963   0018FA  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3964   0018FE  0012               	return		;funcret
  3965   001900                     __end_of___awmod:
  3966                           	callstack 0
  3967                           
  3968 ;; *************** function ___awdiv *****************
  3969 ;; Defined at:
  3970 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awdiv.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;  dividend        2    0[COMRAM] int 
  3973 ;;  divisor         2    2[COMRAM] int 
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;  quotient        2    6[COMRAM] int 
  3976 ;;  sign            1    5[COMRAM] unsigned char 
  3977 ;;  counter         1    4[COMRAM] unsigned char 
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  2    0[COMRAM] int 
  3980 ;; Registers used:
  3981 ;;		wreg, status,2, status,0
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3987 ;;      Params:         4       0       0       0       0       0       0
  3988 ;;      Locals:         4       0       0       0       0       0       0
  3989 ;;      Temps:          0       0       0       0       0       0       0
  3990 ;;      Totals:         8       0       0       0       0       0       0
  3991 ;;Total ram usage:        8 bytes
  3992 ;; Hardware stack levels used: 1
  3993 ;; This function calls:
  3994 ;;		Nothing
  3995 ;; This function is called by:
  3996 ;;		_set_time
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           	psect	text15
  4001   001978                     __ptext15:
  4002                           	callstack 0
  4003   001978                     ___awdiv:
  4004                           	callstack 28
  4005                           
  4006                           ;incstack = 0
  4007   001978  0E00               	movlw	0
  4008   00197A  6E06               	movwf	___awdiv@sign^0,c
  4009   00197C  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  4010   00197E  D006               	goto	l2913
  4011   001980  6C03               	negf	___awdiv@divisor^0,c
  4012   001982  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  4013   001984  B0D8               	btfsc	status,0,c
  4014   001986  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  4015   001988  0E01               	movlw	1
  4016   00198A  6E06               	movwf	___awdiv@sign^0,c
  4017   00198C                     l2913:
  4018   00198C  AE02               	btfss	(___awdiv@dividend+1)^0,7,c
  4019   00198E  D006               	goto	l2919
  4020   001990  6C01               	negf	___awdiv@dividend^0,c
  4021   001992  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  4022   001994  B0D8               	btfsc	status,0,c
  4023   001996  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  4024   001998  0E01               	movlw	1
  4025   00199A  1A06               	xorwf	___awdiv@sign^0,f,c
  4026   00199C                     l2919:
  4027   00199C  0E00               	movlw	0
  4028   00199E  6E08               	movwf	(___awdiv@quotient+1)^0,c
  4029   0019A0  0E00               	movlw	0
  4030   0019A2  6E07               	movwf	___awdiv@quotient^0,c
  4031   0019A4  5003               	movf	___awdiv@divisor^0,w,c
  4032   0019A6  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  4033   0019A8  B4D8               	btfsc	status,2,c
  4034   0019AA  D01C               	goto	l2941
  4035   0019AC  0E01               	movlw	1
  4036   0019AE  6E05               	movwf	___awdiv@counter^0,c
  4037   0019B0  D004               	goto	l2927
  4038   0019B2                     l2925:
  4039   0019B2  90D8               	bcf	status,0,c
  4040   0019B4  3603               	rlcf	___awdiv@divisor^0,f,c
  4041   0019B6  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  4042   0019B8  2A05               	incf	___awdiv@counter^0,f,c
  4043   0019BA                     l2927:
  4044   0019BA  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  4045   0019BC  D7FA               	goto	l2925
  4046   0019BE                     u1650:
  4047   0019BE  90D8               	bcf	status,0,c
  4048   0019C0  3607               	rlcf	___awdiv@quotient^0,f,c
  4049   0019C2  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  4050   0019C4  5003               	movf	___awdiv@divisor^0,w,c
  4051   0019C6  5C01               	subwf	___awdiv@dividend^0,w,c
  4052   0019C8  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4053   0019CA  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  4054   0019CC  A0D8               	btfss	status,0,c
  4055   0019CE  D005               	goto	l2937
  4056   0019D0  5003               	movf	___awdiv@divisor^0,w,c
  4057   0019D2  5E01               	subwf	___awdiv@dividend^0,f,c
  4058   0019D4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4059   0019D6  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  4060   0019D8  8007               	bsf	___awdiv@quotient^0,0,c
  4061   0019DA                     l2937:
  4062   0019DA  90D8               	bcf	status,0,c
  4063   0019DC  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  4064   0019DE  3203               	rrcf	___awdiv@divisor^0,f,c
  4065   0019E0  2E05               	decfsz	___awdiv@counter^0,f,c
  4066   0019E2  D7ED               	goto	u1650
  4067   0019E4                     l2941:
  4068   0019E4  5006               	movf	___awdiv@sign^0,w,c
  4069   0019E6  B4D8               	btfsc	status,2,c
  4070   0019E8  D004               	goto	l2945
  4071   0019EA  6C07               	negf	___awdiv@quotient^0,c
  4072   0019EC  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  4073   0019EE  B0D8               	btfsc	status,0,c
  4074   0019F0  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  4075   0019F2                     l2945:
  4076   0019F2  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4077   0019F6  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4078   0019FA  0012               	return		;funcret
  4079   0019FC                     __end_of___awdiv:
  4080                           	callstack 0
  4081                           
  4082 ;; *************** function _print_to_console *****************
  4083 ;; Defined at:
  4084 ;;		line 238 in file "functions.c"
  4085 ;; Parameters:    Size  Location     Type
  4086 ;;  iter            2    3[COMRAM] int 
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;		None
  4089 ;; Return value:  Size  Location     Type
  4090 ;;                  1    wreg      void 
  4091 ;; Registers used:
  4092 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4093 ;; Tracked objects:
  4094 ;;		On entry : 0/0
  4095 ;;		On exit  : 0/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4098 ;;      Params:         2       0       0       0       0       0       0
  4099 ;;      Locals:         0       0       0       0       0       0       0
  4100 ;;      Temps:          0       0       0       0       0       0       0
  4101 ;;      Totals:         2       0       0       0       0       0       0
  4102 ;;Total ram usage:        2 bytes
  4103 ;; Hardware stack levels used: 1
  4104 ;; Hardware stack levels required when called: 4
  4105 ;; This function calls:
  4106 ;;		_putch
  4107 ;;		_read_external_eeprom
  4108 ;; This function is called by:
  4109 ;;		_go_to_menu
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text16
  4114   001B46                     __ptext16:
  4115                           	callstack 0
  4116   001B46                     _print_to_console:
  4117                           	callstack 25
  4118                           
  4119                           ;functions.c: 240: putch(read_external_eeprom(iter * 10 + 0));
  4120                           
  4121                           ;incstack = 0
  4122   001B46  5004               	movf	print_to_console@iter^0,w,c
  4123   001B48  0D0A               	mullw	10
  4124   001B4A  50F3               	movf	243,w,c
  4125   001B4C  EC50  F00A         	call	_read_external_eeprom
  4126   001B50  ECDB  F009         	call	_putch
  4127                           
  4128                           ;functions.c: 241: putch(read_external_eeprom(iter * 10 + 1));
  4129   001B54  5004               	movf	print_to_console@iter^0,w,c
  4130   001B56  0D0A               	mullw	10
  4131   001B58  28F3               	incf	243,w,c
  4132   001B5A  EC50  F00A         	call	_read_external_eeprom
  4133   001B5E  ECDB  F009         	call	_putch
  4134                           
  4135                           ;functions.c: 242: putch(':');
  4136   001B62  0E3A               	movlw	58
  4137   001B64  ECDB  F009         	call	_putch
  4138                           
  4139                           ;functions.c: 243: putch(read_external_eeprom(iter * 10 + 2));
  4140   001B68  5004               	movf	print_to_console@iter^0,w,c
  4141   001B6A  0D0A               	mullw	10
  4142   001B6C  50F3               	movf	243,w,c
  4143   001B6E  0F02               	addlw	2
  4144   001B70  EC50  F00A         	call	_read_external_eeprom
  4145   001B74  ECDB  F009         	call	_putch
  4146                           
  4147                           ;functions.c: 244: putch(read_external_eeprom(iter * 10 + 3));
  4148   001B78  5004               	movf	print_to_console@iter^0,w,c
  4149   001B7A  0D0A               	mullw	10
  4150   001B7C  50F3               	movf	243,w,c
  4151   001B7E  0F03               	addlw	3
  4152   001B80  EC50  F00A         	call	_read_external_eeprom
  4153   001B84  ECDB  F009         	call	_putch
  4154                           
  4155                           ;functions.c: 245: putch(':');
  4156   001B88  0E3A               	movlw	58
  4157   001B8A  ECDB  F009         	call	_putch
  4158                           
  4159                           ;functions.c: 246: putch(read_external_eeprom(iter * 10 + 4));
  4160   001B8E  5004               	movf	print_to_console@iter^0,w,c
  4161   001B90  0D0A               	mullw	10
  4162   001B92  50F3               	movf	243,w,c
  4163   001B94  0F04               	addlw	4
  4164   001B96  EC50  F00A         	call	_read_external_eeprom
  4165   001B9A  ECDB  F009         	call	_putch
  4166                           
  4167                           ;functions.c: 247: putch(read_external_eeprom(iter * 10 + 5));
  4168   001B9E  5004               	movf	print_to_console@iter^0,w,c
  4169   001BA0  0D0A               	mullw	10
  4170   001BA2  50F3               	movf	243,w,c
  4171   001BA4  0F05               	addlw	5
  4172   001BA6  EC50  F00A         	call	_read_external_eeprom
  4173   001BAA  ECDB  F009         	call	_putch
  4174                           
  4175                           ;functions.c: 248: putch(' ');
  4176   001BAE  0E20               	movlw	32
  4177   001BB0  ECDB  F009         	call	_putch
  4178                           
  4179                           ;functions.c: 249: putch(read_external_eeprom(iter * 10 + 6));
  4180   001BB4  5004               	movf	print_to_console@iter^0,w,c
  4181   001BB6  0D0A               	mullw	10
  4182   001BB8  50F3               	movf	243,w,c
  4183   001BBA  0F06               	addlw	6
  4184   001BBC  EC50  F00A         	call	_read_external_eeprom
  4185   001BC0  ECDB  F009         	call	_putch
  4186                           
  4187                           ;functions.c: 250: putch(read_external_eeprom(iter * 10 + 7));
  4188   001BC4  5004               	movf	print_to_console@iter^0,w,c
  4189   001BC6  0D0A               	mullw	10
  4190   001BC8  50F3               	movf	243,w,c
  4191   001BCA  0F07               	addlw	7
  4192   001BCC  EC50  F00A         	call	_read_external_eeprom
  4193   001BD0  ECDB  F009         	call	_putch
  4194                           
  4195                           ;functions.c: 251: putch(' ');
  4196   001BD4  0E20               	movlw	32
  4197   001BD6  ECDB  F009         	call	_putch
  4198                           
  4199                           ;functions.c: 252: putch(read_external_eeprom(iter * 10 + 8));
  4200   001BDA  5004               	movf	print_to_console@iter^0,w,c
  4201   001BDC  0D0A               	mullw	10
  4202   001BDE  50F3               	movf	243,w,c
  4203   001BE0  0F08               	addlw	8
  4204   001BE2  EC50  F00A         	call	_read_external_eeprom
  4205   001BE6  ECDB  F009         	call	_putch
  4206                           
  4207                           ;functions.c: 253: putch(read_external_eeprom(iter * 10 + 9));
  4208   001BEA  5004               	movf	print_to_console@iter^0,w,c
  4209   001BEC  0D0A               	mullw	10
  4210   001BEE  50F3               	movf	243,w,c
  4211   001BF0  0F09               	addlw	9
  4212   001BF2  EC50  F00A         	call	_read_external_eeprom
  4213   001BF6  ECDB  F009         	call	_putch
  4214                           
  4215                           ;functions.c: 254: putch('\n');
  4216   001BFA  0E0A               	movlw	10
  4217   001BFC  ECDB  F009         	call	_putch
  4218   001C00  0012               	return		;funcret
  4219   001C02                     __end_of_print_to_console:
  4220                           	callstack 0
  4221                           
  4222 ;; *************** function _putch *****************
  4223 ;; Defined at:
  4224 ;;		line 79 in file "uart.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;  byte            1    wreg     unsigned char 
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;  byte            1    0[COMRAM] unsigned char 
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  1    wreg      void 
  4231 ;; Registers used:
  4232 ;;		wreg
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4238 ;;      Params:         0       0       0       0       0       0       0
  4239 ;;      Locals:         1       0       0       0       0       0       0
  4240 ;;      Temps:          0       0       0       0       0       0       0
  4241 ;;      Totals:         1       0       0       0       0       0       0
  4242 ;;Total ram usage:        1 bytes
  4243 ;; Hardware stack levels used: 1
  4244 ;; This function calls:
  4245 ;;		Nothing
  4246 ;; This function is called by:
  4247 ;;		_go_to_menu
  4248 ;;		_print_to_console
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           	psect	text17
  4253   0013B6                     __ptext17:
  4254                           	callstack 0
  4255   0013B6                     _putch:
  4256                           	callstack 29
  4257                           
  4258                           ;incstack = 0
  4259                           ;putch@byte stored from wreg
  4260   0013B6  6E01               	movwf	putch@byte^0,c
  4261   0013B8                     
  4262                           ;uart.c: 83: while(!TXIF)
  4263   0013B8  A89E               	btfss	3998,4,c	;volatile
  4264   0013BA  D7FE               	goto	l2833
  4265                           
  4266                           ;uart.c: 86: };uart.c: 87: TXREG = byte;
  4267   0013BC  C001  FFAD         	movff	putch@byte,4013	;volatile
  4268   0013C0  0012               	return		;funcret
  4269   0013C2                     __end_of_putch:
  4270                           	callstack 0
  4271                           
  4272 ;; *************** function _change_password *****************
  4273 ;; Defined at:
  4274 ;;		line 95 in file "functions.c"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;		None
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;  wait            2   13[COMRAM] unsigned int 
  4279 ;;  j               2   24[COMRAM] int 
  4280 ;;  j               2   20[COMRAM] int 
  4281 ;;  j               2   22[COMRAM] int 
  4282 ;;  password        4   15[COMRAM] unsigned char [4]
  4283 ;;  confirm         4    9[COMRAM] unsigned char [4]
  4284 ;;  i               1   26[COMRAM] unsigned char 
  4285 ;;  exit_flag       1   19[COMRAM] unsigned char 
  4286 ;; Return value:  Size  Location     Type
  4287 ;;                  1    wreg      void 
  4288 ;; Registers used:
  4289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4290 ;; Tracked objects:
  4291 ;;		On entry : 0/0
  4292 ;;		On exit  : 0/0
  4293 ;;		Unchanged: 0/0
  4294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4295 ;;      Params:         0       0       0       0       0       0       0
  4296 ;;      Locals:        18       0       0       0       0       0       0
  4297 ;;      Temps:          2       0       0       0       0       0       0
  4298 ;;      Totals:        20       0       0       0       0       0       0
  4299 ;;Total ram usage:       20 bytes
  4300 ;; Hardware stack levels used: 1
  4301 ;; Hardware stack levels required when called: 3
  4302 ;; This function calls:
  4303 ;;		_clcd_print
  4304 ;;		_clcd_putch
  4305 ;;		_clcd_write
  4306 ;;		_delay
  4307 ;;		_read_switches
  4308 ;;		_write_external_eeprom
  4309 ;; This function is called by:
  4310 ;;		_go_to_menu
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text18
  4315   0025AA                     __ptext18:
  4316                           	callstack 0
  4317   0025AA                     _change_password:
  4318                           	callstack 26
  4319                           
  4320                           ;functions.c: 97: char exit_flag = 0;
  4321                           
  4322                           ;incstack = 0
  4323   0025AA  0E00               	movlw	0
  4324   0025AC  6E14               	movwf	change_password@exit_flag^0,c
  4325                           
  4326                           ;functions.c: 98: while (!exit_flag)
  4327   0025AE  D108               	goto	u1960
  4328   0025B0                     l3097:
  4329                           
  4330                           ;functions.c: 99: {;functions.c: 100: clcd_write(0x01, 0);
  4331   0025B0  0E00               	movlw	0
  4332   0025B2  6E01               	movwf	clcd_write@control_bit^0,c
  4333   0025B4  0E01               	movlw	1
  4334   0025B6  EC3C  F00A         	call	_clcd_write
  4335                           
  4336                           ;functions.c: 101: char i = 0;
  4337   0025BA  0E00               	movlw	0
  4338   0025BC  6E1B               	movwf	change_password@i^0,c
  4339                           
  4340                           ;functions.c: 102: char password[4] = {0}, confirm[4] = {0};
  4341   0025BE  0E00               	movlw	0
  4342   0025C0  6E10               	movwf	change_password@password^0,c
  4343   0025C2  0E00               	movlw	0
  4344   0025C4  6E11               	movwf	(change_password@password+1)^0,c
  4345   0025C6  0E00               	movlw	0
  4346   0025C8  6E12               	movwf	(change_password@password+2)^0,c
  4347   0025CA  0E00               	movlw	0
  4348   0025CC  6E13               	movwf	(change_password@password+3)^0,c
  4349   0025CE  0E00               	movlw	0
  4350   0025D0  6E0A               	movwf	change_password@confirm^0,c
  4351   0025D2  0E00               	movlw	0
  4352   0025D4  6E0B               	movwf	(change_password@confirm+1)^0,c
  4353   0025D6  0E00               	movlw	0
  4354   0025D8  6E0C               	movwf	(change_password@confirm+2)^0,c
  4355   0025DA  0E00               	movlw	0
  4356   0025DC  6E0D               	movwf	(change_password@confirm+3)^0,c
  4357                           
  4358                           ;functions.c: 103: while (i < 4)
  4359   0025DE  D02C               	goto	l3121
  4360   0025E0                     l3105:
  4361                           
  4362                           ;functions.c: 104: {;functions.c: 105: clcd_print("ENTER NEW PWD", (0x80 + (0)));
  4363   0025E0  0E68               	movlw	low STR_20
  4364   0025E2  6E03               	movwf	clcd_print@data^0,c
  4365   0025E4  0E2F               	movlw	high STR_20
  4366   0025E6  6E04               	movwf	(clcd_print@data+1)^0,c
  4367   0025E8  0E80               	movlw	128
  4368   0025EA  6E05               	movwf	clcd_print@addr^0,c
  4369   0025EC  ECE7  F00B         	call	_clcd_print	;wreg free
  4370                           
  4371                           ;functions.c: 107: switch (read_switches(1))
  4372   0025F0  D01A               	goto	l3119
  4373   0025F2                     l3107:
  4374                           
  4375                           ;functions.c: 110: {;functions.c: 111: clcd_putch('*', (0xC0 + (0 + i)));
  4376   0025F2  501B               	movf	change_password@i^0,w,c
  4377   0025F4  0FC0               	addlw	192
  4378   0025F6  6E04               	movwf	clcd_putch@addr^0,c
  4379   0025F8  0E2A               	movlw	42
  4380   0025FA  ECFF  F009         	call	_clcd_putch
  4381                           
  4382                           ;functions.c: 112: password[i++] = 1;
  4383   0025FE  501B               	movf	change_password@i^0,w,c
  4384   002600  0F10               	addlw	low change_password@password
  4385   002602  6ED9               	movwf	fsr2l,c
  4386   002604  6ADA               	clrf	fsr2h,c
  4387   002606  0E01               	movlw	1
  4388   002608  6EDF               	movwf	indf2,c
  4389   00260A                     l3111:
  4390   00260A  2A1B               	incf	change_password@i^0,f,c
  4391                           
  4392                           ;functions.c: 113: };functions.c: 114: break;
  4393   00260C  D015               	goto	l3121
  4394   00260E                     l3113:
  4395                           
  4396                           ;functions.c: 116: {;functions.c: 117: clcd_putch('*', (0xC0 + (0 + i)));
  4397   00260E  501B               	movf	change_password@i^0,w,c
  4398   002610  0FC0               	addlw	192
  4399   002612  6E04               	movwf	clcd_putch@addr^0,c
  4400   002614  0E2A               	movlw	42
  4401   002616  ECFF  F009         	call	_clcd_putch
  4402                           
  4403                           ;functions.c: 118: password[i++] = 0;
  4404   00261A  501B               	movf	change_password@i^0,w,c
  4405   00261C  0F10               	addlw	low change_password@password
  4406   00261E  6ED9               	movwf	fsr2l,c
  4407   002620  6ADA               	clrf	fsr2h,c
  4408   002622  6ADF               	clrf	indf2,c
  4409   002624  D7F2               	goto	l3111
  4410   002626                     l3119:
  4411   002626  0E01               	movlw	1
  4412   002628  ECEC  F00A         	call	_read_switches
  4413                           
  4414                           ; Switch size 1, requested type "simple"
  4415                           ; Number of cases is 2, Range of values is 11 to 12
  4416                           ; switch strategies available:
  4417                           ; Name         Instructions Cycles
  4418                           ; simple_byte            7     4 (average)
  4419                           ;	Chosen strategy is simple_byte
  4420   00262C  0A0B               	xorlw	11	; case 11
  4421   00262E  B4D8               	btfsc	status,2,c
  4422   002630  D7E0               	goto	l3107
  4423   002632  0A07               	xorlw	7	; case 12
  4424   002634  B4D8               	btfsc	status,2,c
  4425   002636  D7EB               	goto	l3113
  4426   002638                     l3121:
  4427   002638  0E03               	movlw	3
  4428   00263A  641B               	cpfsgt	change_password@i^0,c
  4429   00263C  D7D1               	goto	l3105
  4430                           
  4431                           ;functions.c: 121: };functions.c: 123: clcd_write(0x01, 0);
  4432   00263E  0E00               	movlw	0
  4433   002640  6E01               	movwf	clcd_write@control_bit^0,c
  4434   002642  0E01               	movlw	1
  4435   002644  EC3C  F00A         	call	_clcd_write
  4436                           
  4437                           ;functions.c: 124: i = 0;
  4438   002648  0E00               	movlw	0
  4439   00264A  6E1B               	movwf	change_password@i^0,c
  4440                           
  4441                           ;functions.c: 126: while (i < 4)
  4442   00264C  D02C               	goto	l3143
  4443   00264E                     l3127:
  4444                           
  4445                           ;functions.c: 127: {;functions.c: 128: clcd_print("RE-ENTER PWD!", (0x80 + (2)));
  4446   00264E  0E4C               	movlw	low STR_21
  4447   002650  6E03               	movwf	clcd_print@data^0,c
  4448   002652  0E2F               	movlw	high STR_21
  4449   002654  6E04               	movwf	(clcd_print@data+1)^0,c
  4450   002656  0E82               	movlw	130
  4451   002658  6E05               	movwf	clcd_print@addr^0,c
  4452   00265A  ECE7  F00B         	call	_clcd_print	;wreg free
  4453                           
  4454                           ;functions.c: 130: switch (read_switches(1))
  4455   00265E  D01A               	goto	l3141
  4456   002660                     l3129:
  4457                           
  4458                           ;functions.c: 133: {;functions.c: 134: clcd_putch('*', (0xC0 + (0 + i)));
  4459   002660  501B               	movf	change_password@i^0,w,c
  4460   002662  0FC0               	addlw	192
  4461   002664  6E04               	movwf	clcd_putch@addr^0,c
  4462   002666  0E2A               	movlw	42
  4463   002668  ECFF  F009         	call	_clcd_putch
  4464                           
  4465                           ;functions.c: 135: confirm[i++] = 1;
  4466   00266C  501B               	movf	change_password@i^0,w,c
  4467   00266E  0F0A               	addlw	low change_password@confirm
  4468   002670  6ED9               	movwf	fsr2l,c
  4469   002672  6ADA               	clrf	fsr2h,c
  4470   002674  0E01               	movlw	1
  4471   002676  6EDF               	movwf	indf2,c
  4472   002678                     l3133:
  4473   002678  2A1B               	incf	change_password@i^0,f,c
  4474                           
  4475                           ;functions.c: 136: };functions.c: 137: break;
  4476   00267A  D015               	goto	l3143
  4477   00267C                     l3135:
  4478                           
  4479                           ;functions.c: 139: {;functions.c: 140: clcd_putch('*', (0xC0 + (0 + i)));
  4480   00267C  501B               	movf	change_password@i^0,w,c
  4481   00267E  0FC0               	addlw	192
  4482   002680  6E04               	movwf	clcd_putch@addr^0,c
  4483   002682  0E2A               	movlw	42
  4484   002684  ECFF  F009         	call	_clcd_putch
  4485                           
  4486                           ;functions.c: 141: confirm[i++] = 0;
  4487   002688  501B               	movf	change_password@i^0,w,c
  4488   00268A  0F0A               	addlw	low change_password@confirm
  4489   00268C  6ED9               	movwf	fsr2l,c
  4490   00268E  6ADA               	clrf	fsr2h,c
  4491   002690  6ADF               	clrf	indf2,c
  4492   002692  D7F2               	goto	l3133
  4493   002694                     l3141:
  4494   002694  0E01               	movlw	1
  4495   002696  ECEC  F00A         	call	_read_switches
  4496                           
  4497                           ; Switch size 1, requested type "simple"
  4498                           ; Number of cases is 2, Range of values is 11 to 12
  4499                           ; switch strategies available:
  4500                           ; Name         Instructions Cycles
  4501                           ; simple_byte            7     4 (average)
  4502                           ;	Chosen strategy is simple_byte
  4503   00269A  0A0B               	xorlw	11	; case 11
  4504   00269C  B4D8               	btfsc	status,2,c
  4505   00269E  D7E0               	goto	l3129
  4506   0026A0  0A07               	xorlw	7	; case 12
  4507   0026A2  B4D8               	btfsc	status,2,c
  4508   0026A4  D7EB               	goto	l3135
  4509   0026A6                     l3143:
  4510   0026A6  0E03               	movlw	3
  4511   0026A8  641B               	cpfsgt	change_password@i^0,c
  4512   0026AA  D7D1               	goto	l3127
  4513                           
  4514                           ;functions.c: 144: };functions.c: 146: i = 0;
  4515   0026AC  0E00               	movlw	0
  4516   0026AE  6E1B               	movwf	change_password@i^0,c
  4517                           
  4518                           ;functions.c: 147: for (int j = 0; j < 4; j++)
  4519   0026B0  0E00               	movlw	0
  4520   0026B2  6E18               	movwf	(change_password@j+1)^0,c
  4521   0026B4  0E00               	movlw	0
  4522   0026B6  6E17               	movwf	change_password@j^0,c
  4523   0026B8                     l3151:
  4524                           
  4525                           ;functions.c: 148: {;functions.c: 149: if (confirm[j] == password[j])
  4526   0026B8  5017               	movf	change_password@j^0,w,c
  4527   0026BA  0F10               	addlw	low change_password@password
  4528   0026BC  6ED9               	movwf	fsr2l,c
  4529   0026BE  6ADA               	clrf	fsr2h,c
  4530   0026C0  5017               	movf	change_password@j^0,w,c
  4531   0026C2  0F0A               	addlw	low change_password@confirm
  4532   0026C4  6EE1               	movwf	fsr1l,c
  4533   0026C6  6AE2               	clrf	fsr1h,c
  4534   0026C8  50DE               	movf	postinc2,w,c
  4535   0026CA  18E6               	xorwf	postinc1,w,c
  4536   0026CC  B4D8               	btfsc	status,2,c
  4537                           
  4538                           ;functions.c: 150: i++;
  4539   0026CE  2A1B               	incf	change_password@i^0,f,c
  4540   0026D0  4A17               	infsnz	change_password@j^0,f,c
  4541   0026D2  2A18               	incf	(change_password@j+1)^0,f,c
  4542   0026D4  BE18               	btfsc	(change_password@j+1)^0,7,c
  4543   0026D6  D7F0               	goto	l3151
  4544   0026D8  5018               	movf	(change_password@j+1)^0,w,c
  4545   0026DA  E104               	bnz	u1920
  4546   0026DC  0E04               	movlw	4
  4547   0026DE  5C17               	subwf	change_password@j^0,w,c
  4548   0026E0  A0D8               	btfss	status,0,c
  4549   0026E2  D7EA               	goto	l3151
  4550   0026E4                     u1920:
  4551                           
  4552                           ;functions.c: 151: };functions.c: 153: clcd_write(0x01, 0);
  4553   0026E4  0E00               	movlw	0
  4554   0026E6  6E01               	movwf	clcd_write@control_bit^0,c
  4555   0026E8  0E01               	movlw	1
  4556   0026EA  EC3C  F00A         	call	_clcd_write
  4557                           
  4558                           ;functions.c: 155: if (i == 4)
  4559   0026EE  0E04               	movlw	4
  4560   0026F0  181B               	xorwf	change_password@i^0,w,c
  4561   0026F2  A4D8               	btfss	status,2,c
  4562   0026F4  D03B               	goto	l3185
  4563                           
  4564                           ;functions.c: 156: {;functions.c: 157: for (int j = 0; j < 4; j++)
  4565   0026F6  0E00               	movlw	0
  4566   0026F8  6E1A               	movwf	(change_password@j_615+1)^0,c
  4567   0026FA  0E00               	movlw	0
  4568   0026FC  6E19               	movwf	change_password@j_615^0,c
  4569   0026FE                     l3167:
  4570                           
  4571                           ;functions.c: 158: write_external_eeprom(100 + j, password[j]);
  4572   0026FE  5019               	movf	change_password@j_615^0,w,c
  4573   002700  0F10               	addlw	low change_password@password
  4574   002702  6ED9               	movwf	fsr2l,c
  4575   002704  6ADA               	clrf	fsr2h,c
  4576   002706  50DF               	movf	indf2,w,c
  4577   002708  6E02               	movwf	write_external_eeprom@data^0,c
  4578   00270A  5019               	movf	change_password@j_615^0,w,c
  4579   00270C  0F64               	addlw	100
  4580   00270E  EC7A  F00A         	call	_write_external_eeprom
  4581   002712  4A19               	infsnz	change_password@j_615^0,f,c
  4582   002714  2A1A               	incf	(change_password@j_615+1)^0,f,c
  4583   002716  BE1A               	btfsc	(change_password@j_615+1)^0,7,c
  4584   002718  D7F2               	goto	l3167
  4585   00271A  501A               	movf	(change_password@j_615+1)^0,w,c
  4586   00271C  E104               	bnz	u1940
  4587   00271E  0E04               	movlw	4
  4588   002720  5C19               	subwf	change_password@j_615^0,w,c
  4589   002722  A0D8               	btfss	status,0,c
  4590   002724  D7EC               	goto	l3167
  4591   002726                     u1940:
  4592                           
  4593                           ;functions.c: 160: clcd_write(0x01, 0);
  4594   002726  0E00               	movlw	0
  4595   002728  6E01               	movwf	clcd_write@control_bit^0,c
  4596   00272A  0E01               	movlw	1
  4597   00272C  EC3C  F00A         	call	_clcd_write
  4598                           
  4599                           ;functions.c: 162: clcd_print("PASSWORD STORED!", (0x80 + (0)));
  4600   002730  0EDB               	movlw	low STR_22
  4601   002732  6E03               	movwf	clcd_print@data^0,c
  4602   002734  0E2E               	movlw	high STR_22
  4603   002736  6E04               	movwf	(clcd_print@data+1)^0,c
  4604   002738  0E80               	movlw	128
  4605   00273A  6E05               	movwf	clcd_print@addr^0,c
  4606   00273C  ECE7  F00B         	call	_clcd_print	;wreg free
  4607                           
  4608                           ;functions.c: 163: clcd_print("SUCCESS!", (0xC0 + (1)));
  4609   002740  0ED6               	movlw	low STR_23
  4610   002742  6E03               	movwf	clcd_print@data^0,c
  4611   002744  0E2F               	movlw	high STR_23
  4612   002746  6E04               	movwf	(clcd_print@data+1)^0,c
  4613   002748  0EC1               	movlw	193
  4614   00274A  6E05               	movwf	clcd_print@addr^0,c
  4615   00274C  ECE7  F00B         	call	_clcd_print	;wreg free
  4616                           
  4617                           ;functions.c: 165: delay(10);
  4618   002750  0E00               	movlw	0
  4619   002752  6E02               	movwf	(delay@ms+1)^0,c
  4620   002754  0E0A               	movlw	10
  4621   002756  6E01               	movwf	delay@ms^0,c
  4622   002758  ECCE  F00A         	call	_delay	;wreg free
  4623                           
  4624                           ;functions.c: 166: clcd_write(0x01, 0);
  4625   00275C  0E00               	movlw	0
  4626   00275E  6E01               	movwf	clcd_write@control_bit^0,c
  4627   002760  0E01               	movlw	1
  4628   002762  EC3C  F00A         	call	_clcd_write
  4629                           
  4630                           ;functions.c: 168: exit_flag = 1;
  4631   002766  0E01               	movlw	1
  4632   002768  6E14               	movwf	change_password@exit_flag^0,c
  4633                           
  4634                           ;functions.c: 169: }
  4635   00276A  D010               	goto	l3187
  4636   00276C                     l3185:
  4637                           
  4638                           ;functions.c: 170: else;functions.c: 171: {;functions.c: 172: clcd_print("PWD NOT MATCHI
      +                          NG", (0x80 + (0)));
  4639   00276C  0EEC               	movlw	low STR_24
  4640   00276E  6E03               	movwf	clcd_print@data^0,c
  4641   002770  0E2E               	movlw	high STR_24
  4642   002772  6E04               	movwf	(clcd_print@data+1)^0,c
  4643   002774  0E80               	movlw	128
  4644   002776  6E05               	movwf	clcd_print@addr^0,c
  4645   002778  ECE7  F00B         	call	_clcd_print	;wreg free
  4646                           
  4647                           ;functions.c: 173: clcd_print("PLS RE-ENTER!", (0xC0 + (1)));
  4648   00277C  0E5A               	movlw	low STR_25
  4649   00277E  6E03               	movwf	clcd_print@data^0,c
  4650   002780  0E2F               	movlw	high STR_25
  4651   002782  6E04               	movwf	(clcd_print@data+1)^0,c
  4652   002784  0EC1               	movlw	193
  4653   002786  6E05               	movwf	clcd_print@addr^0,c
  4654   002788  ECE7  F00B         	call	_clcd_print	;wreg free
  4655   00278C                     l3187:
  4656                           
  4657                           ;functions.c: 174: };functions.c: 176: for (int j = 0; j < 10; j++)
  4658   00278C  0E00               	movlw	0
  4659   00278E  6E16               	movwf	(change_password@j_620+1)^0,c
  4660   002790  0E00               	movlw	0
  4661   002792  6E15               	movwf	change_password@j_620^0,c
  4662   002794                     l3193:
  4663                           
  4664                           ;functions.c: 177: for (unsigned int wait = 50000; wait--;);
  4665   002794  0EC3               	movlw	195
  4666   002796  6E0F               	movwf	(change_password@wait+1)^0,c
  4667   002798  0E50               	movlw	80
  4668   00279A  6E0E               	movwf	change_password@wait^0,c
  4669   00279C                     l3195:
  4670   00279C  060E               	decf	change_password@wait^0,f,c
  4671   00279E  A0D8               	btfss	status,0,c
  4672   0027A0  060F               	decf	(change_password@wait+1)^0,f,c
  4673   0027A2  280E               	incf	change_password@wait^0,w,c
  4674   0027A4  E1FB               	bnz	l3195
  4675   0027A6  280F               	incf	(change_password@wait+1)^0,w,c
  4676   0027A8  A4D8               	btfss	status,2,c
  4677   0027AA  D7F8               	goto	l3195
  4678   0027AC  4A15               	infsnz	change_password@j_620^0,f,c
  4679   0027AE  2A16               	incf	(change_password@j_620+1)^0,f,c
  4680   0027B0  BE16               	btfsc	(change_password@j_620+1)^0,7,c
  4681   0027B2  D7F0               	goto	l3193
  4682   0027B4  5016               	movf	(change_password@j_620+1)^0,w,c
  4683   0027B6  E104               	bnz	u1960
  4684   0027B8  0E0A               	movlw	10
  4685   0027BA  5C15               	subwf	change_password@j_620^0,w,c
  4686   0027BC  A0D8               	btfss	status,0,c
  4687   0027BE  D7EA               	goto	l3193
  4688   0027C0                     u1960:
  4689   0027C0  5014               	movf	change_password@exit_flag^0,w,c
  4690   0027C2  A4D8               	btfss	status,2,c
  4691   0027C4  0012               	return	
  4692   0027C6  D6F4               	goto	l3097
  4693   0027C8                     __end_of_change_password:
  4694                           	callstack 0
  4695                           
  4696 ;; *************** function _write_external_eeprom *****************
  4697 ;; Defined at:
  4698 ;;		line 5 in file "eeprom.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;  address         1    wreg     unsigned char 
  4701 ;;  data            1    1[COMRAM] unsigned char 
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;  address         1    4[COMRAM] unsigned char 
  4704 ;;  wait            2    2[COMRAM] unsigned int 
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  1    wreg      void 
  4707 ;; Registers used:
  4708 ;;		wreg, status,2, status,0, cstack
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4714 ;;      Params:         1       0       0       0       0       0       0
  4715 ;;      Locals:         3       0       0       0       0       0       0
  4716 ;;      Temps:          0       0       0       0       0       0       0
  4717 ;;      Totals:         4       0       0       0       0       0       0
  4718 ;;Total ram usage:        4 bytes
  4719 ;; Hardware stack levels used: 1
  4720 ;; Hardware stack levels required when called: 2
  4721 ;; This function calls:
  4722 ;;		_i2c_start
  4723 ;;		_i2c_stop
  4724 ;;		_i2c_write
  4725 ;; This function is called by:
  4726 ;;		_init_config
  4727 ;;		_change_password
  4728 ;;		_store_key_log
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           	psect	text19
  4733   0014F4                     __ptext19:
  4734                           	callstack 0
  4735   0014F4                     _write_external_eeprom:
  4736                           	callstack 27
  4737                           
  4738                           ;incstack = 0
  4739                           ;write_external_eeprom@address stored from wreg
  4740   0014F4  6E05               	movwf	write_external_eeprom@address^0,c
  4741                           
  4742                           ;eeprom.c: 7: i2c_start();
  4743   0014F6  ECC7  F009         	call	_i2c_start	;wreg free
  4744                           
  4745                           ;eeprom.c: 8: i2c_write(0xA0);
  4746   0014FA  0EA0               	movlw	160
  4747   0014FC  ECD5  F009         	call	_i2c_write
  4748                           
  4749                           ;eeprom.c: 9: i2c_write(address);
  4750   001500  5005               	movf	write_external_eeprom@address^0,w,c
  4751   001502  ECD5  F009         	call	_i2c_write
  4752                           
  4753                           ;eeprom.c: 10: i2c_write(data);
  4754   001506  5002               	movf	write_external_eeprom@data^0,w,c
  4755   001508  ECD5  F009         	call	_i2c_write
  4756                           
  4757                           ;eeprom.c: 11: i2c_stop();
  4758   00150C  ECCB  F009         	call	_i2c_stop	;wreg free
  4759                           
  4760                           ;eeprom.c: 12: for (unsigned int wait = 3000; wait--;);
  4761   001510  0E0B               	movlw	11
  4762   001512  6E04               	movwf	(write_external_eeprom@wait+1)^0,c
  4763   001514  0EB8               	movlw	184
  4764   001516  6E03               	movwf	write_external_eeprom@wait^0,c
  4765   001518                     l2849:
  4766   001518  0603               	decf	write_external_eeprom@wait^0,f,c
  4767   00151A  A0D8               	btfss	status,0,c
  4768   00151C  0604               	decf	(write_external_eeprom@wait+1)^0,f,c
  4769   00151E  2803               	incf	write_external_eeprom@wait^0,w,c
  4770   001520  E1FB               	bnz	l2849
  4771   001522  2804               	incf	(write_external_eeprom@wait+1)^0,w,c
  4772   001524  B4D8               	btfsc	status,2,c
  4773   001526  0012               	return	
  4774   001528  D7F7               	goto	l2849
  4775   00152A                     __end_of_write_external_eeprom:
  4776                           	callstack 0
  4777                           
  4778 ;; *************** function _delay *****************
  4779 ;; Defined at:
  4780 ;;		line 246 in file "main.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;  ms              2    0[COMRAM] int 
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;  wait            2    3[COMRAM] unsigned int 
  4785 ;;  i               2    5[COMRAM] int 
  4786 ;; Return value:  Size  Location     Type
  4787 ;;                  1    wreg      void 
  4788 ;; Registers used:
  4789 ;;		wreg, status,2, status,0
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4795 ;;      Params:         2       0       0       0       0       0       0
  4796 ;;      Locals:         4       0       0       0       0       0       0
  4797 ;;      Temps:          1       0       0       0       0       0       0
  4798 ;;      Totals:         7       0       0       0       0       0       0
  4799 ;;Total ram usage:        7 bytes
  4800 ;; Hardware stack levels used: 1
  4801 ;; This function calls:
  4802 ;;		Nothing
  4803 ;; This function is called by:
  4804 ;;		_go_to_menu
  4805 ;;		_main
  4806 ;;		_set_time
  4807 ;;		_change_password
  4808 ;;		_view_log
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           	psect	text20
  4813   00159C                     __ptext20:
  4814                           	callstack 0
  4815   00159C                     _delay:
  4816                           	callstack 28
  4817                           
  4818                           ;main.c: 248: for (int i = 0; i < ms; i++)
  4819                           
  4820                           ;incstack = 0
  4821   00159C  0E00               	movlw	0
  4822   00159E  6E07               	movwf	(delay@i+1)^0,c
  4823   0015A0  0E00               	movlw	0
  4824   0015A2  6E06               	movwf	delay@i^0,c
  4825   0015A4  D00E               	goto	l2803
  4826   0015A6                     l2797:
  4827                           
  4828                           ;main.c: 249: for (unsigned int wait = 50000; wait--;)
  4829   0015A6  0EC3               	movlw	195
  4830   0015A8  6E05               	movwf	(delay@wait+1)^0,c
  4831   0015AA  0E50               	movlw	80
  4832   0015AC  6E04               	movwf	delay@wait^0,c
  4833   0015AE                     l2799:
  4834   0015AE  0604               	decf	delay@wait^0,f,c
  4835   0015B0  A0D8               	btfss	status,0,c
  4836   0015B2  0605               	decf	(delay@wait+1)^0,f,c
  4837   0015B4  2804               	incf	delay@wait^0,w,c
  4838   0015B6  E1FB               	bnz	l2799
  4839   0015B8  2805               	incf	(delay@wait+1)^0,w,c
  4840   0015BA  A4D8               	btfss	status,2,c
  4841   0015BC  D7F8               	goto	l2799
  4842   0015BE  4A06               	infsnz	delay@i^0,f,c
  4843   0015C0  2A07               	incf	(delay@i+1)^0,f,c
  4844   0015C2                     l2803:
  4845   0015C2  5001               	movf	delay@ms^0,w,c
  4846   0015C4  5C06               	subwf	delay@i^0,w,c
  4847   0015C6  5007               	movf	(delay@i+1)^0,w,c
  4848   0015C8  0A80               	xorlw	128
  4849   0015CA  6E03               	movwf	??_delay^0,c
  4850   0015CC  5002               	movf	(delay@ms+1)^0,w,c
  4851   0015CE  0A80               	xorlw	128
  4852   0015D0  5803               	subwfb	??_delay^0,w,c
  4853   0015D2  B0D8               	btfsc	status,0,c
  4854   0015D4  0012               	return	
  4855   0015D6  D7E7               	goto	l2797
  4856   0015D8                     __end_of_delay:
  4857                           	callstack 0
  4858                           
  4859 ;; *************** function _get_time *****************
  4860 ;; Defined at:
  4861 ;;		line 100 in file "main.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;		None
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;		None
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  1    wreg      void 
  4868 ;; Registers used:
  4869 ;;		wreg, status,2, status,0, cstack
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4875 ;;      Params:         0       0       0       0       0       0       0
  4876 ;;      Locals:         0       0       0       0       0       0       0
  4877 ;;      Temps:          0       0       0       0       0       0       0
  4878 ;;      Totals:         0       0       0       0       0       0       0
  4879 ;;Total ram usage:        0 bytes
  4880 ;; Hardware stack levels used: 1
  4881 ;; Hardware stack levels required when called: 4
  4882 ;; This function calls:
  4883 ;;		_read_ds1307
  4884 ;; This function is called by:
  4885 ;;		_main
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           	psect	text21
  4890   001772                     __ptext21:
  4891                           	callstack 0
  4892   001772                     _get_time:
  4893                           	callstack 26
  4894                           
  4895                           ;main.c: 102: static unsigned char clock_reg[3];;main.c: 104: clock_reg[0] = read_ds1307
      +                          (0x02);
  4896                           
  4897                           ;incstack = 0
  4898   001772  0E02               	movlw	2
  4899   001774  EC65  F00A         	call	_read_ds1307
  4900   001778  6E42               	movwf	get_time@clock_reg^0,c
  4901                           
  4902                           ;main.c: 105: clock_reg[1] = read_ds1307(0x01);
  4903   00177A  0E01               	movlw	1
  4904   00177C  EC65  F00A         	call	_read_ds1307
  4905   001780  6E43               	movwf	(get_time@clock_reg+1)^0,c
  4906                           
  4907                           ;main.c: 106: clock_reg[2] = read_ds1307(0x00);
  4908   001782  0E00               	movlw	0
  4909   001784  EC65  F00A         	call	_read_ds1307
  4910   001788  6E44               	movwf	(get_time@clock_reg+2)^0,c
  4911                           
  4912                           ;main.c: 108: time[0] = '0' + ((clock_reg[0] >> 4) & 0x03);
  4913   00178A  3842               	swapf	get_time@clock_reg^0,w,c
  4914   00178C  0B0F               	andlw	15
  4915   00178E  0B03               	andlw	3
  4916   001790  0F30               	addlw	48
  4917   001792  6E4C               	movwf	_time^0,c
  4918                           
  4919                           ;main.c: 109: time[1] = '0' + (clock_reg[0] & 0x0F);
  4920   001794  5042               	movf	get_time@clock_reg^0,w,c
  4921   001796  0B0F               	andlw	15
  4922   001798  0F30               	addlw	48
  4923   00179A  6E4D               	movwf	(_time+1)^0,c
  4924                           
  4925                           ;main.c: 111: time[2] = ':';
  4926   00179C  0E3A               	movlw	58
  4927   00179E  6E4E               	movwf	(_time+2)^0,c
  4928                           
  4929                           ;main.c: 113: time[3] = '0' + ((clock_reg[1] >> 4) & 0x0F);
  4930   0017A0  3843               	swapf	(get_time@clock_reg+1)^0,w,c
  4931   0017A2  0B0F               	andlw	15
  4932   0017A4  0B0F               	andlw	15
  4933   0017A6  0F30               	addlw	48
  4934   0017A8  6E4F               	movwf	(_time+3)^0,c
  4935                           
  4936                           ;main.c: 114: time[4] = '0' + (clock_reg[1] & 0x0F);
  4937   0017AA  5043               	movf	(get_time@clock_reg+1)^0,w,c
  4938   0017AC  0B0F               	andlw	15
  4939   0017AE  0F30               	addlw	48
  4940   0017B0  6E50               	movwf	(_time+4)^0,c
  4941                           
  4942                           ;main.c: 116: time[5] = ':';
  4943   0017B2  0E3A               	movlw	58
  4944   0017B4  6E51               	movwf	(_time+5)^0,c
  4945                           
  4946                           ;main.c: 117: time[6] = '0' + ((clock_reg[2] >> 4) & 0x0F);
  4947   0017B6  3844               	swapf	(get_time@clock_reg+2)^0,w,c
  4948   0017B8  0B0F               	andlw	15
  4949   0017BA  0B0F               	andlw	15
  4950   0017BC  0F30               	addlw	48
  4951   0017BE  6E52               	movwf	(_time+6)^0,c
  4952                           
  4953                           ;main.c: 118: time[7] = '0' + (clock_reg[2] & 0x0F);
  4954   0017C0  5044               	movf	(get_time@clock_reg+2)^0,w,c
  4955   0017C2  0B0F               	andlw	15
  4956   0017C4  0F30               	addlw	48
  4957   0017C6  6E53               	movwf	(_time+7)^0,c
  4958                           
  4959                           ;main.c: 119: time[8] = '\0';
  4960   0017C8  0E00               	movlw	0
  4961   0017CA  6E54               	movwf	(_time+8)^0,c
  4962   0017CC  0012               	return		;funcret
  4963   0017CE                     __end_of_get_time:
  4964                           	callstack 0
  4965                           
  4966 ;; *************** function _read_ds1307 *****************
  4967 ;; Defined at:
  4968 ;;		line 59 in file "ds1307.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  address         1    wreg     unsigned char 
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;  address         1    1[COMRAM] unsigned char 
  4973 ;;  data            1    2[COMRAM] unsigned char 
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      unsigned char 
  4976 ;; Registers used:
  4977 ;;		wreg, status,2, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4983 ;;      Params:         0       0       0       0       0       0       0
  4984 ;;      Locals:         2       0       0       0       0       0       0
  4985 ;;      Temps:          0       0       0       0       0       0       0
  4986 ;;      Totals:         2       0       0       0       0       0       0
  4987 ;;Total ram usage:        2 bytes
  4988 ;; Hardware stack levels used: 1
  4989 ;; Hardware stack levels required when called: 3
  4990 ;; This function calls:
  4991 ;;		_i2c_read
  4992 ;;		_i2c_rep_start
  4993 ;;		_i2c_start
  4994 ;;		_i2c_stop
  4995 ;;		_i2c_write
  4996 ;; This function is called by:
  4997 ;;		_init_ds1307
  4998 ;;		_get_time
  4999 ;;		_set_time
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           	psect	text22
  5004   0014CA                     __ptext22:
  5005                           	callstack 0
  5006   0014CA                     _read_ds1307:
  5007                           	callstack 25
  5008                           
  5009                           ;incstack = 0
  5010                           ;read_ds1307@address stored from wreg
  5011   0014CA  6E02               	movwf	read_ds1307@address^0,c
  5012                           
  5013                           ;ds1307.c: 61: unsigned char data;;ds1307.c: 63: i2c_start();
  5014   0014CC  ECC7  F009         	call	_i2c_start	;wreg free
  5015                           
  5016                           ;ds1307.c: 64: i2c_write(0xD0);
  5017   0014D0  0ED0               	movlw	208
  5018   0014D2  ECD5  F009         	call	_i2c_write
  5019                           
  5020                           ;ds1307.c: 65: i2c_write(address);
  5021   0014D6  5002               	movf	read_ds1307@address^0,w,c
  5022   0014D8  ECD5  F009         	call	_i2c_write
  5023                           
  5024                           ;ds1307.c: 66: i2c_rep_start();
  5025   0014DC  ECC3  F009         	call	_i2c_rep_start	;wreg free
  5026                           
  5027                           ;ds1307.c: 67: i2c_write(0xD1);
  5028   0014E0  0ED1               	movlw	209
  5029   0014E2  ECD5  F009         	call	_i2c_write
  5030                           
  5031                           ;ds1307.c: 68: data = i2c_read();
  5032   0014E6  ECCF  F009         	call	_i2c_read	;wreg free
  5033   0014EA  6E03               	movwf	read_ds1307@data^0,c
  5034                           
  5035                           ;ds1307.c: 69: i2c_stop();
  5036   0014EC  ECCB  F009         	call	_i2c_stop	;wreg free
  5037                           
  5038                           ;ds1307.c: 71: return data;
  5039   0014F0  5003               	movf	read_ds1307@data^0,w,c
  5040   0014F2  0012               	return		;funcret
  5041   0014F4                     __end_of_read_ds1307:
  5042                           	callstack 0
  5043                           
  5044 ;; *************** function _get_speed *****************
  5045 ;; Defined at:
  5046 ;;		line 122 in file "main.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;		None
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;  adc_reg_val     2   56[COMRAM] unsigned short 
  5051 ;; Return value:  Size  Location     Type
  5052 ;;                  1    wreg      void 
  5053 ;; Registers used:
  5054 ;;		wreg, status,2, status,0, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5060 ;;      Params:         0       0       0       0       0       0       0
  5061 ;;      Locals:         2       0       0       0       0       0       0
  5062 ;;      Temps:          0       0       0       0       0       0       0
  5063 ;;      Totals:         2       0       0       0       0       0       0
  5064 ;;Total ram usage:        2 bytes
  5065 ;; Hardware stack levels used: 1
  5066 ;; Hardware stack levels required when called: 2
  5067 ;; This function calls:
  5068 ;;		___ftdiv
  5069 ;;		___ftmul
  5070 ;;		___fttol
  5071 ;;		___lwdiv
  5072 ;;		___lwmod
  5073 ;;		___lwtoft
  5074 ;;		_read_adc
  5075 ;; This function is called by:
  5076 ;;		_main
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           	psect	text23
  5081   0019FC                     __ptext23:
  5082                           	callstack 0
  5083   0019FC                     _get_speed:
  5084                           	callstack 28
  5085                           
  5086                           ;main.c: 124: unsigned short adc_reg_val = (float)read_adc(0x04) / 1023 * 99;
  5087                           
  5088                           ;incstack = 0
  5089   0019FC  0E00               	movlw	0
  5090   0019FE  6E1E               	movwf	___ftmul@f2^0,c
  5091   001A00  0EC6               	movlw	198
  5092   001A02  6E1F               	movwf	(___ftmul@f2+1)^0,c
  5093   001A04  0E42               	movlw	66
  5094   001A06  6E20               	movwf	(___ftmul@f2+2)^0,c
  5095   001A08  0EC0               	movlw	192
  5096   001A0A  6E0F               	movwf	___ftdiv@f2^0,c
  5097   001A0C  0E7F               	movlw	127
  5098   001A0E  6E10               	movwf	(___ftdiv@f2+1)^0,c
  5099   001A10  0E44               	movlw	68
  5100   001A12  6E11               	movwf	(___ftdiv@f2+2)^0,c
  5101   001A14  0E04               	movlw	4
  5102   001A16  ECB0  F00A         	call	_read_adc
  5103   001A1A  C001  F009         	movff	?_read_adc,___lwtoft@c
  5104   001A1E  C002  F00A         	movff	?_read_adc+1,___lwtoft@c+1
  5105   001A22  EC2A  F00A         	call	___lwtoft	;wreg free
  5106   001A26  C009  F00C         	movff	?___lwtoft,___ftdiv@f1
  5107   001A2A  C00A  F00D         	movff	?___lwtoft+1,___ftdiv@f1+1
  5108   001A2E  C00B  F00E         	movff	?___lwtoft+2,___ftdiv@f1+2
  5109   001A32  ECDA  F00E         	call	___ftdiv	;wreg free
  5110   001A36  C00C  F01B         	movff	?___ftdiv,___ftmul@f1
  5111   001A3A  C00D  F01C         	movff	?___ftdiv+1,___ftmul@f1+1
  5112   001A3E  C00E  F01D         	movff	?___ftdiv+2,___ftmul@f1+2
  5113   001A42  EC4D  F00F         	call	___ftmul	;wreg free
  5114   001A46  C01B  F02A         	movff	?___ftmul,___fttol@f1
  5115   001A4A  C01C  F02B         	movff	?___ftmul+1,___fttol@f1+1
  5116   001A4E  C01D  F02C         	movff	?___ftmul+2,___fttol@f1+2
  5117   001A52  EC01  F00E         	call	___fttol	;wreg free
  5118   001A56  C02A  F039         	movff	?___fttol,get_speed@adc_reg_val
  5119   001A5A  C02B  F03A         	movff	?___fttol+1,get_speed@adc_reg_val+1
  5120                           
  5121                           ;main.c: 125: speed[0] = '0' + adc_reg_val / 10;
  5122   001A5E  C039  F001         	movff	get_speed@adc_reg_val,___lwdiv@dividend
  5123   001A62  C03A  F002         	movff	get_speed@adc_reg_val+1,___lwdiv@dividend+1
  5124   001A66  0E00               	movlw	0
  5125   001A68  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  5126   001A6A  0E0A               	movlw	10
  5127   001A6C  6E03               	movwf	___lwdiv@divisor^0,c
  5128   001A6E  EC90  F00B         	call	___lwdiv	;wreg free
  5129   001A72  5001               	movf	?___lwdiv^0,w,c
  5130   001A74  0F30               	addlw	48
  5131   001A76  6E55               	movwf	_speed^0,c
  5132                           
  5133                           ;main.c: 126: speed[1] = '0' + adc_reg_val % 10;
  5134   001A78  C039  F001         	movff	get_speed@adc_reg_val,___lwmod@dividend
  5135   001A7C  C03A  F002         	movff	get_speed@adc_reg_val+1,___lwmod@dividend+1
  5136   001A80  0E00               	movlw	0
  5137   001A82  6E04               	movwf	(___lwmod@divisor+1)^0,c
  5138   001A84  0E0A               	movlw	10
  5139   001A86  6E03               	movwf	___lwmod@divisor^0,c
  5140   001A88  EC2A  F00B         	call	___lwmod	;wreg free
  5141   001A8C  5001               	movf	?___lwmod^0,w,c
  5142   001A8E  0F30               	addlw	48
  5143   001A90  6E56               	movwf	(_speed+1)^0,c
  5144                           
  5145                           ;main.c: 127: speed[2] = '\0';
  5146   001A92  0E00               	movlw	0
  5147   001A94  6E57               	movwf	(_speed+2)^0,c
  5148   001A96  0012               	return		;funcret
  5149   001A98                     __end_of_get_speed:
  5150                           	callstack 0
  5151                           
  5152 ;; *************** function _read_adc *****************
  5153 ;; Defined at:
  5154 ;;		line 44 in file "adc.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;  channel         1    wreg     unsigned char 
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;  channel         1    6[COMRAM] unsigned char 
  5159 ;;  reg_val         2    4[COMRAM] unsigned short 
  5160 ;; Return value:  Size  Location     Type
  5161 ;;                  2    0[COMRAM] unsigned short 
  5162 ;; Registers used:
  5163 ;;		wreg, status,2, status,0
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5169 ;;      Params:         2       0       0       0       0       0       0
  5170 ;;      Locals:         3       0       0       0       0       0       0
  5171 ;;      Temps:          2       0       0       0       0       0       0
  5172 ;;      Totals:         7       0       0       0       0       0       0
  5173 ;;Total ram usage:        7 bytes
  5174 ;; Hardware stack levels used: 1
  5175 ;; This function calls:
  5176 ;;		Nothing
  5177 ;; This function is called by:
  5178 ;;		_get_speed
  5179 ;; This function uses a non-reentrant model
  5180 ;;
  5181                           
  5182                           	psect	text24
  5183   001560                     __ptext24:
  5184                           	callstack 0
  5185   001560                     _read_adc:
  5186                           	callstack 29
  5187                           
  5188                           ;incstack = 0
  5189                           ;read_adc@channel stored from wreg
  5190   001560  6E07               	movwf	read_adc@channel^0,c
  5191                           
  5192                           ;adc.c: 46: unsigned short reg_val;;adc.c: 50: ADCON0 = (ADCON0 & 0xC3) | (channel << 2)
      +                          ;
  5193   001562  C007  F003         	movff	read_adc@channel,??_read_adc
  5194   001566  90D8               	bcf	status,0,c
  5195   001568  3603               	rlcf	??_read_adc^0,f,c
  5196   00156A  90D8               	bcf	status,0,c
  5197   00156C  3603               	rlcf	??_read_adc^0,f,c
  5198   00156E  50C2               	movf	194,w,c	;volatile
  5199   001570  0BC3               	andlw	195
  5200   001572  1003               	iorwf	??_read_adc^0,w,c
  5201   001574  6EC2               	movwf	194,c	;volatile
  5202                           
  5203                           ;adc.c: 53: GO = 1;
  5204   001576  82C2               	bsf	4034,1,c	;volatile
  5205   001578                     l36:
  5206   001578  B2C2               	btfsc	4034,1,c	;volatile
  5207   00157A  D7FE               	goto	l36
  5208                           
  5209                           ;adc.c: 55: reg_val = (ADRESH << 8) | ADRESL;
  5210   00157C  50C3               	movf	195,w,c	;volatile
  5211   00157E  CFC4 F003          	movff	4036,??_read_adc	;volatile
  5212   001582  6A04               	clrf	(??_read_adc+1)^0,c
  5213   001584  C003  F004         	movff	??_read_adc,??_read_adc+1
  5214   001588  6A03               	clrf	??_read_adc^0,c
  5215   00158A  1003               	iorwf	??_read_adc^0,w,c
  5216   00158C  6E05               	movwf	read_adc@reg_val^0,c
  5217   00158E  5004               	movf	(??_read_adc+1)^0,w,c
  5218   001590  6E06               	movwf	(read_adc@reg_val+1)^0,c
  5219                           
  5220                           ;adc.c: 57: return reg_val;
  5221   001592  C005  F001         	movff	read_adc@reg_val,?_read_adc
  5222   001596  C006  F002         	movff	read_adc@reg_val+1,?_read_adc+1
  5223   00159A  0012               	return		;funcret
  5224   00159C                     __end_of_read_adc:
  5225                           	callstack 0
  5226                           
  5227 ;; *************** function ___lwtoft *****************
  5228 ;; Defined at:
  5229 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwtoft.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;  c               2    8[COMRAM] unsigned int 
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;		None
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  3    8[COMRAM] float 
  5236 ;; Registers used:
  5237 ;;		wreg, status,2, status,0, cstack
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5243 ;;      Params:         3       0       0       0       0       0       0
  5244 ;;      Locals:         0       0       0       0       0       0       0
  5245 ;;      Temps:          0       0       0       0       0       0       0
  5246 ;;      Totals:         3       0       0       0       0       0       0
  5247 ;;Total ram usage:        3 bytes
  5248 ;; Hardware stack levels used: 1
  5249 ;; Hardware stack levels required when called: 1
  5250 ;; This function calls:
  5251 ;;		___ftpack
  5252 ;; This function is called by:
  5253 ;;		_get_speed
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text25
  5258   001454                     __ptext25:
  5259                           	callstack 0
  5260   001454                     ___lwtoft:
  5261                           	callstack 28
  5262                           
  5263                           ;incstack = 0
  5264   001454  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  5265   001458  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  5266   00145C  6A03               	clrf	(___ftpack@arg+2)^0,c
  5267   00145E  0E8E               	movlw	142
  5268   001460  6E04               	movwf	___ftpack@exp^0,c
  5269   001462  0E00               	movlw	0
  5270   001464  6E05               	movwf	___ftpack@sign^0,c
  5271   001466  EC4C  F00D         	call	___ftpack	;wreg free
  5272   00146A  C001  F009         	movff	?___ftpack,?___lwtoft
  5273   00146E  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  5274   001472  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  5275   001476  0012               	return		;funcret
  5276   001478                     __end_of___lwtoft:
  5277                           	callstack 0
  5278                           
  5279 ;; *************** function ___lwmod *****************
  5280 ;; Defined at:
  5281 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  dividend        2    0[COMRAM] unsigned int 
  5284 ;;  divisor         2    2[COMRAM] unsigned int 
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;  counter         1    4[COMRAM] unsigned char 
  5287 ;; Return value:  Size  Location     Type
  5288 ;;                  2    0[COMRAM] unsigned int 
  5289 ;; Registers used:
  5290 ;;		wreg, status,2, status,0
  5291 ;; Tracked objects:
  5292 ;;		On entry : 0/0
  5293 ;;		On exit  : 0/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5296 ;;      Params:         4       0       0       0       0       0       0
  5297 ;;      Locals:         1       0       0       0       0       0       0
  5298 ;;      Temps:          0       0       0       0       0       0       0
  5299 ;;      Totals:         5       0       0       0       0       0       0
  5300 ;;Total ram usage:        5 bytes
  5301 ;; Hardware stack levels used: 1
  5302 ;; This function calls:
  5303 ;;		Nothing
  5304 ;; This function is called by:
  5305 ;;		_get_speed
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309                           	psect	text26
  5310   001654                     __ptext26:
  5311                           	callstack 0
  5312   001654                     ___lwmod:
  5313                           	callstack 29
  5314                           
  5315                           ;incstack = 0
  5316   001654  5003               	movf	___lwmod@divisor^0,w,c
  5317   001656  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  5318   001658  B4D8               	btfsc	status,2,c
  5319   00165A  D018               	goto	l1117
  5320   00165C  0E01               	movlw	1
  5321   00165E  6E05               	movwf	___lwmod@counter^0,c
  5322   001660  D004               	goto	l3485
  5323   001662                     l3483:
  5324   001662  90D8               	bcf	status,0,c
  5325   001664  3603               	rlcf	___lwmod@divisor^0,f,c
  5326   001666  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  5327   001668  2A05               	incf	___lwmod@counter^0,f,c
  5328   00166A                     l3485:
  5329   00166A  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  5330   00166C  D7FA               	goto	l3483
  5331   00166E                     u2250:
  5332   00166E  5003               	movf	___lwmod@divisor^0,w,c
  5333   001670  5C01               	subwf	___lwmod@dividend^0,w,c
  5334   001672  5004               	movf	(___lwmod@divisor+1)^0,w,c
  5335   001674  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  5336   001676  A0D8               	btfss	status,0,c
  5337   001678  D004               	goto	l3491
  5338   00167A  5003               	movf	___lwmod@divisor^0,w,c
  5339   00167C  5E01               	subwf	___lwmod@dividend^0,f,c
  5340   00167E  5004               	movf	(___lwmod@divisor+1)^0,w,c
  5341   001680  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  5342   001682                     l3491:
  5343   001682  90D8               	bcf	status,0,c
  5344   001684  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  5345   001686  3203               	rrcf	___lwmod@divisor^0,f,c
  5346   001688  2E05               	decfsz	___lwmod@counter^0,f,c
  5347   00168A  D7F1               	goto	u2250
  5348   00168C                     l1117:
  5349   00168C  C001  F001         	movff	___lwmod@dividend,?___lwmod
  5350   001690  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  5351   001694  0012               	return		;funcret
  5352   001696                     __end_of___lwmod:
  5353                           	callstack 0
  5354                           
  5355 ;; *************** function ___lwdiv *****************
  5356 ;; Defined at:
  5357 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  dividend        2    0[COMRAM] unsigned int 
  5360 ;;  divisor         2    2[COMRAM] unsigned int 
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;  quotient        2    4[COMRAM] unsigned int 
  5363 ;;  counter         1    6[COMRAM] unsigned char 
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  2    0[COMRAM] unsigned int 
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5373 ;;      Params:         4       0       0       0       0       0       0
  5374 ;;      Locals:         3       0       0       0       0       0       0
  5375 ;;      Temps:          0       0       0       0       0       0       0
  5376 ;;      Totals:         7       0       0       0       0       0       0
  5377 ;;Total ram usage:        7 bytes
  5378 ;; Hardware stack levels used: 1
  5379 ;; This function calls:
  5380 ;;		Nothing
  5381 ;; This function is called by:
  5382 ;;		_get_speed
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           	psect	text27
  5387   001720                     __ptext27:
  5388                           	callstack 0
  5389   001720                     ___lwdiv:
  5390                           	callstack 29
  5391                           
  5392                           ;incstack = 0
  5393   001720  0E00               	movlw	0
  5394   001722  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  5395   001724  0E00               	movlw	0
  5396   001726  6E05               	movwf	___lwdiv@quotient^0,c
  5397   001728  5003               	movf	___lwdiv@divisor^0,w,c
  5398   00172A  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5399   00172C  B4D8               	btfsc	status,2,c
  5400   00172E  D01C               	goto	l1107
  5401   001730  0E01               	movlw	1
  5402   001732  6E07               	movwf	___lwdiv@counter^0,c
  5403   001734  D004               	goto	l3465
  5404   001736                     l3463:
  5405   001736  90D8               	bcf	status,0,c
  5406   001738  3603               	rlcf	___lwdiv@divisor^0,f,c
  5407   00173A  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5408   00173C  2A07               	incf	___lwdiv@counter^0,f,c
  5409   00173E                     l3465:
  5410   00173E  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  5411   001740  D7FA               	goto	l3463
  5412   001742                     u2220:
  5413   001742  90D8               	bcf	status,0,c
  5414   001744  3605               	rlcf	___lwdiv@quotient^0,f,c
  5415   001746  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5416   001748  5003               	movf	___lwdiv@divisor^0,w,c
  5417   00174A  5C01               	subwf	___lwdiv@dividend^0,w,c
  5418   00174C  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  5419   00174E  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5420   001750  A0D8               	btfss	status,0,c
  5421   001752  D005               	goto	l3475
  5422   001754  5003               	movf	___lwdiv@divisor^0,w,c
  5423   001756  5E01               	subwf	___lwdiv@dividend^0,f,c
  5424   001758  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  5425   00175A  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5426   00175C  8005               	bsf	___lwdiv@quotient^0,0,c
  5427   00175E                     l3475:
  5428   00175E  90D8               	bcf	status,0,c
  5429   001760  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5430   001762  3203               	rrcf	___lwdiv@divisor^0,f,c
  5431   001764  2E07               	decfsz	___lwdiv@counter^0,f,c
  5432   001766  D7ED               	goto	u2220
  5433   001768                     l1107:
  5434   001768  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5435   00176C  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5436   001770  0012               	return		;funcret
  5437   001772                     __end_of___lwdiv:
  5438                           	callstack 0
  5439                           
  5440 ;; *************** function ___fttol *****************
  5441 ;; Defined at:
  5442 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\fttol.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;  f1              3   41[COMRAM] float 
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;  lval            4   51[COMRAM] unsigned long 
  5447 ;;  exp1            1   55[COMRAM] unsigned char 
  5448 ;;  sign1           1   50[COMRAM] unsigned char 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  4   41[COMRAM] long 
  5451 ;; Registers used:
  5452 ;;		wreg, status,2, status,0
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5458 ;;      Params:         4       0       0       0       0       0       0
  5459 ;;      Locals:         6       0       0       0       0       0       0
  5460 ;;      Temps:          5       0       0       0       0       0       0
  5461 ;;      Totals:        15       0       0       0       0       0       0
  5462 ;;Total ram usage:       15 bytes
  5463 ;; Hardware stack levels used: 1
  5464 ;; This function calls:
  5465 ;;		Nothing
  5466 ;; This function is called by:
  5467 ;;		_get_speed
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           	psect	text28
  5472   001C02                     __ptext28:
  5473                           	callstack 0
  5474   001C02                     ___fttol:
  5475                           	callstack 29
  5476                           
  5477                           ;incstack = 0
  5478   001C02  C02C  F02E         	movff	___fttol@f1+2,??___fttol
  5479   001C06  6A2F               	clrf	(??___fttol+1)^0,c
  5480   001C08  6A30               	clrf	(??___fttol+2)^0,c
  5481   001C0A  342B               	rlcf	(___fttol@f1+1)^0,w,c
  5482   001C0C  362E               	rlcf	??___fttol^0,f,c
  5483   001C0E  E301               	bnc	u2131
  5484   001C10  802F               	bsf	(??___fttol+1)^0,0,c
  5485   001C12                     u2131:
  5486   001C12  502E               	movf	??___fttol^0,w,c
  5487   001C14  6E38               	movwf	___fttol@exp1^0,c
  5488   001C16  5038               	movf	___fttol@exp1^0,w,c
  5489   001C18  A4D8               	btfss	status,2,c
  5490   001C1A  D009               	goto	l3417
  5491   001C1C                     u2140:
  5492   001C1C  0E00               	movlw	0
  5493   001C1E  6E2A               	movwf	?___fttol^0,c
  5494   001C20  0E00               	movlw	0
  5495   001C22  6E2B               	movwf	(?___fttol+1)^0,c
  5496   001C24  0E00               	movlw	0
  5497   001C26  6E2C               	movwf	(?___fttol+2)^0,c
  5498   001C28  0E00               	movlw	0
  5499   001C2A  6E2D               	movwf	(?___fttol+3)^0,c
  5500   001C2C  0012               	return	
  5501   001C2E                     l3417:
  5502   001C2E  0E17               	movlw	23
  5503   001C30  6E2E               	movwf	??___fttol^0,c
  5504   001C32  C02A  F02F         	movff	___fttol@f1,??___fttol+1
  5505   001C36  C02B  F030         	movff	___fttol@f1+1,??___fttol+2
  5506   001C3A  C02C  F031         	movff	___fttol@f1+2,??___fttol+3
  5507   001C3E  282E               	incf	??___fttol^0,w,c
  5508   001C40  6E32               	movwf	(??___fttol+4)^0,c
  5509   001C42  D004               	goto	u2150
  5510   001C44                     u2155:
  5511   001C44  90D8               	bcf	status,0,c
  5512   001C46  3231               	rrcf	(??___fttol+3)^0,f,c
  5513   001C48  3230               	rrcf	(??___fttol+2)^0,f,c
  5514   001C4A  322F               	rrcf	(??___fttol+1)^0,f,c
  5515   001C4C                     u2150:
  5516   001C4C  2E32               	decfsz	(??___fttol+4)^0,f,c
  5517   001C4E  D7FA               	goto	u2155
  5518   001C50  502F               	movf	(??___fttol+1)^0,w,c
  5519   001C52  6E33               	movwf	___fttol@sign1^0,c
  5520   001C54  8E2B               	bsf	(___fttol@f1+1)^0,7,c
  5521   001C56  0EFF               	movlw	255
  5522   001C58  162A               	andwf	___fttol@f1^0,f,c
  5523   001C5A  0EFF               	movlw	255
  5524   001C5C  162B               	andwf	(___fttol@f1+1)^0,f,c
  5525   001C5E  0E00               	movlw	0
  5526   001C60  162C               	andwf	(___fttol@f1+2)^0,f,c
  5527   001C62  502A               	movf	___fttol@f1^0,w,c
  5528   001C64  6E34               	movwf	___fttol@lval^0,c
  5529   001C66  502B               	movf	(___fttol@f1+1)^0,w,c
  5530   001C68  6E35               	movwf	(___fttol@lval+1)^0,c
  5531   001C6A  502C               	movf	(___fttol@f1+2)^0,w,c
  5532   001C6C  6E36               	movwf	(___fttol@lval+2)^0,c
  5533   001C6E  6A37               	clrf	(___fttol@lval+3)^0,c
  5534   001C70  0E8E               	movlw	142
  5535   001C72  5E38               	subwf	___fttol@exp1^0,f,c
  5536   001C74  AE38               	btfss	___fttol@exp1^0,7,c
  5537   001C76  D00D               	goto	l3439
  5538   001C78  5038               	movf	___fttol@exp1^0,w,c
  5539   001C7A  0A80               	xorlw	128
  5540   001C7C  0F8F               	addlw	143
  5541   001C7E  A0D8               	btfss	status,0,c
  5542   001C80  D7CD               	goto	u2140
  5543   001C82                     l3435:
  5544   001C82  90D8               	bcf	status,0,c
  5545   001C84  3237               	rrcf	(___fttol@lval+3)^0,f,c
  5546   001C86  3236               	rrcf	(___fttol@lval+2)^0,f,c
  5547   001C88  3235               	rrcf	(___fttol@lval+1)^0,f,c
  5548   001C8A  3234               	rrcf	___fttol@lval^0,f,c
  5549   001C8C  3E38               	incfsz	___fttol@exp1^0,f,c
  5550   001C8E  D7F9               	goto	l3435
  5551   001C90  D00D               	goto	u2190
  5552   001C92                     l3439:
  5553   001C92  0E17               	movlw	23
  5554   001C94  6438               	cpfsgt	___fttol@exp1^0,c
  5555   001C96  D007               	goto	l3447
  5556   001C98  D7C1               	goto	u2140
  5557   001C9A                     l3445:
  5558   001C9A  90D8               	bcf	status,0,c
  5559   001C9C  3634               	rlcf	___fttol@lval^0,f,c
  5560   001C9E  3635               	rlcf	(___fttol@lval+1)^0,f,c
  5561   001CA0  3636               	rlcf	(___fttol@lval+2)^0,f,c
  5562   001CA2  3637               	rlcf	(___fttol@lval+3)^0,f,c
  5563   001CA4  0638               	decf	___fttol@exp1^0,f,c
  5564   001CA6                     l3447:
  5565   001CA6  5038               	movf	___fttol@exp1^0,w,c
  5566   001CA8  A4D8               	btfss	status,2,c
  5567   001CAA  D7F7               	goto	l3445
  5568   001CAC                     u2190:
  5569   001CAC  5033               	movf	___fttol@sign1^0,w,c
  5570   001CAE  B4D8               	btfsc	status,2,c
  5571   001CB0  D008               	goto	l3453
  5572   001CB2  1E37               	comf	(___fttol@lval+3)^0,f,c
  5573   001CB4  1E36               	comf	(___fttol@lval+2)^0,f,c
  5574   001CB6  1E35               	comf	(___fttol@lval+1)^0,f,c
  5575   001CB8  6C34               	negf	___fttol@lval^0,c
  5576   001CBA  0E00               	movlw	0
  5577   001CBC  2235               	addwfc	(___fttol@lval+1)^0,f,c
  5578   001CBE  2236               	addwfc	(___fttol@lval+2)^0,f,c
  5579   001CC0  2237               	addwfc	(___fttol@lval+3)^0,f,c
  5580   001CC2                     l3453:
  5581   001CC2  C034  F02A         	movff	___fttol@lval,?___fttol
  5582   001CC6  C035  F02B         	movff	___fttol@lval+1,?___fttol+1
  5583   001CCA  C036  F02C         	movff	___fttol@lval+2,?___fttol+2
  5584   001CCE  C037  F02D         	movff	___fttol@lval+3,?___fttol+3
  5585   001CD2  0012               	return		;funcret
  5586   001CD4                     __end_of___fttol:
  5587                           	callstack 0
  5588                           
  5589 ;; *************** function ___ftmul *****************
  5590 ;; Defined at:
  5591 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftmul.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;  f1              3   26[COMRAM] float 
  5594 ;;  f2              3   29[COMRAM] float 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;  f3_as_produc    3   36[COMRAM] unsigned um
  5597 ;;  sign            1   40[COMRAM] unsigned char 
  5598 ;;  cntr            1   39[COMRAM] unsigned char 
  5599 ;;  exp             1   35[COMRAM] unsigned char 
  5600 ;; Return value:  Size  Location     Type
  5601 ;;                  3   26[COMRAM] float 
  5602 ;; Registers used:
  5603 ;;		wreg, status,2, status,0, cstack
  5604 ;; Tracked objects:
  5605 ;;		On entry : 0/0
  5606 ;;		On exit  : 0/0
  5607 ;;		Unchanged: 0/0
  5608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5609 ;;      Params:         6       0       0       0       0       0       0
  5610 ;;      Locals:         6       0       0       0       0       0       0
  5611 ;;      Temps:          3       0       0       0       0       0       0
  5612 ;;      Totals:        15       0       0       0       0       0       0
  5613 ;;Total ram usage:       15 bytes
  5614 ;; Hardware stack levels used: 1
  5615 ;; Hardware stack levels required when called: 1
  5616 ;; This function calls:
  5617 ;;		___ftpack
  5618 ;; This function is called by:
  5619 ;;		_get_speed
  5620 ;; This function uses a non-reentrant model
  5621 ;;
  5622                           
  5623                           	psect	text29
  5624   001E9A                     __ptext29:
  5625                           	callstack 0
  5626   001E9A                     ___ftmul:
  5627                           	callstack 28
  5628                           
  5629                           ;incstack = 0
  5630   001E9A  C01D  F021         	movff	___ftmul@f1+2,??___ftmul
  5631   001E9E  6A22               	clrf	(??___ftmul+1)^0,c
  5632   001EA0  6A23               	clrf	(??___ftmul+2)^0,c
  5633   001EA2  341C               	rlcf	(___ftmul@f1+1)^0,w,c
  5634   001EA4  3621               	rlcf	??___ftmul^0,f,c
  5635   001EA6  E301               	bnc	u2071
  5636   001EA8  8022               	bsf	(??___ftmul+1)^0,0,c
  5637   001EAA                     u2071:
  5638   001EAA  5021               	movf	??___ftmul^0,w,c
  5639   001EAC  6E24               	movwf	___ftmul@exp^0,c
  5640   001EAE  5024               	movf	___ftmul@exp^0,w,c
  5641   001EB0  A4D8               	btfss	status,2,c
  5642   001EB2  D007               	goto	l3369
  5643   001EB4  0E00               	movlw	0
  5644   001EB6  6E1B               	movwf	?___ftmul^0,c
  5645   001EB8  0E00               	movlw	0
  5646   001EBA  6E1C               	movwf	(?___ftmul+1)^0,c
  5647   001EBC  0E00               	movlw	0
  5648   001EBE  6E1D               	movwf	(?___ftmul+2)^0,c
  5649   001EC0  0012               	return	
  5650   001EC2                     l3369:
  5651   001EC2  C020  F021         	movff	___ftmul@f2+2,??___ftmul
  5652   001EC6  6A22               	clrf	(??___ftmul+1)^0,c
  5653   001EC8  6A23               	clrf	(??___ftmul+2)^0,c
  5654   001ECA  341F               	rlcf	(___ftmul@f2+1)^0,w,c
  5655   001ECC  3621               	rlcf	??___ftmul^0,f,c
  5656   001ECE  E301               	bnc	u2091
  5657   001ED0  8022               	bsf	(??___ftmul+1)^0,0,c
  5658   001ED2                     u2091:
  5659   001ED2  5021               	movf	??___ftmul^0,w,c
  5660   001ED4  6E29               	movwf	___ftmul@sign^0,c
  5661   001ED6  5029               	movf	___ftmul@sign^0,w,c
  5662   001ED8  A4D8               	btfss	status,2,c
  5663   001EDA  D007               	goto	l3375
  5664   001EDC  0E00               	movlw	0
  5665   001EDE  6E1B               	movwf	?___ftmul^0,c
  5666   001EE0  0E00               	movlw	0
  5667   001EE2  6E1C               	movwf	(?___ftmul+1)^0,c
  5668   001EE4  0E00               	movlw	0
  5669   001EE6  6E1D               	movwf	(?___ftmul+2)^0,c
  5670   001EE8  0012               	return	
  5671   001EEA                     l3375:
  5672   001EEA  5029               	movf	___ftmul@sign^0,w,c
  5673   001EEC  0F7B               	addlw	123
  5674   001EEE  2624               	addwf	___ftmul@exp^0,f,c
  5675   001EF0  C01D  F029         	movff	___ftmul@f1+2,___ftmul@sign
  5676   001EF4  5020               	movf	(___ftmul@f2+2)^0,w,c
  5677   001EF6  1A29               	xorwf	___ftmul@sign^0,f,c
  5678   001EF8  0E80               	movlw	128
  5679   001EFA  1629               	andwf	___ftmul@sign^0,f,c
  5680   001EFC  8E1C               	bsf	(___ftmul@f1+1)^0,7,c
  5681   001EFE  8E1F               	bsf	(___ftmul@f2+1)^0,7,c
  5682   001F00  0EFF               	movlw	255
  5683   001F02  161E               	andwf	___ftmul@f2^0,f,c
  5684   001F04  0EFF               	movlw	255
  5685   001F06  161F               	andwf	(___ftmul@f2+1)^0,f,c
  5686   001F08  0E00               	movlw	0
  5687   001F0A  1620               	andwf	(___ftmul@f2+2)^0,f,c
  5688   001F0C  0E00               	movlw	0
  5689   001F0E  6E25               	movwf	___ftmul@f3_as_product^0,c
  5690   001F10  0E00               	movlw	0
  5691   001F12  6E26               	movwf	(___ftmul@f3_as_product+1)^0,c
  5692   001F14  0E00               	movlw	0
  5693   001F16  6E27               	movwf	(___ftmul@f3_as_product+2)^0,c
  5694   001F18  0E07               	movlw	7
  5695   001F1A  6E28               	movwf	___ftmul@cntr^0,c
  5696   001F1C                     l3389:
  5697   001F1C  A01B               	btfss	___ftmul@f1^0,0,c
  5698   001F1E  D006               	goto	l3393
  5699   001F20  501E               	movf	___ftmul@f2^0,w,c
  5700   001F22  2625               	addwf	___ftmul@f3_as_product^0,f,c
  5701   001F24  501F               	movf	(___ftmul@f2+1)^0,w,c
  5702   001F26  2226               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  5703   001F28  5020               	movf	(___ftmul@f2+2)^0,w,c
  5704   001F2A  2227               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  5705   001F2C                     l3393:
  5706   001F2C  90D8               	bcf	status,0,c
  5707   001F2E  321D               	rrcf	(___ftmul@f1+2)^0,f,c
  5708   001F30  321C               	rrcf	(___ftmul@f1+1)^0,f,c
  5709   001F32  321B               	rrcf	___ftmul@f1^0,f,c
  5710   001F34  90D8               	bcf	status,0,c
  5711   001F36  361E               	rlcf	___ftmul@f2^0,f,c
  5712   001F38  361F               	rlcf	(___ftmul@f2+1)^0,f,c
  5713   001F3A  3620               	rlcf	(___ftmul@f2+2)^0,f,c
  5714   001F3C  2E28               	decfsz	___ftmul@cntr^0,f,c
  5715   001F3E  D7EE               	goto	l3389
  5716   001F40  0E09               	movlw	9
  5717   001F42  6E28               	movwf	___ftmul@cntr^0,c
  5718   001F44                     l3399:
  5719   001F44  A01B               	btfss	___ftmul@f1^0,0,c
  5720   001F46  D006               	goto	l3403
  5721   001F48  501E               	movf	___ftmul@f2^0,w,c
  5722   001F4A  2625               	addwf	___ftmul@f3_as_product^0,f,c
  5723   001F4C  501F               	movf	(___ftmul@f2+1)^0,w,c
  5724   001F4E  2226               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  5725   001F50  5020               	movf	(___ftmul@f2+2)^0,w,c
  5726   001F52  2227               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  5727   001F54                     l3403:
  5728   001F54  90D8               	bcf	status,0,c
  5729   001F56  321D               	rrcf	(___ftmul@f1+2)^0,f,c
  5730   001F58  321C               	rrcf	(___ftmul@f1+1)^0,f,c
  5731   001F5A  321B               	rrcf	___ftmul@f1^0,f,c
  5732   001F5C  90D8               	bcf	status,0,c
  5733   001F5E  3227               	rrcf	(___ftmul@f3_as_product+2)^0,f,c
  5734   001F60  3226               	rrcf	(___ftmul@f3_as_product+1)^0,f,c
  5735   001F62  3225               	rrcf	___ftmul@f3_as_product^0,f,c
  5736   001F64  2E28               	decfsz	___ftmul@cntr^0,f,c
  5737   001F66  D7EE               	goto	l3399
  5738   001F68  C025  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5739   001F6C  C026  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5740   001F70  C027  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5741   001F74  C024  F004         	movff	___ftmul@exp,___ftpack@exp
  5742   001F78  C029  F005         	movff	___ftmul@sign,___ftpack@sign
  5743   001F7C  EC4C  F00D         	call	___ftpack	;wreg free
  5744   001F80  C001  F01B         	movff	?___ftpack,?___ftmul
  5745   001F84  C002  F01C         	movff	?___ftpack+1,?___ftmul+1
  5746   001F88  C003  F01D         	movff	?___ftpack+2,?___ftmul+2
  5747   001F8C  0012               	return		;funcret
  5748   001F8E                     __end_of___ftmul:
  5749                           	callstack 0
  5750                           
  5751 ;; *************** function ___ftdiv *****************
  5752 ;; Defined at:
  5753 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftdiv.c"
  5754 ;; Parameters:    Size  Location     Type
  5755 ;;  f1              3   11[COMRAM] float 
  5756 ;;  f2              3   14[COMRAM] float 
  5757 ;; Auto vars:     Size  Location     Type
  5758 ;;  f3              3   21[COMRAM] float 
  5759 ;;  sign            1   25[COMRAM] unsigned char 
  5760 ;;  exp             1   24[COMRAM] unsigned char 
  5761 ;;  cntr            1   20[COMRAM] unsigned char 
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  3   11[COMRAM] float 
  5764 ;; Registers used:
  5765 ;;		wreg, status,2, status,0, cstack
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5771 ;;      Params:         6       0       0       0       0       0       0
  5772 ;;      Locals:         6       0       0       0       0       0       0
  5773 ;;      Temps:          3       0       0       0       0       0       0
  5774 ;;      Totals:        15       0       0       0       0       0       0
  5775 ;;Total ram usage:       15 bytes
  5776 ;; Hardware stack levels used: 1
  5777 ;; Hardware stack levels required when called: 1
  5778 ;; This function calls:
  5779 ;;		___ftpack
  5780 ;; This function is called by:
  5781 ;;		_get_speed
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           	psect	text30
  5786   001DB4                     __ptext30:
  5787                           	callstack 0
  5788   001DB4                     ___ftdiv:
  5789                           	callstack 28
  5790                           
  5791                           ;incstack = 0
  5792   001DB4  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  5793   001DB8  6A13               	clrf	(??___ftdiv+1)^0,c
  5794   001DBA  6A14               	clrf	(??___ftdiv+2)^0,c
  5795   001DBC  340D               	rlcf	(___ftdiv@f1+1)^0,w,c
  5796   001DBE  3612               	rlcf	??___ftdiv^0,f,c
  5797   001DC0  E301               	bnc	u2021
  5798   001DC2  8013               	bsf	(??___ftdiv+1)^0,0,c
  5799   001DC4                     u2021:
  5800   001DC4  5012               	movf	??___ftdiv^0,w,c
  5801   001DC6  6E19               	movwf	___ftdiv@exp^0,c
  5802   001DC8  5019               	movf	___ftdiv@exp^0,w,c
  5803   001DCA  A4D8               	btfss	status,2,c
  5804   001DCC  D007               	goto	l3323
  5805   001DCE  0E00               	movlw	0
  5806   001DD0  6E0C               	movwf	?___ftdiv^0,c
  5807   001DD2  0E00               	movlw	0
  5808   001DD4  6E0D               	movwf	(?___ftdiv+1)^0,c
  5809   001DD6  0E00               	movlw	0
  5810   001DD8  6E0E               	movwf	(?___ftdiv+2)^0,c
  5811   001DDA  0012               	return	
  5812   001DDC                     l3323:
  5813   001DDC  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  5814   001DE0  6A13               	clrf	(??___ftdiv+1)^0,c
  5815   001DE2  6A14               	clrf	(??___ftdiv+2)^0,c
  5816   001DE4  3410               	rlcf	(___ftdiv@f2+1)^0,w,c
  5817   001DE6  3612               	rlcf	??___ftdiv^0,f,c
  5818   001DE8  E301               	bnc	u2041
  5819   001DEA  8013               	bsf	(??___ftdiv+1)^0,0,c
  5820   001DEC                     u2041:
  5821   001DEC  5012               	movf	??___ftdiv^0,w,c
  5822   001DEE  6E1A               	movwf	___ftdiv@sign^0,c
  5823   001DF0  501A               	movf	___ftdiv@sign^0,w,c
  5824   001DF2  A4D8               	btfss	status,2,c
  5825   001DF4  D007               	goto	l3329
  5826   001DF6  0E00               	movlw	0
  5827   001DF8  6E0C               	movwf	?___ftdiv^0,c
  5828   001DFA  0E00               	movlw	0
  5829   001DFC  6E0D               	movwf	(?___ftdiv+1)^0,c
  5830   001DFE  0E00               	movlw	0
  5831   001E00  6E0E               	movwf	(?___ftdiv+2)^0,c
  5832   001E02  0012               	return	
  5833   001E04                     l3329:
  5834   001E04  0E00               	movlw	0
  5835   001E06  6E16               	movwf	___ftdiv@f3^0,c
  5836   001E08  0E00               	movlw	0
  5837   001E0A  6E17               	movwf	(___ftdiv@f3+1)^0,c
  5838   001E0C  0E00               	movlw	0
  5839   001E0E  6E18               	movwf	(___ftdiv@f3+2)^0,c
  5840   001E10  501A               	movf	___ftdiv@sign^0,w,c
  5841   001E12  0F89               	addlw	137
  5842   001E14  5E19               	subwf	___ftdiv@exp^0,f,c
  5843   001E16  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  5844   001E1A  5011               	movf	(___ftdiv@f2+2)^0,w,c
  5845   001E1C  1A1A               	xorwf	___ftdiv@sign^0,f,c
  5846   001E1E  0E80               	movlw	128
  5847   001E20  161A               	andwf	___ftdiv@sign^0,f,c
  5848   001E22  8E0D               	bsf	(___ftdiv@f1+1)^0,7,c
  5849   001E24  0EFF               	movlw	255
  5850   001E26  160C               	andwf	___ftdiv@f1^0,f,c
  5851   001E28  0EFF               	movlw	255
  5852   001E2A  160D               	andwf	(___ftdiv@f1+1)^0,f,c
  5853   001E2C  0E00               	movlw	0
  5854   001E2E  160E               	andwf	(___ftdiv@f1+2)^0,f,c
  5855   001E30  8E10               	bsf	(___ftdiv@f2+1)^0,7,c
  5856   001E32  0EFF               	movlw	255
  5857   001E34  160F               	andwf	___ftdiv@f2^0,f,c
  5858   001E36  0EFF               	movlw	255
  5859   001E38  1610               	andwf	(___ftdiv@f2+1)^0,f,c
  5860   001E3A  0E00               	movlw	0
  5861   001E3C  1611               	andwf	(___ftdiv@f2+2)^0,f,c
  5862   001E3E  0E18               	movlw	24
  5863   001E40  6E15               	movwf	___ftdiv@cntr^0,c
  5864   001E42                     l3349:
  5865   001E42  90D8               	bcf	status,0,c
  5866   001E44  3616               	rlcf	___ftdiv@f3^0,f,c
  5867   001E46  3617               	rlcf	(___ftdiv@f3+1)^0,f,c
  5868   001E48  3618               	rlcf	(___ftdiv@f3+2)^0,f,c
  5869   001E4A  500F               	movf	___ftdiv@f2^0,w,c
  5870   001E4C  5C0C               	subwf	___ftdiv@f1^0,w,c
  5871   001E4E  5010               	movf	(___ftdiv@f2+1)^0,w,c
  5872   001E50  580D               	subwfb	(___ftdiv@f1+1)^0,w,c
  5873   001E52  5011               	movf	(___ftdiv@f2+2)^0,w,c
  5874   001E54  580E               	subwfb	(___ftdiv@f1+2)^0,w,c
  5875   001E56  A0D8               	btfss	status,0,c
  5876   001E58  D007               	goto	l969
  5877   001E5A  500F               	movf	___ftdiv@f2^0,w,c
  5878   001E5C  5E0C               	subwf	___ftdiv@f1^0,f,c
  5879   001E5E  5010               	movf	(___ftdiv@f2+1)^0,w,c
  5880   001E60  5A0D               	subwfb	(___ftdiv@f1+1)^0,f,c
  5881   001E62  5011               	movf	(___ftdiv@f2+2)^0,w,c
  5882   001E64  5A0E               	subwfb	(___ftdiv@f1+2)^0,f,c
  5883   001E66  8016               	bsf	___ftdiv@f3^0,0,c
  5884   001E68                     l969:
  5885   001E68  90D8               	bcf	status,0,c
  5886   001E6A  360C               	rlcf	___ftdiv@f1^0,f,c
  5887   001E6C  360D               	rlcf	(___ftdiv@f1+1)^0,f,c
  5888   001E6E  360E               	rlcf	(___ftdiv@f1+2)^0,f,c
  5889   001E70  2E15               	decfsz	___ftdiv@cntr^0,f,c
  5890   001E72  D7E7               	goto	l3349
  5891   001E74  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  5892   001E78  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5893   001E7C  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5894   001E80  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  5895   001E84  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  5896   001E88  EC4C  F00D         	call	___ftpack	;wreg free
  5897   001E8C  C001  F00C         	movff	?___ftpack,?___ftdiv
  5898   001E90  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  5899   001E94  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  5900   001E98  0012               	return		;funcret
  5901   001E9A                     __end_of___ftdiv:
  5902                           	callstack 0
  5903                           
  5904 ;; *************** function ___ftpack *****************
  5905 ;; Defined at:
  5906 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\float.c"
  5907 ;; Parameters:    Size  Location     Type
  5908 ;;  arg             3    0[COMRAM] unsigned um
  5909 ;;  exp             1    3[COMRAM] unsigned char 
  5910 ;;  sign            1    4[COMRAM] unsigned char 
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;		None
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  3    0[COMRAM] float 
  5915 ;; Registers used:
  5916 ;;		wreg, status,2, status,0
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5922 ;;      Params:         5       0       0       0       0       0       0
  5923 ;;      Locals:         0       0       0       0       0       0       0
  5924 ;;      Temps:          3       0       0       0       0       0       0
  5925 ;;      Totals:         8       0       0       0       0       0       0
  5926 ;;Total ram usage:        8 bytes
  5927 ;; Hardware stack levels used: 1
  5928 ;; This function calls:
  5929 ;;		Nothing
  5930 ;; This function is called by:
  5931 ;;		___ftdiv
  5932 ;;		___ftmul
  5933 ;;		___lwtoft
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           	psect	text31
  5938   001A98                     __ptext31:
  5939                           	callstack 0
  5940   001A98                     ___ftpack:
  5941                           	callstack 28
  5942                           
  5943                           ;incstack = 0
  5944   001A98  5004               	movf	___ftpack@exp^0,w,c
  5945   001A9A  B4D8               	btfsc	status,2,c
  5946   001A9C  D005               	goto	u1550
  5947   001A9E  5001               	movf	___ftpack@arg^0,w,c
  5948   001AA0  1002               	iorwf	(___ftpack@arg+1)^0,w,c
  5949   001AA2  1003               	iorwf	(___ftpack@arg+2)^0,w,c
  5950   001AA4  A4D8               	btfss	status,2,c
  5951   001AA6  D00C               	goto	l2879
  5952   001AA8                     u1550:
  5953   001AA8  0E00               	movlw	0
  5954   001AAA  6E01               	movwf	?___ftpack^0,c
  5955   001AAC  0E00               	movlw	0
  5956   001AAE  6E02               	movwf	(?___ftpack+1)^0,c
  5957   001AB0  0E00               	movlw	0
  5958   001AB2  6E03               	movwf	(?___ftpack+2)^0,c
  5959   001AB4  0012               	return	
  5960   001AB6                     l2877:
  5961   001AB6  2A04               	incf	___ftpack@exp^0,f,c
  5962   001AB8  90D8               	bcf	status,0,c
  5963   001ABA  3203               	rrcf	(___ftpack@arg+2)^0,f,c
  5964   001ABC  3202               	rrcf	(___ftpack@arg+1)^0,f,c
  5965   001ABE  3201               	rrcf	___ftpack@arg^0,f,c
  5966   001AC0                     l2879:
  5967   001AC0  0E00               	movlw	0
  5968   001AC2  1401               	andwf	___ftpack@arg^0,w,c
  5969   001AC4  6E06               	movwf	??___ftpack^0,c
  5970   001AC6  0E00               	movlw	0
  5971   001AC8  1402               	andwf	(___ftpack@arg+1)^0,w,c
  5972   001ACA  6E07               	movwf	(??___ftpack+1)^0,c
  5973   001ACC  0EFE               	movlw	254
  5974   001ACE  1403               	andwf	(___ftpack@arg+2)^0,w,c
  5975   001AD0  6E08               	movwf	(??___ftpack+2)^0,c
  5976   001AD2  5006               	movf	??___ftpack^0,w,c
  5977   001AD4  1007               	iorwf	(??___ftpack+1)^0,w,c
  5978   001AD6  1008               	iorwf	(??___ftpack+2)^0,w,c
  5979   001AD8  B4D8               	btfsc	status,2,c
  5980   001ADA  D00C               	goto	l2885
  5981   001ADC  D7EC               	goto	l2877
  5982   001ADE                     l2881:
  5983   001ADE  2A04               	incf	___ftpack@exp^0,f,c
  5984   001AE0  0E01               	movlw	1
  5985   001AE2  2601               	addwf	___ftpack@arg^0,f,c
  5986   001AE4  0E00               	movlw	0
  5987   001AE6  2202               	addwfc	(___ftpack@arg+1)^0,f,c
  5988   001AE8  0E00               	movlw	0
  5989   001AEA  2203               	addwfc	(___ftpack@arg+2)^0,f,c
  5990   001AEC  90D8               	bcf	status,0,c
  5991   001AEE  3203               	rrcf	(___ftpack@arg+2)^0,f,c
  5992   001AF0  3202               	rrcf	(___ftpack@arg+1)^0,f,c
  5993   001AF2  3201               	rrcf	___ftpack@arg^0,f,c
  5994   001AF4                     l2885:
  5995   001AF4  0E00               	movlw	0
  5996   001AF6  1401               	andwf	___ftpack@arg^0,w,c
  5997   001AF8  6E06               	movwf	??___ftpack^0,c
  5998   001AFA  0E00               	movlw	0
  5999   001AFC  1402               	andwf	(___ftpack@arg+1)^0,w,c
  6000   001AFE  6E07               	movwf	(??___ftpack+1)^0,c
  6001   001B00  0EFF               	movlw	255
  6002   001B02  1403               	andwf	(___ftpack@arg+2)^0,w,c
  6003   001B04  6E08               	movwf	(??___ftpack+2)^0,c
  6004   001B06  5006               	movf	??___ftpack^0,w,c
  6005   001B08  1007               	iorwf	(??___ftpack+1)^0,w,c
  6006   001B0A  1008               	iorwf	(??___ftpack+2)^0,w,c
  6007   001B0C  B4D8               	btfsc	status,2,c
  6008   001B0E  D006               	goto	l2889
  6009   001B10  D7E6               	goto	l2881
  6010   001B12                     l2887:
  6011   001B12  0604               	decf	___ftpack@exp^0,f,c
  6012   001B14  90D8               	bcf	status,0,c
  6013   001B16  3601               	rlcf	___ftpack@arg^0,f,c
  6014   001B18  3602               	rlcf	(___ftpack@arg+1)^0,f,c
  6015   001B1A  3603               	rlcf	(___ftpack@arg+2)^0,f,c
  6016   001B1C                     l2889:
  6017   001B1C  BE02               	btfsc	(___ftpack@arg+1)^0,7,c
  6018   001B1E  D003               	goto	u1590
  6019   001B20  0E02               	movlw	2
  6020   001B22  6004               	cpfslt	___ftpack@exp^0,c
  6021   001B24  D7F6               	goto	l2887
  6022   001B26                     u1590:
  6023   001B26  A004               	btfss	___ftpack@exp^0,0,c
  6024   001B28  9E02               	bcf	(___ftpack@arg+1)^0,7,c
  6025   001B2A  90D8               	bcf	status,0,c
  6026   001B2C  3204               	rrcf	___ftpack@exp^0,f,c
  6027   001B2E  5004               	movf	___ftpack@exp^0,w,c
  6028   001B30  1203               	iorwf	(___ftpack@arg+2)^0,f,c
  6029   001B32  5005               	movf	___ftpack@sign^0,w,c
  6030   001B34  A4D8               	btfss	status,2,c
  6031   001B36  8E03               	bsf	(___ftpack@arg+2)^0,7,c
  6032   001B38  C001  F001         	movff	___ftpack@arg,?___ftpack
  6033   001B3C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6034   001B40  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6035   001B44  0012               	return		;funcret
  6036   001B46                     __end_of___ftpack:
  6037                           	callstack 0
  6038                           
  6039 ;; *************** function _get_password *****************
  6040 ;; Defined at:
  6041 ;;		line 17 in file "functions.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;		None
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;  wait            2   15[COMRAM] unsigned int 
  6046 ;;  p               2   22[COMRAM] int 
  6047 ;;  j               2   24[COMRAM] int 
  6048 ;;  count           2   17[COMRAM] int 
  6049 ;;  wait            2   13[COMRAM] unsigned int 
  6050 ;;  entered_pass    4    7[COMRAM] unsigned char [4]
  6051 ;;  i               2   26[COMRAM] int 
  6052 ;;  total_attemp    2   20[COMRAM] int 
  6053 ;;  delay           2   11[COMRAM] int 
  6054 ;;  key_pressed     1   19[COMRAM] unsigned char 
  6055 ;; Return value:  Size  Location     Type
  6056 ;;                  1    wreg      unsigned char 
  6057 ;; Registers used:
  6058 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6064 ;;      Params:         0       0       0       0       0       0       0
  6065 ;;      Locals:        21       0       0       0       0       0       0
  6066 ;;      Temps:          2       0       0       0       0       0       0
  6067 ;;      Totals:        23       0       0       0       0       0       0
  6068 ;;Total ram usage:       23 bytes
  6069 ;; Hardware stack levels used: 1
  6070 ;; Hardware stack levels required when called: 4
  6071 ;; This function calls:
  6072 ;;		_clcd_print
  6073 ;;		_clcd_putch
  6074 ;;		_clcd_write
  6075 ;;		_read_external_eeprom
  6076 ;;		_read_switches
  6077 ;; This function is called by:
  6078 ;;		_main
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           	psect	text32
  6083   0023BA                     __ptext32:
  6084                           	callstack 0
  6085   0023BA                     _get_password:
  6086                           	callstack 26
  6087                           
  6088                           ;functions.c: 19: clcd_write(0x01, 0);
  6089                           
  6090                           ;incstack = 0
  6091   0023BA  0E00               	movlw	0
  6092   0023BC  6E01               	movwf	clcd_write@control_bit^0,c
  6093   0023BE  0E01               	movlw	1
  6094   0023C0  EC3C  F00A         	call	_clcd_write
  6095                           
  6096                           ;functions.c: 20: clcd_print("ENTER PASSWORD", (0x80 + (1)));
  6097   0023C4  0E2E               	movlw	low STR_15
  6098   0023C6  6E03               	movwf	clcd_print@data^0,c
  6099   0023C8  0E2F               	movlw	high STR_15
  6100   0023CA  6E04               	movwf	(clcd_print@data+1)^0,c
  6101   0023CC  0E81               	movlw	129
  6102   0023CE  6E05               	movwf	clcd_print@addr^0,c
  6103   0023D0  ECE7  F00B         	call	_clcd_print	;wreg free
  6104                           
  6105                           ;functions.c: 21: char entered_password[4] = {0};
  6106   0023D4  0E00               	movlw	0
  6107   0023D6  6E08               	movwf	get_password@entered_password^0,c
  6108   0023D8  0E00               	movlw	0
  6109   0023DA  6E09               	movwf	(get_password@entered_password+1)^0,c
  6110   0023DC  0E00               	movlw	0
  6111   0023DE  6E0A               	movwf	(get_password@entered_password+2)^0,c
  6112   0023E0  0E00               	movlw	0
  6113   0023E2  6E0B               	movwf	(get_password@entered_password+3)^0,c
  6114                           
  6115                           ;functions.c: 22: int total_attempts = 5;
  6116   0023E4  0E00               	movlw	0
  6117   0023E6  6E16               	movwf	(get_password@total_attempts+1)^0,c
  6118   0023E8  0E05               	movlw	5
  6119   0023EA  6E15               	movwf	get_password@total_attempts^0,c
  6120                           
  6121                           ;functions.c: 23: int i = 0;
  6122   0023EC  0E00               	movlw	0
  6123   0023EE  6E1C               	movwf	(get_password@i+1)^0,c
  6124   0023F0  0E00               	movlw	0
  6125   0023F2  6E1B               	movwf	get_password@i^0,c
  6126                           
  6127                           ;functions.c: 24: int delay = 0;
  6128   0023F4  0E00               	movlw	0
  6129   0023F6  6E0D               	movwf	(get_password@delay+1)^0,c
  6130   0023F8  0E00               	movlw	0
  6131   0023FA  6E0C               	movwf	get_password@delay^0,c
  6132                           
  6133                           ;functions.c: 25: unsigned char key_pressed;;functions.c: 27: while (total_attempts)
  6134   0023FC  D0CB               	goto	l3765
  6135   0023FE                     l3689:
  6136                           
  6137                           ;functions.c: 28: {;functions.c: 29: key_pressed = read_switches(1);
  6138   0023FE  0E01               	movlw	1
  6139   002400  ECEC  F00A         	call	_read_switches
  6140   002404  6E14               	movwf	get_password@key_pressed^0,c
  6141                           
  6142                           ;functions.c: 31: for (unsigned int wait = 5000; wait--;)
  6143   002406  0E13               	movlw	19
  6144   002408  6E0F               	movwf	(get_password@wait+1)^0,c
  6145   00240A  0E88               	movlw	136
  6146   00240C  6E0E               	movwf	get_password@wait^0,c
  6147   00240E                     l3693:
  6148   00240E  060E               	decf	get_password@wait^0,f,c
  6149   002410  A0D8               	btfss	status,0,c
  6150   002412  060F               	decf	(get_password@wait+1)^0,f,c
  6151   002414  280E               	incf	get_password@wait^0,w,c
  6152   002416  E1FB               	bnz	l3693
  6153   002418  280F               	incf	(get_password@wait+1)^0,w,c
  6154   00241A  A4D8               	btfss	status,2,c
  6155   00241C  D7F8               	goto	l3693
  6156                           
  6157                           ;functions.c: 34: if (i < 4)
  6158   00241E  BE1C               	btfsc	(get_password@i+1)^0,7,c
  6159   002420  D006               	goto	u2420
  6160   002422  501C               	movf	(get_password@i+1)^0,w,c
  6161   002424  E149               	bnz	l3717
  6162   002426  0E04               	movlw	4
  6163   002428  5C1B               	subwf	get_password@i^0,w,c
  6164   00242A  B0D8               	btfsc	status,0,c
  6165   00242C  D045               	goto	l3717
  6166   00242E                     u2420:
  6167                           
  6168                           ;functions.c: 35: {;functions.c: 36: if (delay++ < 15000)
  6169   00242E  500C               	movf	get_password@delay^0,w,c
  6170   002430  6E06               	movwf	??_get_password^0,c
  6171   002432  500D               	movf	(get_password@delay+1)^0,w,c
  6172   002434  6E07               	movwf	(??_get_password+1)^0,c
  6173   002436  4A0C               	infsnz	get_password@delay^0,f,c
  6174   002438  2A0D               	incf	(get_password@delay+1)^0,f,c
  6175   00243A  BE07               	btfsc	(??_get_password+1)^0,7,c
  6176   00243C  D006               	goto	u2430
  6177   00243E  0E98               	movlw	152
  6178   002440  5C06               	subwf	??_get_password^0,w,c
  6179   002442  0E3A               	movlw	58
  6180   002444  5807               	subwfb	(??_get_password+1)^0,w,c
  6181   002446  B0D8               	btfsc	status,0,c
  6182   002448  D007               	goto	l3701
  6183   00244A                     u2430:
  6184                           
  6185                           ;functions.c: 37: {;functions.c: 38: clcd_putch('_', (0xC0 + (i)));
  6186   00244A  501B               	movf	get_password@i^0,w,c
  6187   00244C  0FC0               	addlw	192
  6188   00244E  6E04               	movwf	clcd_putch@addr^0,c
  6189   002450  0E5F               	movlw	95
  6190   002452  ECFF  F009         	call	_clcd_putch
  6191                           
  6192                           ;functions.c: 39: }
  6193   002456  D028               	goto	l3715
  6194   002458                     l3701:
  6195                           
  6196                           ;functions.c: 40: else;functions.c: 41: {;functions.c: 42: clcd_putch(' ', (0xC0 + (i)))
      +                          ;
  6197   002458  501B               	movf	get_password@i^0,w,c
  6198   00245A  0FC0               	addlw	192
  6199   00245C  6E04               	movwf	clcd_putch@addr^0,c
  6200   00245E  0E20               	movlw	32
  6201   002460  ECFF  F009         	call	_clcd_putch
  6202   002464  D021               	goto	l3715
  6203   002466                     l3703:
  6204                           
  6205                           ;functions.c: 48: {;functions.c: 49: clcd_print("*", (0xC0 + (i)));
  6206   002466  0EFC               	movlw	low STR_16
  6207   002468  6E03               	movwf	clcd_print@data^0,c
  6208   00246A  0E2F               	movlw	high STR_16
  6209   00246C  6E04               	movwf	(clcd_print@data+1)^0,c
  6210   00246E  501B               	movf	get_password@i^0,w,c
  6211   002470  0FC0               	addlw	192
  6212   002472  6E05               	movwf	clcd_print@addr^0,c
  6213   002474  ECE7  F00B         	call	_clcd_print	;wreg free
  6214                           
  6215                           ;functions.c: 50: entered_password[i++] = 1;
  6216   002478  501B               	movf	get_password@i^0,w,c
  6217   00247A  0F08               	addlw	low get_password@entered_password
  6218   00247C  6ED9               	movwf	fsr2l,c
  6219   00247E  6ADA               	clrf	fsr2h,c
  6220   002480  0E01               	movlw	1
  6221   002482  6EDF               	movwf	indf2,c
  6222   002484                     l3707:
  6223   002484  4A1B               	infsnz	get_password@i^0,f,c
  6224   002486  2A1C               	incf	(get_password@i+1)^0,f,c
  6225                           
  6226                           ;functions.c: 51: };functions.c: 52: break;
  6227   002488  D085               	goto	l3765
  6228   00248A                     l3709:
  6229                           
  6230                           ;functions.c: 54: {;functions.c: 55: clcd_print("*", (0xC0 + (i)));
  6231   00248A  0EFC               	movlw	low STR_16
  6232   00248C  6E03               	movwf	clcd_print@data^0,c
  6233   00248E  0E2F               	movlw	high STR_16
  6234   002490  6E04               	movwf	(clcd_print@data+1)^0,c
  6235   002492  501B               	movf	get_password@i^0,w,c
  6236   002494  0FC0               	addlw	192
  6237   002496  6E05               	movwf	clcd_print@addr^0,c
  6238   002498  ECE7  F00B         	call	_clcd_print	;wreg free
  6239                           
  6240                           ;functions.c: 56: entered_password[i++] = 0;
  6241   00249C  501B               	movf	get_password@i^0,w,c
  6242   00249E  0F08               	addlw	low get_password@entered_password
  6243   0024A0  6ED9               	movwf	fsr2l,c
  6244   0024A2  6ADA               	clrf	fsr2h,c
  6245   0024A4  6ADF               	clrf	indf2,c
  6246   0024A6  D7EE               	goto	l3707
  6247   0024A8                     l3715:
  6248   0024A8  5014               	movf	get_password@key_pressed^0,w,c
  6249                           
  6250                           ; Switch size 1, requested type "simple"
  6251                           ; Number of cases is 2, Range of values is 11 to 12
  6252                           ; switch strategies available:
  6253                           ; Name         Instructions Cycles
  6254                           ; simple_byte            7     4 (average)
  6255                           ;	Chosen strategy is simple_byte
  6256   0024AA  0A0B               	xorlw	11	; case 11
  6257   0024AC  B4D8               	btfsc	status,2,c
  6258   0024AE  D7DB               	goto	l3703
  6259   0024B0  0A07               	xorlw	7	; case 12
  6260   0024B2  B4D8               	btfsc	status,2,c
  6261   0024B4  D7EA               	goto	l3709
  6262   0024B6  D06E               	goto	l3765
  6263   0024B8                     l3717:
  6264                           
  6265                           ;functions.c: 60: else;functions.c: 61: {;functions.c: 62: int count = 0;
  6266   0024B8  0E00               	movlw	0
  6267   0024BA  6E13               	movwf	(get_password@count+1)^0,c
  6268   0024BC  0E00               	movlw	0
  6269   0024BE  6E12               	movwf	get_password@count^0,c
  6270                           
  6271                           ;functions.c: 65: for (int j = 0; j < 4; j++)
  6272   0024C0  0E00               	movlw	0
  6273   0024C2  6E1A               	movwf	(get_password@j+1)^0,c
  6274   0024C4  0E00               	movlw	0
  6275   0024C6  6E19               	movwf	get_password@j^0,c
  6276   0024C8                     l3723:
  6277                           
  6278                           ;functions.c: 66: {;functions.c: 68: if (read_external_eeprom(100 + j) == entered_passwo
      +                          rd[j])
  6279   0024C8  5019               	movf	get_password@j^0,w,c
  6280   0024CA  0F08               	addlw	low get_password@entered_password
  6281   0024CC  6ED9               	movwf	fsr2l,c
  6282   0024CE  6ADA               	clrf	fsr2h,c
  6283   0024D0  5019               	movf	get_password@j^0,w,c
  6284   0024D2  0F64               	addlw	100
  6285   0024D4  EC50  F00A         	call	_read_external_eeprom
  6286   0024D8  6E07               	movwf	(??_get_password+1)^0,c
  6287   0024DA  50DE               	movf	postinc2,w,c
  6288   0024DC  1807               	xorwf	(??_get_password+1)^0,w,c
  6289   0024DE  A4D8               	btfss	status,2,c
  6290   0024E0  D002               	goto	l538
  6291                           
  6292                           ;functions.c: 69: count++;
  6293   0024E2  4A12               	infsnz	get_password@count^0,f,c
  6294   0024E4  2A13               	incf	(get_password@count+1)^0,f,c
  6295   0024E6                     l538:
  6296   0024E6  4A19               	infsnz	get_password@j^0,f,c
  6297   0024E8  2A1A               	incf	(get_password@j+1)^0,f,c
  6298   0024EA  BE1A               	btfsc	(get_password@j+1)^0,7,c
  6299   0024EC  D7ED               	goto	l3723
  6300   0024EE  501A               	movf	(get_password@j+1)^0,w,c
  6301   0024F0  E104               	bnz	u2450
  6302   0024F2  0E04               	movlw	4
  6303   0024F4  5C19               	subwf	get_password@j^0,w,c
  6304   0024F6  A0D8               	btfss	status,0,c
  6305   0024F8  D7E7               	goto	l3723
  6306   0024FA                     u2450:
  6307                           
  6308                           ;functions.c: 70: };functions.c: 72: if (count == 4)
  6309   0024FA  0E04               	movlw	4
  6310   0024FC  1812               	xorwf	get_password@count^0,w,c
  6311   0024FE  1013               	iorwf	(get_password@count+1)^0,w,c
  6312   002500  A4D8               	btfss	status,2,c
  6313   002502  D007               	goto	l3739
  6314                           
  6315                           ;functions.c: 73: {;functions.c: 74: clcd_write(0x01, 0);
  6316   002504  0E00               	movlw	0
  6317   002506  6E01               	movwf	clcd_write@control_bit^0,c
  6318   002508  0E01               	movlw	1
  6319   00250A  EC3C  F00A         	call	_clcd_write
  6320                           
  6321                           ;functions.c: 75: return 0;
  6322   00250E  0E00               	movlw	0
  6323   002510  0012               	return	
  6324   002512                     l3739:
  6325                           
  6326                           ;functions.c: 77: else;functions.c: 78: {;functions.c: 79: i = 0;
  6327   002512  0E00               	movlw	0
  6328   002514  6E1C               	movwf	(get_password@i+1)^0,c
  6329   002516  0E00               	movlw	0
  6330   002518  6E1B               	movwf	get_password@i^0,c
  6331                           
  6332                           ;functions.c: 80: clcd_write(0x01, 0);
  6333   00251A  0E00               	movlw	0
  6334   00251C  6E01               	movwf	clcd_write@control_bit^0,c
  6335   00251E  0E01               	movlw	1
  6336   002520  EC3C  F00A         	call	_clcd_write
  6337                           
  6338                           ;functions.c: 81: clcd_print("FAILED!", (0xC0 + (4)));
  6339   002524  0EE8               	movlw	low STR_18
  6340   002526  6E03               	movwf	clcd_print@data^0,c
  6341   002528  0E2F               	movlw	high STR_18
  6342   00252A  6E04               	movwf	(clcd_print@data+1)^0,c
  6343   00252C  0EC4               	movlw	196
  6344   00252E  6E05               	movwf	clcd_print@addr^0,c
  6345   002530  ECE7  F00B         	call	_clcd_print	;wreg free
  6346                           
  6347                           ;functions.c: 82: for (int p = 0; p < 10; p++)
  6348   002534  0E00               	movlw	0
  6349   002536  6E18               	movwf	(get_password@p+1)^0,c
  6350   002538  0E00               	movlw	0
  6351   00253A  6E17               	movwf	get_password@p^0,c
  6352   00253C                     l3751:
  6353                           
  6354                           ;functions.c: 83: for (unsigned int wait = 50000; wait--;)
  6355   00253C  0EC3               	movlw	195
  6356   00253E  6E11               	movwf	(get_password@wait_603+1)^0,c
  6357   002540  0E50               	movlw	80
  6358   002542  6E10               	movwf	get_password@wait_603^0,c
  6359   002544                     l3753:
  6360   002544  0610               	decf	get_password@wait_603^0,f,c
  6361   002546  A0D8               	btfss	status,0,c
  6362   002548  0611               	decf	(get_password@wait_603+1)^0,f,c
  6363   00254A  2810               	incf	get_password@wait_603^0,w,c
  6364   00254C  E1FB               	bnz	l3753
  6365   00254E  2811               	incf	(get_password@wait_603+1)^0,w,c
  6366   002550  A4D8               	btfss	status,2,c
  6367   002552  D7F8               	goto	l3753
  6368   002554  4A17               	infsnz	get_password@p^0,f,c
  6369   002556  2A18               	incf	(get_password@p+1)^0,f,c
  6370   002558  BE18               	btfsc	(get_password@p+1)^0,7,c
  6371   00255A  D7F0               	goto	l3751
  6372   00255C  5018               	movf	(get_password@p+1)^0,w,c
  6373   00255E  E104               	bnz	u2480
  6374   002560  0E0A               	movlw	10
  6375   002562  5C17               	subwf	get_password@p^0,w,c
  6376   002564  A0D8               	btfss	status,0,c
  6377   002566  D7EA               	goto	l3751
  6378   002568                     u2480:
  6379                           
  6380                           ;functions.c: 85: clcd_write(0x01, 0);
  6381   002568  0E00               	movlw	0
  6382   00256A  6E01               	movwf	clcd_write@control_bit^0,c
  6383   00256C  0E01               	movlw	1
  6384   00256E  EC3C  F00A         	call	_clcd_write
  6385                           
  6386                           ;functions.c: 86: clcd_print("ATTEMPTS LEFT:", (0x80 + (0)));
  6387   002572  0E1F               	movlw	low STR_19
  6388   002574  6E03               	movwf	clcd_print@data^0,c
  6389   002576  0E2F               	movlw	high STR_19
  6390   002578  6E04               	movwf	(clcd_print@data+1)^0,c
  6391   00257A  0E80               	movlw	128
  6392   00257C  6E05               	movwf	clcd_print@addr^0,c
  6393   00257E  ECE7  F00B         	call	_clcd_print	;wreg free
  6394                           
  6395                           ;functions.c: 87: clcd_putch('0' + --total_attempts, (0x80 + (15)));
  6396   002582  0E8F               	movlw	143
  6397   002584  6E04               	movwf	clcd_putch@addr^0,c
  6398   002586  0615               	decf	get_password@total_attempts^0,f,c
  6399   002588  A0D8               	btfss	status,0,c
  6400   00258A  0616               	decf	(get_password@total_attempts+1)^0,f,c
  6401   00258C  5015               	movf	get_password@total_attempts^0,w,c
  6402   00258E  0F30               	addlw	48
  6403   002590  ECFF  F009         	call	_clcd_putch
  6404   002594                     l3765:
  6405   002594  5015               	movf	get_password@total_attempts^0,w,c
  6406   002596  1016               	iorwf	(get_password@total_attempts+1)^0,w,c
  6407   002598  A4D8               	btfss	status,2,c
  6408   00259A  D731               	goto	l3689
  6409                           
  6410                           ;functions.c: 88: };functions.c: 89: };functions.c: 90: };functions.c: 91: clcd_write(0x
      +                          01, 0);
  6411   00259C  0E00               	movlw	0
  6412   00259E  6E01               	movwf	clcd_write@control_bit^0,c
  6413   0025A0  0E01               	movlw	1
  6414   0025A2  EC3C  F00A         	call	_clcd_write
  6415                           
  6416                           ;functions.c: 92: return 1;
  6417   0025A6  0E01               	movlw	1
  6418   0025A8  0012               	return		;funcret
  6419   0025AA                     __end_of_get_password:
  6420                           	callstack 0
  6421                           
  6422 ;; *************** function _read_switches *****************
  6423 ;; Defined at:
  6424 ;;		line 88 in file "matrix_keypad.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  detection_ty    1    wreg     unsigned char 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  detection_ty    1    0[COMRAM] unsigned char 
  6429 ;; Return value:  Size  Location     Type
  6430 ;;                  1    wreg      unsigned char 
  6431 ;; Registers used:
  6432 ;;		wreg, status,2, status,0, cstack
  6433 ;; Tracked objects:
  6434 ;;		On entry : 0/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6438 ;;      Params:         0       0       0       0       0       0       0
  6439 ;;      Locals:         1       0       0       0       0       0       0
  6440 ;;      Temps:          0       0       0       0       0       0       0
  6441 ;;      Totals:         1       0       0       0       0       0       0
  6442 ;;Total ram usage:        1 bytes
  6443 ;; Hardware stack levels used: 1
  6444 ;; Hardware stack levels required when called: 1
  6445 ;; This function calls:
  6446 ;;		_scan_key
  6447 ;; This function is called by:
  6448 ;;		_go_to_menu
  6449 ;;		_main
  6450 ;;		_set_time
  6451 ;;		_get_password
  6452 ;;		_change_password
  6453 ;;		_view_log
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           	psect	text33
  6458   0015D8                     __ptext33:
  6459                           	callstack 0
  6460   0015D8                     _read_switches:
  6461                           	callstack 29
  6462                           
  6463                           ;incstack = 0
  6464                           ;read_switches@detection_type stored from wreg
  6465   0015D8  6E01               	movwf	read_switches@detection_type^0,c
  6466                           
  6467                           ;matrix_keypad.c: 90: static unsigned char once = 1, key;;matrix_keypad.c: 92: if (detec
      +                          tion_type == 1)
  6468   0015DA  0401               	decf	read_switches@detection_type^0,w,c
  6469   0015DC  A4D8               	btfss	status,2,c
  6470   0015DE  D013               	goto	l2823
  6471                           
  6472                           ;matrix_keypad.c: 93: {;matrix_keypad.c: 94: key = scan_key();
  6473   0015E0  EC80  F00C         	call	_scan_key	;wreg free
  6474   0015E4  6E4B               	movwf	read_switches@key^0,c
  6475                           
  6476                           ;matrix_keypad.c: 95: if(key != 0xFF && once )
  6477   0015E6  284B               	incf	read_switches@key^0,w,c
  6478   0015E8  B4D8               	btfsc	status,2,c
  6479   0015EA  D007               	goto	l2819
  6480   0015EC  505E               	movf	read_switches@once^0,w,c
  6481   0015EE  B4D8               	btfsc	status,2,c
  6482   0015F0  D004               	goto	l2819
  6483                           
  6484                           ;matrix_keypad.c: 96: {;matrix_keypad.c: 97: once = 0;
  6485   0015F2  0E00               	movlw	0
  6486   0015F4  6E5E               	movwf	read_switches@once^0,c
  6487                           
  6488                           ;matrix_keypad.c: 98: return key;
  6489   0015F6  504B               	movf	read_switches@key^0,w,c
  6490   0015F8  0012               	return	
  6491   0015FA                     l2819:
  6492                           
  6493                           ;matrix_keypad.c: 100: else if(key == 0xFF)
  6494   0015FA  284B               	incf	read_switches@key^0,w,c
  6495   0015FC  A4D8               	btfss	status,2,c
  6496   0015FE  D009               	goto	l2829
  6497                           
  6498                           ;matrix_keypad.c: 101: {;matrix_keypad.c: 102: once = 1;
  6499   001600  0E01               	movlw	1
  6500   001602  6E5E               	movwf	read_switches@once^0,c
  6501   001604  D006               	goto	l2829
  6502   001606                     l2823:
  6503                           
  6504                           ;matrix_keypad.c: 105: else if (detection_type == 0)
  6505   001606  5001               	movf	read_switches@detection_type^0,w,c
  6506   001608  A4D8               	btfss	status,2,c
  6507   00160A  D003               	goto	l2829
  6508                           
  6509                           ;matrix_keypad.c: 106: {;matrix_keypad.c: 107: return scan_key();
  6510   00160C  EC80  F00C         	call	_scan_key	;wreg free
  6511   001610  0012               	return	
  6512   001612                     l2829:
  6513                           
  6514                           ;matrix_keypad.c: 108: };matrix_keypad.c: 110: return 0xFF;
  6515   001612  0EFF               	movlw	255
  6516   001614  0012               	return		;funcret
  6517   001616                     __end_of_read_switches:
  6518                           	callstack 0
  6519                           
  6520 ;; *************** function _scan_key *****************
  6521 ;; Defined at:
  6522 ;;		line 18 in file "matrix_keypad.c"
  6523 ;; Parameters:    Size  Location     Type
  6524 ;;		None
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;		None
  6527 ;; Return value:  Size  Location     Type
  6528 ;;                  1    wreg      unsigned char 
  6529 ;; Registers used:
  6530 ;;		wreg
  6531 ;; Tracked objects:
  6532 ;;		On entry : 0/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6536 ;;      Params:         0       0       0       0       0       0       0
  6537 ;;      Locals:         0       0       0       0       0       0       0
  6538 ;;      Temps:          0       0       0       0       0       0       0
  6539 ;;      Totals:         0       0       0       0       0       0       0
  6540 ;;Total ram usage:        0 bytes
  6541 ;; Hardware stack levels used: 1
  6542 ;; This function calls:
  6543 ;;		Nothing
  6544 ;; This function is called by:
  6545 ;;		_read_switches
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           	psect	text34
  6550   001900                     __ptext34:
  6551                           	callstack 0
  6552   001900                     _scan_key:
  6553                           	callstack 29
  6554                           
  6555                           ;matrix_keypad.c: 20: PORTBbits.RB5 = 0;
  6556                           
  6557                           ;incstack = 0
  6558   001900  9A81               	bcf	129,5,c	;volatile
  6559                           
  6560                           ;matrix_keypad.c: 21: PORTBbits.RB6 = 1;
  6561   001902  8C81               	bsf	129,6,c	;volatile
  6562                           
  6563                           ;matrix_keypad.c: 22: PORTBbits.RB7 = 1;
  6564   001904  8E81               	bsf	129,7,c	;volatile
  6565                           
  6566                           ;matrix_keypad.c: 24: if (PORTBbits.RB1 == 0)
  6567   001906  B281               	btfsc	129,1,c	;volatile
  6568   001908  D002               	goto	l233
  6569                           
  6570                           ;matrix_keypad.c: 25: {;matrix_keypad.c: 26: return 1;
  6571   00190A  0E01               	movlw	1
  6572   00190C  0012               	return	
  6573   00190E                     l233:
  6574                           
  6575                           ;matrix_keypad.c: 28: else if (PORTBbits.RB2 == 0)
  6576   00190E  B481               	btfsc	129,2,c	;volatile
  6577   001910  D002               	goto	l236
  6578                           
  6579                           ;matrix_keypad.c: 29: {;matrix_keypad.c: 30: return 4;
  6580   001912  0E04               	movlw	4
  6581   001914  0012               	return	
  6582   001916                     l236:
  6583                           
  6584                           ;matrix_keypad.c: 32: else if (PORTBbits.RB3 == 0)
  6585   001916  B681               	btfsc	129,3,c	;volatile
  6586   001918  D002               	goto	l238
  6587                           
  6588                           ;matrix_keypad.c: 33: {;matrix_keypad.c: 34: return 7;
  6589   00191A  0E07               	movlw	7
  6590   00191C  0012               	return	
  6591   00191E                     l238:
  6592                           
  6593                           ;matrix_keypad.c: 36: else if (PORTBbits.RB4 == 0)
  6594   00191E  B881               	btfsc	129,4,c	;volatile
  6595   001920  D002               	goto	l235
  6596                           
  6597                           ;matrix_keypad.c: 37: {;matrix_keypad.c: 38: return 10;
  6598   001922  0E0A               	movlw	10
  6599   001924  0012               	return	
  6600   001926                     l235:
  6601                           
  6602                           ;matrix_keypad.c: 39: };matrix_keypad.c: 41: PORTBbits.RB5 = 1;
  6603   001926  8A81               	bsf	129,5,c	;volatile
  6604                           
  6605                           ;matrix_keypad.c: 42: PORTBbits.RB6 = 0;
  6606   001928  9C81               	bcf	129,6,c	;volatile
  6607                           
  6608                           ;matrix_keypad.c: 43: PORTBbits.RB7 = 1;
  6609   00192A  8E81               	bsf	129,7,c	;volatile
  6610                           
  6611                           ;matrix_keypad.c: 45: if (PORTBbits.RB1 == 0)
  6612   00192C  B281               	btfsc	129,1,c	;volatile
  6613   00192E  D002               	goto	l241
  6614                           
  6615                           ;matrix_keypad.c: 46: {;matrix_keypad.c: 47: return 2;
  6616   001930  0E02               	movlw	2
  6617   001932  0012               	return	
  6618   001934                     l241:
  6619                           
  6620                           ;matrix_keypad.c: 49: else if (PORTBbits.RB2 == 0)
  6621   001934  B481               	btfsc	129,2,c	;volatile
  6622   001936  D002               	goto	l243
  6623                           
  6624                           ;matrix_keypad.c: 50: {;matrix_keypad.c: 51: return 5;
  6625   001938  0E05               	movlw	5
  6626   00193A  0012               	return	
  6627   00193C                     l243:
  6628                           
  6629                           ;matrix_keypad.c: 53: else if (PORTBbits.RB3 == 0)
  6630   00193C  B681               	btfsc	129,3,c	;volatile
  6631   00193E  D002               	goto	l245
  6632                           
  6633                           ;matrix_keypad.c: 54: {;matrix_keypad.c: 55: return 8;
  6634   001940  0E08               	movlw	8
  6635   001942  0012               	return	
  6636   001944                     l245:
  6637                           
  6638                           ;matrix_keypad.c: 57: else if (PORTBbits.RB4 == 0)
  6639   001944  B881               	btfsc	129,4,c	;volatile
  6640   001946  D002               	goto	l242
  6641                           
  6642                           ;matrix_keypad.c: 58: {;matrix_keypad.c: 59: return 11;
  6643   001948  0E0B               	movlw	11
  6644   00194A  0012               	return	
  6645   00194C                     l242:
  6646                           
  6647                           ;matrix_keypad.c: 60: };matrix_keypad.c: 62: PORTBbits.RB5 = 1;
  6648   00194C  8A81               	bsf	129,5,c	;volatile
  6649                           
  6650                           ;matrix_keypad.c: 63: PORTBbits.RB6 = 1;
  6651   00194E  8C81               	bsf	129,6,c	;volatile
  6652                           
  6653                           ;matrix_keypad.c: 64: PORTBbits.RB7 = 0;
  6654   001950  9E81               	bcf	129,7,c	;volatile
  6655                           
  6656                           ;matrix_keypad.c: 66: PORTBbits.RB7 = 0;
  6657   001952  9E81               	bcf	129,7,c	;volatile
  6658                           
  6659                           ;matrix_keypad.c: 68: if (PORTBbits.RB1 == 0)
  6660   001954  B281               	btfsc	129,1,c	;volatile
  6661   001956  D002               	goto	l248
  6662                           
  6663                           ;matrix_keypad.c: 69: {;matrix_keypad.c: 70: return 3;
  6664   001958  0E03               	movlw	3
  6665   00195A  0012               	return	
  6666   00195C                     l248:
  6667                           
  6668                           ;matrix_keypad.c: 72: else if (PORTBbits.RB2 == 0)
  6669   00195C  B481               	btfsc	129,2,c	;volatile
  6670   00195E  D002               	goto	l250
  6671                           
  6672                           ;matrix_keypad.c: 73: {;matrix_keypad.c: 74: return 6;
  6673   001960  0E06               	movlw	6
  6674   001962  0012               	return	
  6675   001964                     l250:
  6676                           
  6677                           ;matrix_keypad.c: 76: else if (PORTBbits.RB3 == 0)
  6678   001964  B681               	btfsc	129,3,c	;volatile
  6679   001966  D002               	goto	l252
  6680                           
  6681                           ;matrix_keypad.c: 77: {;matrix_keypad.c: 78: return 9;
  6682   001968  0E09               	movlw	9
  6683   00196A  0012               	return	
  6684   00196C                     l252:
  6685                           
  6686                           ;matrix_keypad.c: 80: else if (PORTBbits.RB4 == 0)
  6687   00196C  B881               	btfsc	129,4,c	;volatile
  6688   00196E  D002               	goto	l251
  6689                           
  6690                           ;matrix_keypad.c: 81: {;matrix_keypad.c: 82: return 12;
  6691   001970  0E0C               	movlw	12
  6692   001972  0012               	return	
  6693   001974                     l251:
  6694                           
  6695                           ;matrix_keypad.c: 83: };matrix_keypad.c: 85: return 0xFF;
  6696   001974  0EFF               	movlw	255
  6697   001976  0012               	return		;funcret
  6698   001978                     __end_of_scan_key:
  6699                           	callstack 0
  6700                           
  6701 ;; *************** function _read_external_eeprom *****************
  6702 ;; Defined at:
  6703 ;;		line 15 in file "eeprom.c"
  6704 ;; Parameters:    Size  Location     Type
  6705 ;;  address         1    wreg     unsigned char 
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;  address         1    1[COMRAM] unsigned char 
  6708 ;;  data            1    2[COMRAM] unsigned char 
  6709 ;; Return value:  Size  Location     Type
  6710 ;;                  1    wreg      unsigned char 
  6711 ;; Registers used:
  6712 ;;		wreg, status,2, cstack
  6713 ;; Tracked objects:
  6714 ;;		On entry : 0/0
  6715 ;;		On exit  : 0/0
  6716 ;;		Unchanged: 0/0
  6717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6718 ;;      Params:         0       0       0       0       0       0       0
  6719 ;;      Locals:         2       0       0       0       0       0       0
  6720 ;;      Temps:          0       0       0       0       0       0       0
  6721 ;;      Totals:         2       0       0       0       0       0       0
  6722 ;;Total ram usage:        2 bytes
  6723 ;; Hardware stack levels used: 1
  6724 ;; Hardware stack levels required when called: 3
  6725 ;; This function calls:
  6726 ;;		_i2c_read
  6727 ;;		_i2c_rep_start
  6728 ;;		_i2c_start
  6729 ;;		_i2c_stop
  6730 ;;		_i2c_write
  6731 ;; This function is called by:
  6732 ;;		_get_password
  6733 ;;		_print_to_console
  6734 ;;		_print_log_to_clcd
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           	psect	text35
  6739   0014A0                     __ptext35:
  6740                           	callstack 0
  6741   0014A0                     _read_external_eeprom:
  6742                           	callstack 24
  6743                           
  6744                           ;incstack = 0
  6745                           ;read_external_eeprom@address stored from wreg
  6746   0014A0  6E02               	movwf	read_external_eeprom@address^0,c
  6747                           
  6748                           ;eeprom.c: 17: unsigned char data;;eeprom.c: 19: i2c_start();
  6749   0014A2  ECC7  F009         	call	_i2c_start	;wreg free
  6750                           
  6751                           ;eeprom.c: 20: i2c_write(0xA0);
  6752   0014A6  0EA0               	movlw	160
  6753   0014A8  ECD5  F009         	call	_i2c_write
  6754                           
  6755                           ;eeprom.c: 21: i2c_write(address);
  6756   0014AC  5002               	movf	read_external_eeprom@address^0,w,c
  6757   0014AE  ECD5  F009         	call	_i2c_write
  6758                           
  6759                           ;eeprom.c: 22: i2c_rep_start();
  6760   0014B2  ECC3  F009         	call	_i2c_rep_start	;wreg free
  6761                           
  6762                           ;eeprom.c: 23: i2c_write(0xA1);
  6763   0014B6  0EA1               	movlw	161
  6764   0014B8  ECD5  F009         	call	_i2c_write
  6765                           
  6766                           ;eeprom.c: 24: data = i2c_read();
  6767   0014BC  ECCF  F009         	call	_i2c_read	;wreg free
  6768   0014C0  6E03               	movwf	read_external_eeprom@data^0,c
  6769                           
  6770                           ;eeprom.c: 25: i2c_stop();
  6771   0014C2  ECCB  F009         	call	_i2c_stop	;wreg free
  6772                           
  6773                           ;eeprom.c: 27: return data;
  6774   0014C6  5003               	movf	read_external_eeprom@data^0,w,c
  6775   0014C8  0012               	return		;funcret
  6776   0014CA                     __end_of_read_external_eeprom:
  6777                           	callstack 0
  6778                           
  6779 ;; *************** function _i2c_write *****************
  6780 ;; Defined at:
  6781 ;;		line 54 in file "i2c.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;  data            1    wreg     unsigned char 
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;  data            1    0[COMRAM] unsigned char 
  6786 ;; Return value:  Size  Location     Type
  6787 ;;                  1    wreg      void 
  6788 ;; Registers used:
  6789 ;;		wreg, cstack
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6795 ;;      Params:         0       0       0       0       0       0       0
  6796 ;;      Locals:         1       0       0       0       0       0       0
  6797 ;;      Temps:          0       0       0       0       0       0       0
  6798 ;;      Totals:         1       0       0       0       0       0       0
  6799 ;;Total ram usage:        1 bytes
  6800 ;; Hardware stack levels used: 1
  6801 ;; Hardware stack levels required when called: 1
  6802 ;; This function calls:
  6803 ;;		_i2c_idle
  6804 ;; This function is called by:
  6805 ;;		_write_ds1307
  6806 ;;		_read_ds1307
  6807 ;;		_write_external_eeprom
  6808 ;;		_read_external_eeprom
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           	psect	text36
  6813   0013AA                     __ptext36:
  6814                           	callstack 0
  6815   0013AA                     _i2c_write:
  6816                           	callstack 27
  6817                           
  6818                           ;incstack = 0
  6819                           ;i2c_write@data stored from wreg
  6820   0013AA  6E01               	movwf	i2c_write@data^0,c
  6821                           
  6822                           ;i2c.c: 56: SSPBUF = data;
  6823   0013AC  C001  FFC9         	movff	i2c_write@data,4041	;volatile
  6824                           
  6825                           ;i2c.c: 57: i2c_idle();
  6826   0013B0  ECBB  F009         	call	_i2c_idle	;wreg free
  6827   0013B4  0012               	return		;funcret
  6828   0013B6                     __end_of_i2c_write:
  6829                           	callstack 0
  6830                           
  6831 ;; *************** function _i2c_stop *****************
  6832 ;; Defined at:
  6833 ;;		line 42 in file "i2c.c"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;		None
  6836 ;; Auto vars:     Size  Location     Type
  6837 ;;		None
  6838 ;; Return value:  Size  Location     Type
  6839 ;;                  1    wreg      void 
  6840 ;; Registers used:
  6841 ;;		cstack
  6842 ;; Tracked objects:
  6843 ;;		On entry : 0/0
  6844 ;;		On exit  : 0/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6847 ;;      Params:         0       0       0       0       0       0       0
  6848 ;;      Locals:         0       0       0       0       0       0       0
  6849 ;;      Temps:          0       0       0       0       0       0       0
  6850 ;;      Totals:         0       0       0       0       0       0       0
  6851 ;;Total ram usage:        0 bytes
  6852 ;; Hardware stack levels used: 1
  6853 ;; Hardware stack levels required when called: 1
  6854 ;; This function calls:
  6855 ;;		_i2c_idle
  6856 ;; This function is called by:
  6857 ;;		_write_ds1307
  6858 ;;		_read_ds1307
  6859 ;;		_write_external_eeprom
  6860 ;;		_read_external_eeprom
  6861 ;; This function uses a non-reentrant model
  6862 ;;
  6863                           
  6864                           	psect	text37
  6865   001396                     __ptext37:
  6866                           	callstack 0
  6867   001396                     _i2c_stop:
  6868                           	callstack 27
  6869                           
  6870                           ;i2c.c: 44: PEN = 1;
  6871                           
  6872                           ;incstack = 0
  6873   001396  84C5               	bsf	4037,2,c	;volatile
  6874                           
  6875                           ;i2c.c: 45: i2c_idle();
  6876   001398  ECBB  F009         	call	_i2c_idle	;wreg free
  6877   00139C  0012               	return		;funcret
  6878   00139E                     __end_of_i2c_stop:
  6879                           	callstack 0
  6880                           
  6881 ;; *************** function _i2c_start *****************
  6882 ;; Defined at:
  6883 ;;		line 36 in file "i2c.c"
  6884 ;; Parameters:    Size  Location     Type
  6885 ;;		None
  6886 ;; Auto vars:     Size  Location     Type
  6887 ;;		None
  6888 ;; Return value:  Size  Location     Type
  6889 ;;                  1    wreg      void 
  6890 ;; Registers used:
  6891 ;;		cstack
  6892 ;; Tracked objects:
  6893 ;;		On entry : 0/0
  6894 ;;		On exit  : 0/0
  6895 ;;		Unchanged: 0/0
  6896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6897 ;;      Params:         0       0       0       0       0       0       0
  6898 ;;      Locals:         0       0       0       0       0       0       0
  6899 ;;      Temps:          0       0       0       0       0       0       0
  6900 ;;      Totals:         0       0       0       0       0       0       0
  6901 ;;Total ram usage:        0 bytes
  6902 ;; Hardware stack levels used: 1
  6903 ;; Hardware stack levels required when called: 1
  6904 ;; This function calls:
  6905 ;;		_i2c_idle
  6906 ;; This function is called by:
  6907 ;;		_write_ds1307
  6908 ;;		_read_ds1307
  6909 ;;		_write_external_eeprom
  6910 ;;		_read_external_eeprom
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	text38
  6915   00138E                     __ptext38:
  6916                           	callstack 0
  6917   00138E                     _i2c_start:
  6918                           	callstack 27
  6919                           
  6920                           ;i2c.c: 38: SEN = 1;
  6921                           
  6922                           ;incstack = 0
  6923   00138E  80C5               	bsf	4037,0,c	;volatile
  6924                           
  6925                           ;i2c.c: 39: i2c_idle();
  6926   001390  ECBB  F009         	call	_i2c_idle	;wreg free
  6927   001394  0012               	return		;funcret
  6928   001396                     __end_of_i2c_start:
  6929                           	callstack 0
  6930                           
  6931 ;; *************** function _i2c_rep_start *****************
  6932 ;; Defined at:
  6933 ;;		line 48 in file "i2c.c"
  6934 ;; Parameters:    Size  Location     Type
  6935 ;;		None
  6936 ;; Auto vars:     Size  Location     Type
  6937 ;;		None
  6938 ;; Return value:  Size  Location     Type
  6939 ;;                  1    wreg      void 
  6940 ;; Registers used:
  6941 ;;		cstack
  6942 ;; Tracked objects:
  6943 ;;		On entry : 0/0
  6944 ;;		On exit  : 0/0
  6945 ;;		Unchanged: 0/0
  6946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6947 ;;      Params:         0       0       0       0       0       0       0
  6948 ;;      Locals:         0       0       0       0       0       0       0
  6949 ;;      Temps:          0       0       0       0       0       0       0
  6950 ;;      Totals:         0       0       0       0       0       0       0
  6951 ;;Total ram usage:        0 bytes
  6952 ;; Hardware stack levels used: 1
  6953 ;; Hardware stack levels required when called: 1
  6954 ;; This function calls:
  6955 ;;		_i2c_idle
  6956 ;; This function is called by:
  6957 ;;		_read_ds1307
  6958 ;;		_read_external_eeprom
  6959 ;; This function uses a non-reentrant model
  6960 ;;
  6961                           
  6962                           	psect	text39
  6963   001386                     __ptext39:
  6964                           	callstack 0
  6965   001386                     _i2c_rep_start:
  6966                           	callstack 26
  6967                           
  6968                           ;i2c.c: 50: RSEN = 1;
  6969                           
  6970                           ;incstack = 0
  6971   001386  82C5               	bsf	4037,1,c	;volatile
  6972                           
  6973                           ;i2c.c: 51: i2c_idle();
  6974   001388  ECBB  F009         	call	_i2c_idle	;wreg free
  6975   00138C  0012               	return		;funcret
  6976   00138E                     __end_of_i2c_rep_start:
  6977                           	callstack 0
  6978                           
  6979 ;; *************** function _i2c_read *****************
  6980 ;; Defined at:
  6981 ;;		line 72 in file "i2c.c"
  6982 ;; Parameters:    Size  Location     Type
  6983 ;;		None
  6984 ;; Auto vars:     Size  Location     Type
  6985 ;;		None
  6986 ;; Return value:  Size  Location     Type
  6987 ;;                  1    wreg      unsigned char 
  6988 ;; Registers used:
  6989 ;;		wreg, status,2, cstack
  6990 ;; Tracked objects:
  6991 ;;		On entry : 0/0
  6992 ;;		On exit  : 0/0
  6993 ;;		Unchanged: 0/0
  6994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6995 ;;      Params:         0       0       0       0       0       0       0
  6996 ;;      Locals:         0       0       0       0       0       0       0
  6997 ;;      Temps:          0       0       0       0       0       0       0
  6998 ;;      Totals:         0       0       0       0       0       0       0
  6999 ;;Total ram usage:        0 bytes
  7000 ;; Hardware stack levels used: 1
  7001 ;; Hardware stack levels required when called: 2
  7002 ;; This function calls:
  7003 ;;		_i2c_no_ack
  7004 ;;		_i2c_rx_mode
  7005 ;; This function is called by:
  7006 ;;		_read_ds1307
  7007 ;;		_read_external_eeprom
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           	psect	text40
  7012   00139E                     __ptext40:
  7013                           	callstack 0
  7014   00139E                     _i2c_read:
  7015                           	callstack 25
  7016                           
  7017                           ;i2c.c: 74: i2c_rx_mode();
  7018                           
  7019                           ;incstack = 0
  7020   00139E  ECBF  F009         	call	_i2c_rx_mode	;wreg free
  7021                           
  7022                           ;i2c.c: 75: i2c_no_ack();
  7023   0013A2  ECB4  F009         	call	_i2c_no_ack	;wreg free
  7024                           
  7025                           ;i2c.c: 77: return SSPBUF;
  7026   0013A6  50C9               	movf	201,w,c	;volatile
  7027   0013A8  0012               	return		;funcret
  7028   0013AA                     __end_of_i2c_read:
  7029                           	callstack 0
  7030                           
  7031 ;; *************** function _i2c_rx_mode *****************
  7032 ;; Defined at:
  7033 ;;		line 60 in file "i2c.c"
  7034 ;; Parameters:    Size  Location     Type
  7035 ;;		None
  7036 ;; Auto vars:     Size  Location     Type
  7037 ;;		None
  7038 ;; Return value:  Size  Location     Type
  7039 ;;                  1    wreg      void 
  7040 ;; Registers used:
  7041 ;;		cstack
  7042 ;; Tracked objects:
  7043 ;;		On entry : 0/0
  7044 ;;		On exit  : 0/0
  7045 ;;		Unchanged: 0/0
  7046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7047 ;;      Params:         0       0       0       0       0       0       0
  7048 ;;      Locals:         0       0       0       0       0       0       0
  7049 ;;      Temps:          0       0       0       0       0       0       0
  7050 ;;      Totals:         0       0       0       0       0       0       0
  7051 ;;Total ram usage:        0 bytes
  7052 ;; Hardware stack levels used: 1
  7053 ;; Hardware stack levels required when called: 1
  7054 ;; This function calls:
  7055 ;;		_i2c_idle
  7056 ;; This function is called by:
  7057 ;;		_i2c_read
  7058 ;; This function uses a non-reentrant model
  7059 ;;
  7060                           
  7061                           	psect	text41
  7062   00137E                     __ptext41:
  7063                           	callstack 0
  7064   00137E                     _i2c_rx_mode:
  7065                           	callstack 25
  7066                           
  7067                           ;i2c.c: 62: RCEN = 1;
  7068                           
  7069                           ;incstack = 0
  7070   00137E  86C5               	bsf	4037,3,c	;volatile
  7071                           
  7072                           ;i2c.c: 63: i2c_idle();
  7073   001380  ECBB  F009         	call	_i2c_idle	;wreg free
  7074   001384  0012               	return		;funcret
  7075   001386                     __end_of_i2c_rx_mode:
  7076                           	callstack 0
  7077                           
  7078 ;; *************** function _i2c_idle *****************
  7079 ;; Defined at:
  7080 ;;		line 22 in file "i2c.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;		None
  7083 ;; Auto vars:     Size  Location     Type
  7084 ;;		None
  7085 ;; Return value:  Size  Location     Type
  7086 ;;                  1    wreg      void 
  7087 ;; Registers used:
  7088 ;;		None
  7089 ;; Tracked objects:
  7090 ;;		On entry : 0/0
  7091 ;;		On exit  : 0/0
  7092 ;;		Unchanged: 0/0
  7093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7094 ;;      Params:         0       0       0       0       0       0       0
  7095 ;;      Locals:         0       0       0       0       0       0       0
  7096 ;;      Temps:          0       0       0       0       0       0       0
  7097 ;;      Totals:         0       0       0       0       0       0       0
  7098 ;;Total ram usage:        0 bytes
  7099 ;; Hardware stack levels used: 1
  7100 ;; This function calls:
  7101 ;;		Nothing
  7102 ;; This function is called by:
  7103 ;;		_i2c_start
  7104 ;;		_i2c_stop
  7105 ;;		_i2c_rep_start
  7106 ;;		_i2c_write
  7107 ;;		_i2c_rx_mode
  7108 ;; This function uses a non-reentrant model
  7109 ;;
  7110                           
  7111                           	psect	text42
  7112   001376                     __ptext42:
  7113                           	callstack 0
  7114   001376                     _i2c_idle:
  7115                           	callstack 27
  7116                           
  7117                           ;i2c.c: 24: while (!SSPIF);
  7118                           
  7119                           ;incstack = 0
  7120   001376  A69E               	btfss	3998,3,c	;volatile
  7121   001378  D7FE               	goto	__ptext42
  7122                           
  7123                           ;i2c.c: 25: SSPIF = 0;
  7124   00137A  969E               	bcf	3998,3,c	;volatile
  7125   00137C  0012               	return		;funcret
  7126   00137E                     __end_of_i2c_idle:
  7127                           	callstack 0
  7128                           
  7129 ;; *************** function _i2c_no_ack *****************
  7130 ;; Defined at:
  7131 ;;		line 66 in file "i2c.c"
  7132 ;; Parameters:    Size  Location     Type
  7133 ;;		None
  7134 ;; Auto vars:     Size  Location     Type
  7135 ;;		None
  7136 ;; Return value:  Size  Location     Type
  7137 ;;                  1    wreg      void 
  7138 ;; Registers used:
  7139 ;;		None
  7140 ;; Tracked objects:
  7141 ;;		On entry : 0/0
  7142 ;;		On exit  : 0/0
  7143 ;;		Unchanged: 0/0
  7144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7145 ;;      Params:         0       0       0       0       0       0       0
  7146 ;;      Locals:         0       0       0       0       0       0       0
  7147 ;;      Temps:          0       0       0       0       0       0       0
  7148 ;;      Totals:         0       0       0       0       0       0       0
  7149 ;;Total ram usage:        0 bytes
  7150 ;; Hardware stack levels used: 1
  7151 ;; This function calls:
  7152 ;;		Nothing
  7153 ;; This function is called by:
  7154 ;;		_i2c_read
  7155 ;; This function uses a non-reentrant model
  7156 ;;
  7157                           
  7158                           	psect	text43
  7159   001368                     __ptext43:
  7160                           	callstack 0
  7161   001368                     _i2c_no_ack:
  7162                           	callstack 26
  7163                           
  7164                           ;i2c.c: 68: ACKDT = 1;
  7165                           
  7166                           ;incstack = 0
  7167   001368  8AC5               	bsf	4037,5,c	;volatile
  7168                           
  7169                           ;i2c.c: 69: ACKEN = 1;
  7170   00136A  88C5               	bsf	4037,4,c	;volatile
  7171   00136C  0012               	return		;funcret
  7172   00136E                     __end_of_i2c_no_ack:
  7173                           	callstack 0
  7174                           
  7175 ;; *************** function _clcd_putch *****************
  7176 ;; Defined at:
  7177 ;;		line 51 in file "clcd.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;  data            1    wreg     const unsigned char 
  7180 ;;  addr            1    3[COMRAM] unsigned char 
  7181 ;; Auto vars:     Size  Location     Type
  7182 ;;  data            1    4[COMRAM] const unsigned char 
  7183 ;; Return value:  Size  Location     Type
  7184 ;;                  1    wreg      void 
  7185 ;; Registers used:
  7186 ;;		wreg, status,2, cstack
  7187 ;; Tracked objects:
  7188 ;;		On entry : 0/0
  7189 ;;		On exit  : 0/0
  7190 ;;		Unchanged: 0/0
  7191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7192 ;;      Params:         1       0       0       0       0       0       0
  7193 ;;      Locals:         1       0       0       0       0       0       0
  7194 ;;      Temps:          0       0       0       0       0       0       0
  7195 ;;      Totals:         2       0       0       0       0       0       0
  7196 ;;Total ram usage:        2 bytes
  7197 ;; Hardware stack levels used: 1
  7198 ;; Hardware stack levels required when called: 1
  7199 ;; This function calls:
  7200 ;;		_clcd_write
  7201 ;; This function is called by:
  7202 ;;		_go_to_menu
  7203 ;;		_main
  7204 ;;		_set_time
  7205 ;;		_get_password
  7206 ;;		_change_password
  7207 ;;		_print_log_to_clcd
  7208 ;;		_view_log
  7209 ;; This function uses a non-reentrant model
  7210 ;;
  7211                           
  7212                           	psect	text44
  7213   0013FE                     __ptext44:
  7214                           	callstack 0
  7215   0013FE                     _clcd_putch:
  7216                           	callstack 26
  7217                           
  7218                           ;incstack = 0
  7219                           ;clcd_putch@data stored from wreg
  7220   0013FE  6E05               	movwf	clcd_putch@data^0,c
  7221                           
  7222                           ;clcd.c: 53: clcd_write(addr, 0);
  7223   001400  0E00               	movlw	0
  7224   001402  6E01               	movwf	clcd_write@control_bit^0,c
  7225   001404  5004               	movf	clcd_putch@addr^0,w,c
  7226   001406  EC3C  F00A         	call	_clcd_write
  7227                           
  7228                           ;clcd.c: 54: clcd_write(data, 1);
  7229   00140A  0E01               	movlw	1
  7230   00140C  6E01               	movwf	clcd_write@control_bit^0,c
  7231   00140E  5005               	movf	clcd_putch@data^0,w,c
  7232   001410  EC3C  F00A         	call	_clcd_write
  7233   001414  0012               	return		;funcret
  7234   001416                     __end_of_clcd_putch:
  7235                           	callstack 0
  7236                           
  7237 ;; *************** function _clcd_print *****************
  7238 ;; Defined at:
  7239 ;;		line 42 in file "clcd.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;  data            2    2[COMRAM] PTR const unsigned char 
  7242 ;;		 -> STR_26(6), STR_25(14), STR_24(17), STR_23(9), 
  7243 ;;		 -> STR_22(17), STR_21(14), STR_20(14), STR_19(15), 
  7244 ;;		 -> STR_18(8), STR_17(2), STR_16(2), STR_15(15), 
  7245 ;;		 -> STR_14(14), STR_13(15), STR_12(3), speed(3), 
  7246 ;;		 -> time(9), STR_11(17), STR_10(3), STR_9(14), 
  7247 ;;		 -> STR_8(10), STR_7(12), STR_6(17), STR_5(9), 
  7248 ;;		 -> STR_4(11), STR_3(11), STR_2(14), STR_1(10), 
  7249 ;;  addr            1    4[COMRAM] unsigned char 
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;		None
  7252 ;; Return value:  Size  Location     Type
  7253 ;;                  1    wreg      void 
  7254 ;; Registers used:
  7255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7256 ;; Tracked objects:
  7257 ;;		On entry : 0/0
  7258 ;;		On exit  : 0/0
  7259 ;;		Unchanged: 0/0
  7260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7261 ;;      Params:         3       0       0       0       0       0       0
  7262 ;;      Locals:         0       0       0       0       0       0       0
  7263 ;;      Temps:          0       0       0       0       0       0       0
  7264 ;;      Totals:         3       0       0       0       0       0       0
  7265 ;;Total ram usage:        3 bytes
  7266 ;; Hardware stack levels used: 1
  7267 ;; Hardware stack levels required when called: 1
  7268 ;; This function calls:
  7269 ;;		_clcd_write
  7270 ;; This function is called by:
  7271 ;;		_go_to_menu
  7272 ;;		_main
  7273 ;;		_set_time
  7274 ;;		_get_password
  7275 ;;		_change_password
  7276 ;;		_view_log
  7277 ;; This function uses a non-reentrant model
  7278 ;;
  7279                           
  7280                           	psect	text45
  7281   0017CE                     __ptext45:
  7282                           	callstack 0
  7283   0017CE                     _clcd_print:
  7284                           	callstack 27
  7285                           
  7286                           ;clcd.c: 44: clcd_write(addr, 0);
  7287                           
  7288                           ;incstack = 0
  7289   0017CE  0E00               	movlw	0
  7290   0017D0  6E01               	movwf	clcd_write@control_bit^0,c
  7291   0017D2  5005               	movf	clcd_print@addr^0,w,c
  7292   0017D4  EC3C  F00A         	call	_clcd_write
  7293                           
  7294                           ;clcd.c: 45: while (*data != '\0')
  7295   0017D8  D016               	goto	l2793
  7296   0017DA                     l2789:
  7297                           
  7298                           ;clcd.c: 46: {;clcd.c: 47: clcd_write(*data++, 1);
  7299   0017DA  0E01               	movlw	1
  7300   0017DC  6E01               	movwf	clcd_write@control_bit^0,c
  7301   0017DE  C003  FFF6         	movff	clcd_print@data,tblptrl
  7302   0017E2  C004  FFF7         	movff	clcd_print@data+1,tblptrh
  7303   0017E6  6AF8               	clrf	tblptru,c
  7304   0017E8  0E05               	movlw	(high __ramtop+-1)
  7305   0017EA  64F7               	cpfsgt	tblptrh,c
  7306   0017EC  D003               	bra	u1427
  7307   0017EE  0008               	tblrd		*
  7308   0017F0  50F5               	movf	tablat,w,c
  7309   0017F2  D005               	bra	u1420
  7310   0017F4                     u1427:
  7311   0017F4  CFF6 FFE9          	movff	tblptrl,fsr0l
  7312   0017F8  CFF7 FFEA          	movff	tblptrh,fsr0h
  7313   0017FC  50EF               	movf	indf0,w,c
  7314   0017FE                     u1420:
  7315   0017FE  EC3C  F00A         	call	_clcd_write
  7316   001802  4A03               	infsnz	clcd_print@data^0,f,c
  7317   001804  2A04               	incf	(clcd_print@data+1)^0,f,c
  7318   001806                     l2793:
  7319   001806  C003  FFF6         	movff	clcd_print@data,tblptrl
  7320   00180A  C004  FFF7         	movff	clcd_print@data+1,tblptrh
  7321   00180E  6AF8               	clrf	tblptru,c
  7322   001810  0E05               	movlw	(high __ramtop+-1)
  7323   001812  64F7               	cpfsgt	tblptrh,c
  7324   001814  D003               	bra	u1437
  7325   001816  0008               	tblrd		*
  7326   001818  50F5               	movf	tablat,w,c
  7327   00181A  D005               	bra	u1430
  7328   00181C                     u1437:
  7329   00181C  CFF6 FFE9          	movff	tblptrl,fsr0l
  7330   001820  CFF7 FFEA          	movff	tblptrh,fsr0h
  7331   001824  50EF               	movf	indf0,w,c
  7332   001826                     u1430:
  7333   001826  0900               	iorlw	0
  7334   001828  B4D8               	btfsc	status,2,c
  7335   00182A  0012               	return	
  7336   00182C  D7D6               	goto	l2789
  7337   00182E                     __end_of_clcd_print:
  7338                           	callstack 0
  7339                           
  7340 ;; *************** function _clcd_write *****************
  7341 ;; Defined at:
  7342 ;;		line 4 in file "clcd.c"
  7343 ;; Parameters:    Size  Location     Type
  7344 ;;  byte            1    wreg     unsigned char 
  7345 ;;  control_bit     1    0[COMRAM] unsigned char 
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;  byte            1    1[COMRAM] unsigned char 
  7348 ;; Return value:  Size  Location     Type
  7349 ;;                  1    wreg      void 
  7350 ;; Registers used:
  7351 ;;		wreg
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7357 ;;      Params:         1       0       0       0       0       0       0
  7358 ;;      Locals:         1       0       0       0       0       0       0
  7359 ;;      Temps:          0       0       0       0       0       0       0
  7360 ;;      Totals:         2       0       0       0       0       0       0
  7361 ;;Total ram usage:        2 bytes
  7362 ;; Hardware stack levels used: 1
  7363 ;; This function calls:
  7364 ;;		Nothing
  7365 ;; This function is called by:
  7366 ;;		_go_to_menu
  7367 ;;		_set_time
  7368 ;;		_init_clcd
  7369 ;;		_clcd_print
  7370 ;;		_clcd_putch
  7371 ;;		_get_password
  7372 ;;		_change_password
  7373 ;; This function uses a non-reentrant model
  7374 ;;
  7375                           
  7376                           	psect	text46
  7377   001478                     __ptext46:
  7378                           	callstack 0
  7379   001478                     _clcd_write:
  7380                           	callstack 28
  7381                           
  7382                           ;incstack = 0
  7383                           ;clcd_write@byte stored from wreg
  7384   001478  6E02               	movwf	clcd_write@byte^0,c
  7385                           
  7386                           ;clcd.c: 6: PORTCbits.RC1 = control_bit;
  7387   00147A  B001               	btfsc	clcd_write@control_bit^0,0,c
  7388   00147C  D002               	bra	u1285
  7389   00147E  9282               	bcf	130,1,c	;volatile
  7390   001480  D001               	bra	u1286
  7391   001482                     u1285:
  7392   001482  8282               	bsf	130,1,c	;volatile
  7393   001484                     u1286:
  7394                           
  7395                           ;clcd.c: 7: PORTD = byte;
  7396   001484  C002  FF83         	movff	clcd_write@byte,3971	;volatile
  7397                           
  7398                           ;clcd.c: 10: PORTCbits.RC2 = 1;
  7399   001488  8482               	bsf	130,2,c	;volatile
  7400                           
  7401                           ;clcd.c: 11: PORTCbits.RC2 = 0;
  7402   00148A  9482               	bcf	130,2,c	;volatile
  7403                           
  7404                           ;clcd.c: 13: TRISD7 = 0xFF;
  7405   00148C  8E95               	bsf	3989,7,c	;volatile
  7406                           
  7407                           ;clcd.c: 14: PORTCbits.RC0 = 1;
  7408   00148E  8082               	bsf	130,0,c	;volatile
  7409                           
  7410                           ;clcd.c: 15: PORTCbits.RC1 = 0;
  7411   001490  9282               	bcf	130,1,c	;volatile
  7412   001492                     l2669:
  7413                           
  7414                           ;clcd.c: 18: {;clcd.c: 19: PORTCbits.RC2 = 1;
  7415   001492  8482               	bsf	130,2,c	;volatile
  7416                           
  7417                           ;clcd.c: 20: PORTCbits.RC2 = 0;
  7418   001494  9482               	bcf	130,2,c	;volatile
  7419                           
  7420                           ;clcd.c: 21: } while (PORTDbits.RD7);
  7421   001496  BE83               	btfsc	131,7,c	;volatile
  7422   001498  D7FC               	goto	l2669
  7423                           
  7424                           ;clcd.c: 23: PORTCbits.RC0 = 0;
  7425   00149A  9082               	bcf	130,0,c	;volatile
  7426                           
  7427                           ;clcd.c: 24: TRISD7 = 0x00;
  7428   00149C  9E95               	bcf	3989,7,c	;volatile
  7429   00149E  0012               	return		;funcret
  7430   0014A0                     __end_of_clcd_write:
  7431                           	callstack 0
  7432                           
  7433                           	psect	rparam
  7434   000000                     tosu	equ	0xFFF
  7435                           tosh	equ	0xFFE
  7436                           tosl	equ	0xFFD
  7437                           stkptr	equ	0xFFC
  7438                           pclatu	equ	0xFFB
  7439                           pclath	equ	0xFFA
  7440                           pcl	equ	0xFF9
  7441                           tblptru	equ	0xFF8
  7442                           tblptrh	equ	0xFF7
  7443                           tblptrl	equ	0xFF6
  7444                           tablat	equ	0xFF5
  7445                           prodh	equ	0xFF4
  7446                           prodl	equ	0xFF3
  7447                           indf0	equ	0xFEF
  7448                           postinc0	equ	0xFEE
  7449                           postdec0	equ	0xFED
  7450                           preinc0	equ	0xFEC
  7451                           plusw0	equ	0xFEB
  7452                           fsr0h	equ	0xFEA
  7453                           fsr0l	equ	0xFE9
  7454                           wreg	equ	0xFE8
  7455                           indf1	equ	0xFE7
  7456                           postinc1	equ	0xFE6
  7457                           postdec1	equ	0xFE5
  7458                           preinc1	equ	0xFE4
  7459                           plusw1	equ	0xFE3
  7460                           fsr1h	equ	0xFE2
  7461                           fsr1l	equ	0xFE1
  7462                           bsr	equ	0xFE0
  7463                           indf2	equ	0xFDF
  7464                           postinc2	equ	0xFDE
  7465                           postdec2	equ	0xFDD
  7466                           preinc2	equ	0xFDC
  7467                           plusw2	equ	0xFDB
  7468                           fsr2h	equ	0xFDA
  7469                           fsr2l	equ	0xFD9
  7470                           status	equ	0xFD8

Data Sizes:
    Strings     291
    Constant    0
    Data        26
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     58      94
    BANK0           160      0      43
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    clcd_print@data	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_26(CODE[6]), STR_25(CODE[14]), STR_24(CODE[17]), STR_23(CODE[9]), 
		 -> STR_22(CODE[17]), STR_21(CODE[14]), STR_20(CODE[14]), STR_19(CODE[15]), 
		 -> STR_18(CODE[8]), STR_17(CODE[2]), STR_16(CODE[2]), STR_15(CODE[15]), 
		 -> STR_14(CODE[14]), STR_13(CODE[15]), STR_12(CODE[3]), speed(COMRAM[3]), 
		 -> time(COMRAM[9]), STR_11(CODE[17]), STR_10(CODE[3]), STR_9(CODE[14]), 
		 -> STR_8(CODE[10]), STR_7(CODE[12]), STR_6(CODE[17]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), STR_3(CODE[11]), STR_2(CODE[14]), STR_1(CODE[10]), 

    go_to_menu@menu	PTR const unsigned char [5] size(2) Largest target is 14
		 -> STR_5(CODE[9]), STR_4(CODE[11]), STR_3(CODE[11]), STR_2(CODE[14]), 
		 -> STR_1(CODE[10]), 

    go_to_menu@F10378	PTR const unsigned char [5] size(2) Largest target is 14
		 -> STR_5(CODE[9]), STR_4(CODE[11]), STR_3(CODE[11]), STR_2(CODE[14]), 
		 -> STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    _main->_get_speed
    _init_config->_init_ds1307
    _init_ds1307->_write_ds1307
    _init_clcd->_clcd_write
    _go_to_menu->_set_time
    _view_log->_delay
    _view_log->_print_log_to_clcd
    _print_log_to_clcd->_clcd_putch
    _store_key_log->___awmod
    _set_time->_write_ds1307
    _write_ds1307->___awdiv
    _print_to_console->_read_external_eeprom
    _change_password->_delay
    _write_external_eeprom->_i2c_write
    _get_time->_read_ds1307
    _read_ds1307->_i2c_write
    _get_speed->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft
    _get_password->_clcd_print
    _get_password->_clcd_putch
    _read_external_eeprom->_i2c_write
    _clcd_putch->_read_external_eeprom
    _clcd_print->_clcd_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  130195
                         _clcd_print
                         _clcd_putch
                              _delay
                       _get_password
                          _get_speed
                           _get_time
                         _go_to_menu
                        _init_config
                      _read_switches
                      _store_key_log
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0    5883
                           _init_adc
                          _init_clcd
                        _init_ds1307
                           _init_i2c
                 _init_matrix_keypad
                          _init_uart
              _write_external_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_matrix_keypad                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_i2c                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds1307                                          1     1      0    1114
                                             10 COMRAM     1     1      0
                        _read_ds1307
                       _write_ds1307
 ---------------------------------------------------------------------------------
 (2) _init_clcd                                            0     0      0    2476
                         _clcd_write
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _go_to_menu                                          26    26      0   80381
                                             33 COMRAM    20    20      0
                    _change_password
                         _clcd_print
                         _clcd_putch
                         _clcd_write
                              _delay
                   _print_to_console
                              _putch
                      _read_switches
                           _set_time
                      _store_key_log
                           _view_log
 ---------------------------------------------------------------------------------
 (2) _view_log                                            21    21      0   20058
                                              7 COMRAM    21    21      0
                         _clcd_print
                         _clcd_putch
                              _delay
                  _print_log_to_clcd
                      _read_switches
 ---------------------------------------------------------------------------------
 (3) _print_log_to_clcd                                    2     1      1    6687
                                              5 COMRAM     2     1      1
                         _clcd_putch
               _read_external_eeprom
 ---------------------------------------------------------------------------------
 (1) _store_key_log                                        1     1      0    4437
                                              6 COMRAM     1     1      0
                            ___awmod
              _write_external_eeprom
 ---------------------------------------------------------------------------------
 (2) _set_time                                            23    23      0   20735
                                             10 COMRAM    23    23      0
                            ___awdiv
                            ___awmod
                         _clcd_print
                         _clcd_putch
                         _clcd_write
                              _delay
                        _read_ds1307
                      _read_switches
                       _write_ds1307
 ---------------------------------------------------------------------------------
 (3) _write_ds1307                                         2     1      1     978
                                              8 COMRAM     2     1      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1968
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1212
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _print_to_console                                     2     0      2     385
                                              3 COMRAM     2     0      2
                              _putch
               _read_external_eeprom
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_password                                     20    20      0   18691
                                              7 COMRAM    20    20      0
                         _clcd_print
                         _clcd_putch
                         _clcd_write
                              _delay
                      _read_switches
              _write_external_eeprom
 ---------------------------------------------------------------------------------
 (2) _write_external_eeprom                                4     3      1    2293
                                              1 COMRAM     4     3      1
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (3) _delay                                                7     5      2     829
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _get_time                                             0     0      0      67
                        _read_ds1307
 ---------------------------------------------------------------------------------
 (3) _read_ds1307                                          2     2      0      67
                                              1 COMRAM     2     2      0
                           _i2c_read
                      _i2c_rep_start
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (1) _get_speed                                            2     2      0   10722
                                             56 COMRAM     2     2      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                            ___lwdiv
                            ___lwmod
                           ___lwtoft
                           _read_adc
 ---------------------------------------------------------------------------------
 (2) _read_adc                                             7     5      2      45
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2903
                                              8 COMRAM     3     0      3
                           ___ftpack
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     328
                                             41 COMRAM    15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3411
                                             26 COMRAM    15     9      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3365
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2805
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _get_password                                        23    23      0   15473
                                              5 COMRAM    23    23      0
                         _clcd_print
                         _clcd_putch
                         _clcd_write
               _read_external_eeprom
                      _read_switches
 ---------------------------------------------------------------------------------
 (1) _read_switches                                        1     1      0      44
                                              0 COMRAM     1     1      0
                           _scan_key
 ---------------------------------------------------------------------------------
 (2) _scan_key                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _read_external_eeprom                                 2     2      0      67
                                              1 COMRAM     2     2      0
                           _i2c_read
                      _i2c_rep_start
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (3) _i2c_write                                            1     1      0      22
                                              0 COMRAM     1     1      0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (3) _i2c_stop                                             0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (3) _i2c_start                                            0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_rep_start                                        0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_read                                             0     0      0       0
                         _i2c_no_ack
                        _i2c_rx_mode
 ---------------------------------------------------------------------------------
 (5) _i2c_rx_mode                                          0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_idle                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_no_ack                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _clcd_putch                                           2     1      1    6016
                                              3 COMRAM     2     1      1
                         _clcd_write
               _read_external_eeprom (ARG)
 ---------------------------------------------------------------------------------
 (3) _clcd_print                                           3     0      3    6343
                                              2 COMRAM     3     0      3
                         _clcd_write
 ---------------------------------------------------------------------------------
 (3) _clcd_write                                           2     1      1    2476
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clcd_print
     _clcd_write
   _clcd_putch
     _clcd_write
     _read_external_eeprom (ARG)
       _i2c_read
         _i2c_no_ack
         _i2c_rx_mode
           _i2c_idle
       _i2c_rep_start
         _i2c_idle
       _i2c_start
         _i2c_idle
       _i2c_stop
         _i2c_idle
       _i2c_write
         _i2c_idle
   _delay
   _get_password
     _clcd_print
     _clcd_putch
     _clcd_write
     _read_external_eeprom
     _read_switches
       _scan_key
   _get_speed
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _read_adc (ARG)
       _read_adc (ARG)
     ___ftmul
       ___ftdiv (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
       _read_adc (ARG)
     ___fttol
       ___ftdiv (ARG)
       ___ftmul (ARG)
       ___lwtoft (ARG)
       _read_adc (ARG)
     ___lwdiv
     ___lwmod
     ___lwtoft
     _read_adc
   _get_time
     _read_ds1307
       _i2c_read
       _i2c_rep_start
       _i2c_start
       _i2c_stop
       _i2c_write
   _go_to_menu
     _change_password
       _clcd_print
       _clcd_putch
       _clcd_write
       _delay
       _read_switches
       _write_external_eeprom
         _i2c_start
         _i2c_stop
         _i2c_write
     _clcd_print
     _clcd_putch
     _clcd_write
     _delay
     _print_to_console
       _putch
       _read_external_eeprom
     _putch
     _read_switches
     _set_time
       ___awdiv
       ___awmod
       _clcd_print
       _clcd_putch
       _clcd_write
       _delay
       _read_ds1307
       _read_switches
       _write_ds1307
         ___awdiv (ARG)
         ___awmod (ARG)
         _i2c_start (ARG)
         _i2c_stop (ARG)
         _i2c_write (ARG)
     _store_key_log
       ___awmod
       _write_external_eeprom
     _view_log
       _clcd_print
       _clcd_putch
       _delay
       _print_log_to_clcd
         _clcd_putch
         _read_external_eeprom
       _read_switches
   _init_config
     _init_adc
     _init_clcd
       _clcd_write
     _init_ds1307
       _read_ds1307
       _write_ds1307
     _init_i2c
     _init_matrix_keypad
     _init_uart
     _write_external_eeprom
   _read_switches
   _store_key_log

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      26        0.0%
BITBIGSFRlll       281      0       0      24        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      2B       5       26.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3A      5E       1       98.9%
BITBIGSFRhhhhhl     27      0       0      17        0.0%
BITBIGSFRllh         F      0       0      23        0.0%
BITBIGSFRhhhhhh      E      0       0      16        0.0%
BITBIGSFRlhhhl       9      0       0      20        0.0%
BITBIGSFRlhhhhl      8      0       0      19        0.0%
BITBIGSFRlhhhhh      7      0       0      18        0.0%
BITBIGSFRlhl         7      0       0      22        0.0%
BITBIGSFRlhhl        2      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      89      25        0.0%
DATA                 0      0      89       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Fri May 05 21:06:14 2023

                ?_get_password 0001          _write_external_eeprom 14F4                 clcd_print@addr 0005  
               clcd_print@data 0003                             l36 1578                             _GO 7E11  
                 ___awdiv@sign 0006             _init_matrix_keypad 13C2                            l241 1934  
                          l233 190E                            l250 1964                            l242 194C  
                          l251 1974                            l243 193C                            l235 1926  
                          l252 196C                            l236 1916                            l245 1944  
                          l238 191E                            l248 195C                            l187 2AD6  
                          l358 2D98                            l538 24E6                            l587 2374  
                          _CKE 7E3E                            l969 1E68                            _PEN 7E2A  
                          _SEN 7E28                            _RX9 7D5E                            _SMP 7E3F  
                          _TX9 7D66                            _WUE 7DC1                 clcd_putch@addr 0004  
               clcd_putch@data 0005                   ___awmod@sign 0006      __end_of_print_log_to_clcd 209A  
                          wreg 0FE8            ?_init_matrix_keypad 0001                   ___ftdiv@cntr 0015  
                 ___ftdiv@sign 001A                           l1107 1768                           l1117 168C  
                         l3011 2258                           l3111 260A                           l3031 232A  
                         l3023 22D6                           l3015 2282                           l3113 260E  
                         l3105 25E0                           l3121 2638                           l3107 25F2  
                         l3035 2354                           l3027 2300                           l3019 22AC  
                         l3133 2678                           l3141 2694                           l3061 1D5C  
                         l3053 1D24                           l3045 1CF2                           l3151 26B8  
                         l3135 267C                           l3127 264E                           l3143 26A6  
                         l3119 2626                           l3071 1D98                           l3129 2660  
                         l3241 2C68                           l3225 2B4C                           l3057 1D3A  
                         l3073 1DAA                           l3323 1DDC                           l3403 1F54  
                         l3251 2CDC                           l3243 2C7E                           l3067 1D82  
                         l3167 26FE                           l3255 2CFA                           l3263 2D60  
                         l3239 2C52                           l3247 2C94                           l3511 27F4  
                         l3329 1E04                           l3417 1C2E                           l3193 2794  
                         l3185 276C                           l3097 25B0                           l3257 2D1C  
                         l3249 2CBA                           l3601 2A1A                           l3521 2854  
                         l3435 1C82                           l2803 15C2                           l3195 279C  
                         l3187 278C                           l3259 2D3E                           l3267 2D86  
                         l3515 2808                           l3701 2458                           l3349 1E42  
                         l3453 1CC2                           l3445 1C9A                           l3533 2892  
                         l3525 286E                           l3517 2812                           l2823 1606  
                         l3703 2466                           l3375 1EEA                           l3447 1CA6  
                         l3439 1C92                           l3463 1736                           l3615 2A74  
                         l3551 2900                           l3535 28A2                           l3393 1F2C  
                         l3369 1EC2                           l3465 173E                           l2833 13B8  
                         l2913 198C                           l3617 2A88                           l2819 15FA  
                         l3723 24C8                           l3707 2484                           l3715 24A8  
                         l3475 175E                           l3491 1682                           l3483 1662  
                         l3563 2946                           l3539 28BA                           l3803 2138  
                         l2669 1492                           l2829 1612                           l3709 248A  
                         l3717 24B8                           l3389 1F1C                           l3485 166A  
                         l2925 19B2                           l2941 19E4                           l3581 299A  
                         l3557 2916                           l3629 2AC4                           l3813 2176  
                         l3751 253C                           l3399 1F44                           l2927 19BA  
                         l2919 199C                           l3591 29EA                           l2793 1806  
                         l3753 2544                           l2881 1ADE                           l2849 1518  
                         l2945 19F2                           l2937 19DA                           l2961 18B0  
                         l3577 298E                           l3817 218E                           l3739 2512  
                         l3827 21B0                           l2789 17DA                           l3693 240E  
                         l3765 2594                           l2885 1AF4                           l2877 1AB6  
                         l2797 15A6                           l2981 18F6                           l2973 18DE  
                         l2965 18BE                           l2957 18A4                           l3589 29B4  
                         l2887 1B12                           l2879 1AC0                           l2799 15AE  
                         l2967 18C6                           l3783 20BC                           l3689 23FE  
                         l2889 1B1C                           l2977 18E8                           l3793 20F2  
                         _ADFM 7E07                           _ADON 7E10                           STR_1 2FCC  
                         STR_2 2F92                           STR_3 2FB7                           STR_4 2FAC  
                         STR_5 2FDF                           STR_6 2F0E                           STR_7 2FA0  
                         STR_8 2FC2                           STR_9 2F84                           _BRGH 7D62  
                         _CREN 7D5C                           _FERR 7D5A                           u2021 1DC4  
                         u2041 1DEC                           u2131 1C12                           _CSRC 7D67  
                         u1420 17FE                           u2140 1C1C                           u2220 1742  
                         u2300 288C                           u1430 1826                           u2150 1C4C  
                         u2071 1EAA                           u2320 293A                           u2250 166E  
                         u2330 29F8                           u1427 17F4                           u2091 1ED2  
                         u2155 1C44                           u2420 242E                           u2500 2130  
                         u1285 1482                           u1437 181C                           u1286 1484  
                         u2430 244A                           u1550 1AA8                           u2190 1CAC  
                         u1710 18CA                           u2271 27D2              ?_print_to_console 0004  
                         u2450 24FA                           u1650 19BE                           u2370 2A60  
                         u2380 2A98                           u1821 1CEA                           u1590 1B26  
                         u1830 1D32                           u2390 2AB6                           u2480 2568  
                         u1920 26E4                           u1850 1D6C          ?_read_external_eeprom 0001  
                         u1940 2726                           u1860 1D7C                           u1960 27C0  
                         u1981 2B40                           _RCIE 7CED                           _RCEN 7E2B  
                         _RCIF 7CF5                           _OERR 7D59                           _SCKP 7DC4  
                         _RBPU 7F8F                           _RX9D 7D58                           _SPEN 7D5F  
                         _RSEN 7E29                           _TX9D 7D60                           _SREN 7D5D  
                         _TRMT 7D61                           _TXIE 7CEC                           _TXEN 7D65  
                         _TXIF 7CF4                           _SYNC 7D64                           _gear 0058  
                         _main 209A             ??_print_to_console 0006                   ___ftpack@arg 0001  
                 ___ftpack@exp 0004                           _time 004C                           fsr0h 0FEA  
                         fsr1h 0FE2                           indf0 0FEF                           fsr2h 0FDA  
                         fsr0l 0FE9                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           prodl 0FF3                           start 0000  
                 ___ftmul@cntr 0028           ??_init_matrix_keypad 0001                   ___param_bank 0000  
                 ___ftmul@sign 0029                 ??_get_password 0006                 clcd_write@byte 0002  
                _i2c_rep_start 1386                  ??_i2c_rx_mode 0001                   ___fttol@exp1 0038  
                 ___fttol@lval 0034                   ?_init_ds1307 0001                          _ABDEN 7DC0  
                        _ADCS0 7E00                          _ADCS1 7E01                          _ADCS2 7E02  
                        _ADDEN 7D5B                          ?_main 0001                   ?_read_ds1307 0001  
                        _ACKEN 7E2C                          _ACKDT 7E2D                          _BCLIF 7D0B  
                        _ACQT0 7E03                          _ACQT1 7E04                          _ACQT2 7E05  
              __end_of___awdiv 19FC                          STR_10 2FF9                          STR_11 2EFD  
                        STR_12 2FF6                          STR_20 2F68                          STR_21 2F4C  
                        STR_13 2F3D                          STR_14 2F76                          STR_22 2EDB  
                        STR_23 2FD6                          STR_15 2F2E                          STR_16 2FFC  
                        STR_24 2EEC                          _BRG16 7DC3                          STR_17 2FFC  
                        STR_25 2F5A                          STR_26 2FF0                          STR_18 2FE8  
                        STR_19 2F1F                __end_of___awmod 1900                __end_of___ftdiv 1E9A  
              __end_of___ftmul 1F8E                ___awdiv@divisor 0003                __end_of___fttol 1CD4  
              __end_of___lwdiv 1772                __end_of___lwmod 1696                   ?_init_config 0001  
                        _RCIDL 7DC6                ___awdiv@counter 0005                          _VCFG0 7E0C  
                        _VCFG1 7E0D                          _RCREG 0FAE                          _SENDB 7D63  
                        _SPBRG 0FAF                          _PORTB 0F81                          _PORTD 0F83  
                        _TRISB 0F93                          _TRISC 0F94                          _TRISD 0F95  
                        _SSPIF 7CF3                          _TXREG 0FAD      write_external_eeprom@data 0002  
    write_external_eeprom@wait 0003                          _delay 159C                    go_to_menu@i 0034  
                ___ftpack@sign 0005                          _speed 0055                          _putch 13B6  
              _change_password 25AA                          tablat 0FF5                          plusw1 0FE3  
                        plusw2 0FDB                          status 0FD8               init_ds1307@dummy 000B  
                   _i2c_no_ack 1368                __initialization 182E                 ?_i2c_rep_start 0001  
       ?_write_external_eeprom 0002                   __end_of_main 21D0               __end_of_i2c_idle 137E  
             __end_of_i2c_read 13AA               __end_of_i2c_stop 139E                         ??_main 003B  
                ___fttol@sign1 0033                  __activetblptr 0002            __end_of_i2c_rx_mode 1386  
            store_key_log@gear 0007                  get_password@i 001B                  get_password@j 0019  
                get_password@p 0017                         ?_delay 0001                         _ADCON0 0FC2  
                       _ADCON1 0FC1                         _ABDOVF 7DC7               read_switches@key 004B  
       ??_read_external_eeprom 0002                         _ADRESH 0FC4                         _ADRESL 0FC3  
        change_password@F10411 0070          change_password@F10409 0074               ___awdiv@dividend 0001  
                       ?_putch 0001               __end_of___ftpack 1B46                         _GODONE 7E11  
             __end_of___lwtoft 1478                   _write_ds1307 1416                         _SSPADD 0FC8  
                       _TRISC3 7CA3                         _TRISC4 7CA4                         _TRISC6 7CA6  
                       _TRISC7 7CA7                         _TRISD7 7CAF                         _SSPBUF 0FC9  
         get_password@wait_603 0010                set_time@blinker 000D               __end_of_get_time 17CE  
        print_log_to_clcd@LINE 0007                      ??___awdiv 0005                      ??___awmod 0005  
                    ??___ftdiv 0012                      ??___ftmul 0021                      ??___fttol 002E  
                    ??___lwdiv 0005                set_time@seconds 0020                      ??___lwmod 0005  
             __end_of_init_i2c 13FE          print_log_to_clcd@iter 0006               __end_of_init_adc 1454  
             __end_of_read_adc 159C                         delay@i 0006                         clear_0 1874  
                       clear_1 1880               ___awdiv@quotient 0007                ___awmod@divisor 0003  
                       isa$std 0001               __end_of_scan_key 1978                ___awmod@counter 0005  
        ___ftmul@f3_as_product 0025                   __pdataCOMRAM 0058        __end_of_change_password 27C8  
             __end_of_set_time 2EDA                   __mediumconst 2EDA                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8               __end_of_view_log 1DB4  
         __end_of_get_password 25AA             get_password@F10395 003B                     __accesstop 0060  
      __end_of__initialization 1886                  ___rparam_used 0001                     ___ftdiv@f1 000C  
                   ___ftdiv@f2 000F                     ___ftdiv@f3 0016                ??_i2c_rep_start 0001  
                  ?_i2c_no_ack 0001                     ___ftmul@f1 001B                     ___ftmul@f2 001E  
                   ___fttol@f1 002A                 __pcstackCOMRAM 0001                   __pidataBANK0 13D5  
                __end_of_delay 15D8                    _i2c_rx_mode 137E                  _store_key_log 21D0  
                __end_of_putch 13C2                     ___lwtoft@c 0009              __end_of_i2c_start 1396  
            __end_of_i2c_write 13B6                        ??_delay 0003                        ??_putch 0001  
                   __pbssBANK0 0060                      ?_i2c_idle 0001                      ?_i2c_read 0001  
                    ?_i2c_stop 0001           set_time@field_select 001A               get_password@wait 000E  
                   _clcd_print 17CE                     _clcd_putch 13FE                     _clcd_write 1478  
 write_external_eeprom@address 0005                read_ds1307@data 0003                 ?_store_key_log 0001  
            read_switches@once 005E                        _ACKSTAT 7E2E                      ?___ftpack 0001  
                    ?___lwtoft 0009               ?_change_password 0001                        _SSPCON1 0FC6  
                    ?_get_time 0001                  _read_switches 15D8                     ??_i2c_idle 0001  
                   ??_i2c_read 0001                     ??_i2c_stop 0001                      ?_init_i2c 0001  
                   _go_to_menu 27C8                      ?_init_adc 0001                      ?_read_adc 0001  
               view_log@F10424 0060                      ?_scan_key 0001        ??_write_external_eeprom 0003  
                      __Hparam 0000                        __Lparam 0000                      ?_set_time 0001  
            __end_of_get_speed 1A98                        ___awdiv 1978                        ___awmod 1890  
                    ?_view_log 0001                        ___ftdiv 1DB4                        ___ftmul 1E9A  
                      ___fttol 1C02                        ___lwdiv 1720                        ___lwmod 1654  
          set_time@time_buffer 000F                        __pcinit 182E                     ??___ftpack 0006  
                      __ramtop 0600                        __ptext0 209A                        __ptext1 1696  
                      __ptext2 1616                        __ptext3 13C2                        __ptext4 13E8  
                      __ptext5 16D8                        __ptext6 152A                        __ptext7 1434  
                      __ptext8 27C8                        __ptext9 1CD4                     ??___lwtoft 000C  
            __end_of_init_clcd 1560              __end_of_init_uart 1654                        delay@ms 0001  
             ___awmod@dividend 0001               go_to_menu@F10378 0078                  go_to_menu@pos 0032  
      get_password@key_pressed 0014                 ?_read_switches 0001         change_password@confirm 000A  
                   ??_get_time 0004           end_of_initialization 1886                 view_log@string 0009  
                  set_time@min 001E                     ??_init_i2c 0001                     ??_init_adc 0001  
                __Lmediumconst 2EDA                     ??_read_adc 0003                     ??_scan_key 0001  
                  ?_clcd_print 0003                    ?_clcd_putch 0004                    ?_clcd_write 0001  
              ??_store_key_log 0007                     ??_set_time 000B                        postdec1 0FE5  
                      postdec2 0FDD                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE                     ??_view_log 0008                   _get_password 23BA  
                    _PORTBbits 0F81                      _PORTCbits 0F82                      _PORTDbits 0F83  
              read_adc@channel 0007              view_log@exit_flag 0019                  i2c_write@data 0001  
              read_adc@reg_val 0005                    ?_go_to_menu 0001                    ___ftdiv@exp 0019  
     read_external_eeprom@data 0003                   ??_i2c_no_ack 0001                    ___ftmul@exp 0024  
                 ?_i2c_rx_mode 0001               _print_to_console 1B46                  __pidataCOMRAM 136F  
               set_time@F10422 0082            start_initialization 182E                ??_read_switches 0001  
                    _i2c_start 138E                      _i2c_write 13AA             __end_of_i2c_no_ack 136E  
             change_password@i 001B               change_password@j 0017          __end_of_i2c_rep_start 138E  
         change_password@j_620 0015           change_password@j_615 0019                  ??_init_ds1307 000B  
                  __pdataBANK0 0078                  ??_read_ds1307 0002    read_switches@detection_type 0001  
                ??_init_config 000C                    __pbssCOMRAM 003B                     ?_i2c_start 0001  
                   ?_i2c_write 0001              get_password@delay 000C              get_password@count 0012  
             ___lwdiv@dividend 0001  __end_of_write_external_eeprom 152A                      _gear_iter 0045  
                __pmediumconst 2EDA                       ?___awdiv 0001                       ?___awmod 0001  
                     ?___ftdiv 000C                       ?___ftmul 001B             read_ds1307@address 0002  
                     ?___fttol 002A                       ?___lwdiv 0001                       ?___lwmod 0001  
                    _get_speed 19FC            __end_of_init_ds1307 1720            __end_of_read_ds1307 14F4  
             ___lwdiv@quotient 0005                      _init_clcd 152A            __end_of_init_config 16D8  
                    _init_uart 1616                  ?_write_ds1307 0009                      delay@wait 0004  
  read_external_eeprom@address 0002                   ??_clcd_print 0006                   ??_clcd_putch 0005  
   __end_of_init_matrix_keypad 13D4                   ??_clcd_write 0002                go_to_menu@i_178 0030  
 get_password@entered_password 0008          clcd_write@control_bit 0001                     ?_get_speed 0001  
              _log_total_saved 0049                    ??_i2c_start 0001             __end_of_clcd_print 182E  
                  ??_i2c_write 0001             __end_of_clcd_putch 1416             __end_of_clcd_write 14A0  
                   ?_init_clcd 0001                     ?_init_uart 0001       __end_of_print_to_console 1C02  
                    copy_data0 1842                      copy_data1 1862                 ??_write_ds1307 000A  
                     _i2c_idle 1376                       _i2c_read 139E                   ??_go_to_menu 0022  
                     _i2c_stop 1396       change_password@exit_flag 0014              get_time@clock_reg 0042  
            set_time@clock_reg 003F                       __Hrparam 0000                       __Lrparam 0000  
                set_time@dummy 0019          __end_of_store_key_log 23BA            change_password@wait 000E  
 __end_of_read_external_eeprom 14CA                    _init_ds1307 16D8                       ___ftpack 1A98  
                  _read_ds1307 14CA                       ___lwtoft 1454                    _init_config 1696  
            set_time@exit_flag 0018            go_to_menu@exit_flag 002E             __end_of_go_to_menu 2AE0  
         get_speed@adc_reg_val 0039            write_ds1307@address 000A                ___lwdiv@divisor 0003  
              ___lwdiv@counter 0007                       __ptext10 1F8E                       __ptext11 21D0  
                     __ptext20 159C                       __ptext12 2AE0                       __ptext21 1772  
                     __ptext13 1416                       __ptext30 1DB4                       __ptext22 14CA  
                     __ptext14 1890                       __ptext31 1A98                       __ptext23 19FC  
                     __ptext15 1978                       __ptext40 139E                       __ptext32 23BA  
                     __ptext24 1560                       __ptext16 1B46                       __ptext41 137E  
                     __ptext33 15D8                       __ptext25 1454                       __ptext17 13B6  
                     __ptext42 1376                       __ptext34 1900                       __ptext26 1654  
                     __ptext18 25AA                       __ptext43 1368                       __ptext35 14A0  
                     __ptext27 1720                       __ptext19 14F4                       __ptext44 13FE  
                     __ptext36 13AA                       __ptext28 1C02                       __ptext45 17CE  
                     __ptext37 1396                       __ptext29 1E9A                       __ptext46 1478  
                     __ptext38 138E                       __ptext39 1386                       _get_time 1772  
                     _init_i2c 13E8                       _init_adc 1434                       _read_adc 1560  
                     _log_iter 0047                       _scan_key 1900              ??_change_password 0008  
                     _set_time 2AE0                 go_to_menu@menu 0024                       isa$xinst 0000  
                     _view_log 1CD4           print_to_console@iter 0004                    ??_get_speed 0039  
                    view_log@i 001B                      putch@byte 0001                   set_time@hour 001C  
      change_password@password 0010                    ??_init_clcd 0003          __end_of_read_switches 1616  
   get_password@total_attempts 0015                    ??_init_uart 0001               ___lwmod@dividend 0001  
         __end_of_write_ds1307 1434                ___lwmod@divisor 0003                ___lwmod@counter 0005  
            _print_log_to_clcd 1F8E             ?_print_log_to_clcd 0006               write_ds1307@data 0009  
         _read_external_eeprom 14A0            ??_print_log_to_clcd 0007  
